"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnableDelayAndLossRequestT = exports.EnableDelayAndLossRequest = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
class EnableDelayAndLossRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsEnableDelayAndLossRequest(bb, obj) {
        return (obj || new EnableDelayAndLossRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsEnableDelayAndLossRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new EnableDelayAndLossRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    delay() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    loss() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
    }
    static startEnableDelayAndLossRequest(builder) {
        builder.startObject(2);
    }
    static addDelay(builder, delay) {
        builder.addFieldInt8(0, +delay, +false);
    }
    static addLoss(builder, loss) {
        builder.addFieldInt8(1, +loss, +false);
    }
    static endEnableDelayAndLossRequest(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createEnableDelayAndLossRequest(builder, delay, loss) {
        EnableDelayAndLossRequest.startEnableDelayAndLossRequest(builder);
        EnableDelayAndLossRequest.addDelay(builder, delay);
        EnableDelayAndLossRequest.addLoss(builder, loss);
        return EnableDelayAndLossRequest.endEnableDelayAndLossRequest(builder);
    }
    unpack() {
        return new EnableDelayAndLossRequestT(this.delay(), this.loss());
    }
    unpackTo(_o) {
        _o.delay = this.delay();
        _o.loss = this.loss();
    }
}
exports.EnableDelayAndLossRequest = EnableDelayAndLossRequest;
class EnableDelayAndLossRequestT {
    delay;
    loss;
    constructor(delay = false, loss = false) {
        this.delay = delay;
        this.loss = loss;
    }
    pack(builder) {
        return EnableDelayAndLossRequest.createEnableDelayAndLossRequest(builder, this.delay, this.loss);
    }
}
exports.EnableDelayAndLossRequestT = EnableDelayAndLossRequestT;
