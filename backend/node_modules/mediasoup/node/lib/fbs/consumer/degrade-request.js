"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.DegradeRequestT = exports.DegradeRequest = void 0;
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */
const flatbuffers = require("flatbuffers");
class DegradeRequest {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsDegradeRequest(bb, obj) {
        return (obj || new DegradeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsDegradeRequest(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new DegradeRequest()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    durationMs() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    maxDelayMs() {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    delayPercent() {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    }
    lossPercent() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : 0;
    }
    static startDegradeRequest(builder) {
        builder.startObject(4);
    }
    static addDurationMs(builder, durationMs) {
        builder.addFieldInt32(0, durationMs, 0);
    }
    static addMaxDelayMs(builder, maxDelayMs) {
        builder.addFieldInt16(1, maxDelayMs, 0);
    }
    static addDelayPercent(builder, delayPercent) {
        builder.addFieldInt8(2, delayPercent, 0);
    }
    static addLossPercent(builder, lossPercent) {
        builder.addFieldInt8(3, lossPercent, 0);
    }
    static endDegradeRequest(builder) {
        const offset = builder.endObject();
        return offset;
    }
    static createDegradeRequest(builder, durationMs, maxDelayMs, delayPercent, lossPercent) {
        DegradeRequest.startDegradeRequest(builder);
        DegradeRequest.addDurationMs(builder, durationMs);
        DegradeRequest.addMaxDelayMs(builder, maxDelayMs);
        DegradeRequest.addDelayPercent(builder, delayPercent);
        DegradeRequest.addLossPercent(builder, lossPercent);
        return DegradeRequest.endDegradeRequest(builder);
    }
    unpack() {
        return new DegradeRequestT(this.durationMs(), this.maxDelayMs(), this.delayPercent(), this.lossPercent());
    }
    unpackTo(_o) {
        _o.durationMs = this.durationMs();
        _o.maxDelayMs = this.maxDelayMs();
        _o.delayPercent = this.delayPercent();
        _o.lossPercent = this.lossPercent();
    }
}
exports.DegradeRequest = DegradeRequest;
class DegradeRequestT {
    durationMs;
    maxDelayMs;
    delayPercent;
    lossPercent;
    constructor(durationMs = 0, maxDelayMs = 0, delayPercent = 0, lossPercent = 0) {
        this.durationMs = durationMs;
        this.maxDelayMs = maxDelayMs;
        this.delayPercent = delayPercent;
        this.lossPercent = lossPercent;
    }
    pack(builder) {
        return DegradeRequest.createDegradeRequest(builder, this.durationMs, this.maxDelayMs, this.delayPercent, this.lossPercent);
    }
}
exports.DegradeRequestT = DegradeRequestT;
