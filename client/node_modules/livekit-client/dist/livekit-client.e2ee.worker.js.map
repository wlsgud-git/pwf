{"version":3,"file":"livekit-client.e2ee.worker.js","sources":["../node_modules/.pnpm/loglevel@1.9.2/node_modules/loglevel/lib/loglevel.js","../src/logger.ts","../src/utils/AsyncQueue.ts","../node_modules/.pnpm/@livekit+mutex@1.1.1/node_modules/@livekit/mutex/dist/index.mjs","../src/e2ee/constants.ts","../src/room/errors.ts","../src/e2ee/errors.ts","../src/e2ee/events.ts","../node_modules/.pnpm/events@3.3.0/node_modules/events/events.js","../src/e2ee/utils.ts","../src/e2ee/worker/SifGuard.ts","../src/e2ee/worker/FrameCryptor.ts","../src/e2ee/worker/ParticipantKeyHandler.ts","../src/e2ee/worker/e2ee.worker.ts"],"sourcesContent":["/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (typeof define === 'function' && define.amd) {\n        define(definition);\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (\n        /Trident\\/|MSIE /.test(window.navigator.userAgent)\n    );\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    var _loggersByName = {};\n    var defaultLogger = null;\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Trace() doesn't print the message in IE, so for that case we need to wrap it\n    function traceForIE() {\n        if (console.log) {\n            if (console.log.apply) {\n                console.log.apply(console, arguments);\n            } else {\n                // In old IE, native console methods themselves don't have apply().\n                Function.prototype.apply.apply(console.log, [console, arguments]);\n            }\n        }\n        if (console.trace) console.trace();\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (methodName === 'trace' && isIE) {\n            return traceForIE;\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods() {\n        /*jshint validthis:true */\n        var level = this.getLevel();\n\n        // Replace the actual methods.\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, this.name);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n\n        // Return any important warnings.\n        if (typeof console === undefinedType && level < this.levels.SILENT) {\n            return \"No console available for logging\";\n        }\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, _level, _loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, factory) {\n      // Private instance variables.\n      var self = this;\n      /**\n       * The level inherited from a parent logger (or a global default). We\n       * cache this here rather than delegating to the parent so that it stays\n       * in sync with the actual logging methods that we have installed (the\n       * parent could change levels but we might not have rebuilt the loggers\n       * in this child yet).\n       * @type {number}\n       */\n      var inheritedLevel;\n      /**\n       * The default level for this logger, if any. If set, this overrides\n       * `inheritedLevel`.\n       * @type {number|null}\n       */\n      var defaultLevel;\n      /**\n       * A user-specific level for this logger. If set, this overrides\n       * `defaultLevel`.\n       * @type {number|null}\n       */\n      var userLevel;\n\n      var storageKey = \"loglevel\";\n      if (typeof name === \"string\") {\n        storageKey += \":\" + name;\n      } else if (typeof name === \"symbol\") {\n        storageKey = undefined;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType || !storageKey) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var cookieName = encodeURIComponent(storageKey);\n                  var location = cookie.indexOf(cookieName + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(\n                          cookie.slice(location + cookieName.length + 1)\n                      )[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      function clearPersistedLevel() {\n          if (typeof window === undefinedType || !storageKey) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage.removeItem(storageKey);\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=; expires=Thu, 01 Jan 1970 00:00:00 UTC\";\n          } catch (ignore) {}\n      }\n\n      function normalizeLevel(input) {\n          var level = input;\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              return level;\n          } else {\n              throw new TypeError(\"log.setLevel() called with invalid level: \" + input);\n          }\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          if (userLevel != null) {\n            return userLevel;\n          } else if (defaultLevel != null) {\n            return defaultLevel;\n          } else {\n            return inheritedLevel;\n          }\n      };\n\n      self.setLevel = function (level, persist) {\n          userLevel = normalizeLevel(level);\n          if (persist !== false) {  // defaults to true\n              persistLevelIfPossible(userLevel);\n          }\n\n          // NOTE: in v2, this should call rebuild(), which updates children.\n          return replaceLoggingMethods.call(self);\n      };\n\n      self.setDefaultLevel = function (level) {\n          defaultLevel = normalizeLevel(level);\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.resetLevel = function () {\n          userLevel = null;\n          clearPersistedLevel();\n          replaceLoggingMethods.call(self);\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      self.rebuild = function () {\n          if (defaultLogger !== self) {\n              inheritedLevel = normalizeLevel(defaultLogger.getLevel());\n          }\n          replaceLoggingMethods.call(self);\n\n          if (defaultLogger === self) {\n              for (var childName in _loggersByName) {\n                _loggersByName[childName].rebuild();\n              }\n          }\n      };\n\n      // Initialize all the internal levels.\n      inheritedLevel = normalizeLevel(\n          defaultLogger ? defaultLogger.getLevel() : \"WARN\"\n      );\n      var initialLevel = getPersistedLevel();\n      if (initialLevel != null) {\n          userLevel = normalizeLevel(initialLevel);\n      }\n      replaceLoggingMethods.call(self);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    defaultLogger = new Logger();\n\n    defaultLogger.getLogger = function getLogger(name) {\n        if ((typeof name !== \"symbol\" && typeof name !== \"string\") || name === \"\") {\n            throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n            logger = _loggersByName[name] = new Logger(\n                name,\n                defaultLogger.methodFactory\n            );\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    // ES6 default export, for compatibility\n    defaultLogger['default'] = defaultLogger;\n\n    return defaultLogger;\n}));\n","import * as log from 'loglevel';\n\nexport enum LogLevel {\n  trace = 0,\n  debug = 1,\n  info = 2,\n  warn = 3,\n  error = 4,\n  silent = 5,\n}\n\nexport enum LoggerNames {\n  Default = 'livekit',\n  Room = 'livekit-room',\n  Participant = 'livekit-participant',\n  Track = 'livekit-track',\n  Publication = 'livekit-track-publication',\n  Engine = 'livekit-engine',\n  Signal = 'livekit-signal',\n  PCManager = 'livekit-pc-manager',\n  PCTransport = 'livekit-pc-transport',\n  E2EE = 'lk-e2ee',\n}\n\ntype LogLevelString = keyof typeof LogLevel;\n\nexport type StructuredLogger = log.Logger & {\n  trace: (msg: string, context?: object) => void;\n  debug: (msg: string, context?: object) => void;\n  info: (msg: string, context?: object) => void;\n  warn: (msg: string, context?: object) => void;\n  error: (msg: string, context?: object) => void;\n  setDefaultLevel: (level: log.LogLevelDesc) => void;\n  setLevel: (level: log.LogLevelDesc) => void;\n  getLevel: () => number;\n};\n\nlet livekitLogger = log.getLogger('livekit');\nconst livekitLoggers = Object.values(LoggerNames).map((name) => log.getLogger(name));\n\nlivekitLogger.setDefaultLevel(LogLevel.info);\n\nexport default livekitLogger as StructuredLogger;\n\n/**\n * @internal\n */\nexport function getLogger(name: string) {\n  const logger = log.getLogger(name);\n  logger.setDefaultLevel(livekitLogger.getLevel());\n  return logger as StructuredLogger;\n}\n\nexport function setLogLevel(level: LogLevel | LogLevelString, loggerName?: LoggerNames) {\n  if (loggerName) {\n    log.getLogger(loggerName).setLevel(level);\n  } else {\n    for (const logger of livekitLoggers) {\n      logger.setLevel(level);\n    }\n  }\n}\n\nexport type LogExtension = (level: LogLevel, msg: string, context?: object) => void;\n\n/**\n * use this to hook into the logging function to allow sending internal livekit logs to third party services\n * if set, the browser logs will lose their stacktrace information (see https://github.com/pimterry/loglevel#writing-plugins)\n */\nexport function setLogExtension(extension: LogExtension, logger?: StructuredLogger) {\n  const loggers = logger ? [logger] : livekitLoggers;\n\n  loggers.forEach((logR) => {\n    const originalFactory = logR.methodFactory;\n\n    logR.methodFactory = (methodName, configLevel, loggerName) => {\n      const rawMethod = originalFactory(methodName, configLevel, loggerName);\n\n      const logLevel = LogLevel[methodName as LogLevelString];\n      const needLog = logLevel >= configLevel && logLevel < LogLevel.silent;\n\n      return (msg, context?: [msg: string, context: object]) => {\n        if (context) rawMethod(msg, context);\n        else rawMethod(msg);\n        if (needLog) {\n          extension(logLevel, msg, context);\n        }\n      };\n    };\n    logR.setLevel(logR.getLevel());\n  });\n}\n\nexport const workerLogger = log.getLogger('lk-e2ee') as StructuredLogger;\n","import { Mutex } from '@livekit/mutex';\n\ntype QueueTask<T> = () => PromiseLike<T>;\n\nenum QueueTaskStatus {\n  'WAITING',\n  'RUNNING',\n  'COMPLETED',\n}\n\ntype QueueTaskInfo = {\n  id: number;\n  enqueuedAt: number;\n  executedAt?: number;\n  status: QueueTaskStatus;\n};\n\nexport class AsyncQueue {\n  private pendingTasks: Map<number, QueueTaskInfo>;\n\n  private taskMutex: Mutex;\n\n  private nextTaskIndex: number;\n\n  constructor() {\n    this.pendingTasks = new Map();\n    this.taskMutex = new Mutex();\n    this.nextTaskIndex = 0;\n  }\n\n  async run<T>(task: QueueTask<T>) {\n    const taskInfo: QueueTaskInfo = {\n      id: this.nextTaskIndex++,\n      enqueuedAt: Date.now(),\n      status: QueueTaskStatus.WAITING,\n    };\n    this.pendingTasks.set(taskInfo.id, taskInfo);\n    const unlock = await this.taskMutex.lock();\n    try {\n      taskInfo.executedAt = Date.now();\n      taskInfo.status = QueueTaskStatus.RUNNING;\n      return await task();\n    } finally {\n      taskInfo.status = QueueTaskStatus.COMPLETED;\n      this.pendingTasks.delete(taskInfo.id);\n      unlock();\n    }\n  }\n\n  async flush() {\n    return this.run(async () => {});\n  }\n\n  snapshot() {\n    return Array.from(this.pendingTasks.values());\n  }\n}\n","var e = Object.defineProperty;\nvar h = (i, s, t) => s in i ? e(i, s, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[s] = t;\nvar o = (i, s, t) => h(i, typeof s != \"symbol\" ? s + \"\" : s, t);\nclass _ {\n  constructor() {\n    o(this, \"_locking\");\n    o(this, \"_locks\");\n    this._locking = Promise.resolve(), this._locks = 0;\n  }\n  isLocked() {\n    return this._locks > 0;\n  }\n  lock() {\n    this._locks += 1;\n    let s;\n    const t = new Promise(\n      (l) => s = () => {\n        this._locks -= 1, l();\n      }\n    ), c = this._locking.then(() => s);\n    return this._locking = this._locking.then(() => t), c;\n  }\n}\nclass n {\n  constructor(s) {\n    o(this, \"_queue\");\n    o(this, \"_limit\");\n    o(this, \"_locks\");\n    this._queue = [], this._limit = s, this._locks = 0;\n  }\n  isLocked() {\n    return this._locks >= this._limit;\n  }\n  async lock() {\n    return this.isLocked() ? new Promise((s) => {\n      this._queue.push(() => {\n        this._locks++, s(this._unlock.bind(this));\n      });\n    }) : (this._locks++, this._unlock.bind(this));\n  }\n  _unlock() {\n    if (this._locks--, this._queue.length && !this.isLocked()) {\n      const s = this._queue.shift();\n      s == null || s();\n    }\n  }\n}\nexport {\n  n as MultiMutex,\n  _ as Mutex\n};\n//# sourceMappingURL=index.mjs.map\n","import type { KeyProviderOptions } from './types';\n\nexport const ENCRYPTION_ALGORITHM = 'AES-GCM';\n\n// How many consecutive frames can fail decrypting before a particular key gets marked as invalid\nexport const DECRYPTION_FAILURE_TOLERANCE = 10;\n\n// We copy the first bytes of the VP8 payload unencrypted.\n// For keyframes this is 10 bytes, for non-keyframes (delta) 3. See\n//   https://tools.ietf.org/html/rfc6386#section-9.1\n// This allows the bridge to continue detecting keyframes (only one byte needed in the JVB)\n// and is also a bit easier for the VP8 decoder (i.e. it generates funny garbage pictures\n// instead of being unable to decode).\n// This is a bit for show and we might want to reduce to 1 unconditionally in the final version.\n//\n// For audio (where frame.type is not set) we do not encrypt the opus TOC byte:\n//   https://tools.ietf.org/html/rfc6716#section-3.1\nexport const UNENCRYPTED_BYTES = {\n  key: 10,\n  delta: 3,\n  audio: 1, // frame.type is not set on audio, so this is set manually\n  empty: 0,\n} as const;\n\n/* We use a 12 byte bit IV. This is signalled in plain together with the\n packet. See https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters */\nexport const IV_LENGTH = 12;\n\n// flag set to indicate that e2ee has been setup for sender/receiver;\nexport const E2EE_FLAG = 'lk_e2ee';\n\nexport const SALT = 'LKFrameEncryptionKey';\n\nexport const KEY_PROVIDER_DEFAULTS: KeyProviderOptions = {\n  sharedKey: false,\n  ratchetSalt: SALT,\n  ratchetWindowSize: 8,\n  failureTolerance: DECRYPTION_FAILURE_TOLERANCE,\n  keyringSize: 16,\n} as const;\n\nexport const MAX_SIF_COUNT = 100;\nexport const MAX_SIF_DURATION = 2000;\n","import { DisconnectReason, RequestResponse_Reason } from '@livekit/protocol';\n\nexport class LivekitError extends Error {\n  code: number;\n\n  constructor(code: number, message?: string) {\n    super(message || 'an error has occured');\n    this.name = 'LiveKitError';\n    this.code = code;\n  }\n}\n\nexport enum ConnectionErrorReason {\n  NotAllowed,\n  ServerUnreachable,\n  InternalError,\n  Cancelled,\n  LeaveRequest,\n  Timeout,\n}\n\nexport class ConnectionError extends LivekitError {\n  status?: number;\n\n  context?: unknown | DisconnectReason;\n\n  reason: ConnectionErrorReason;\n\n  reasonName: string;\n\n  constructor(\n    message: string,\n    reason: ConnectionErrorReason,\n    status?: number,\n    context?: unknown | DisconnectReason,\n  ) {\n    super(1, message);\n    this.name = 'ConnectionError';\n    this.status = status;\n    this.reason = reason;\n    this.context = context;\n    this.reasonName = ConnectionErrorReason[reason];\n  }\n}\n\nexport class DeviceUnsupportedError extends LivekitError {\n  constructor(message?: string) {\n    super(21, message ?? 'device is unsupported');\n    this.name = 'DeviceUnsupportedError';\n  }\n}\n\nexport class TrackInvalidError extends LivekitError {\n  constructor(message?: string) {\n    super(20, message ?? 'track is invalid');\n    this.name = 'TrackInvalidError';\n  }\n}\n\nexport class UnsupportedServer extends LivekitError {\n  constructor(message?: string) {\n    super(10, message ?? 'unsupported server');\n    this.name = 'UnsupportedServer';\n  }\n}\n\nexport class UnexpectedConnectionState extends LivekitError {\n  constructor(message?: string) {\n    super(12, message ?? 'unexpected connection state');\n    this.name = 'UnexpectedConnectionState';\n  }\n}\n\nexport class NegotiationError extends LivekitError {\n  constructor(message?: string) {\n    super(13, message ?? 'unable to negotiate');\n    this.name = 'NegotiationError';\n  }\n}\n\nexport class PublishDataError extends LivekitError {\n  constructor(message?: string) {\n    super(14, message ?? 'unable to publish data');\n    this.name = 'PublishDataError';\n  }\n}\n\nexport class PublishTrackError extends LivekitError {\n  status: number;\n\n  constructor(message: string, status: number) {\n    super(15, message);\n    this.name = 'PublishTrackError';\n    this.status = status;\n  }\n}\n\nexport type RequestErrorReason =\n  | Exclude<RequestResponse_Reason, RequestResponse_Reason.OK>\n  | 'TimeoutError';\n\nexport class SignalRequestError extends LivekitError {\n  reason: RequestErrorReason;\n\n  reasonName: string;\n\n  constructor(message: string, reason: RequestErrorReason) {\n    super(15, message);\n    this.reason = reason;\n    this.reasonName = typeof reason === 'string' ? reason : RequestResponse_Reason[reason];\n  }\n}\n\nexport enum MediaDeviceFailure {\n  // user rejected permissions\n  PermissionDenied = 'PermissionDenied',\n  // device is not available\n  NotFound = 'NotFound',\n  // device is in use. On Windows, only a single tab may get access to a device at a time.\n  DeviceInUse = 'DeviceInUse',\n  Other = 'Other',\n}\n\nexport namespace MediaDeviceFailure {\n  export function getFailure(error: any): MediaDeviceFailure | undefined {\n    if (error && 'name' in error) {\n      if (error.name === 'NotFoundError' || error.name === 'DevicesNotFoundError') {\n        return MediaDeviceFailure.NotFound;\n      }\n      if (error.name === 'NotAllowedError' || error.name === 'PermissionDeniedError') {\n        return MediaDeviceFailure.PermissionDenied;\n      }\n      if (error.name === 'NotReadableError' || error.name === 'TrackStartError') {\n        return MediaDeviceFailure.DeviceInUse;\n      }\n      return MediaDeviceFailure.Other;\n    }\n  }\n}\n","import { LivekitError } from '../room/errors';\n\nexport enum CryptorErrorReason {\n  InvalidKey = 0,\n  MissingKey = 1,\n  InternalError = 2,\n}\n\nexport class CryptorError extends LivekitError {\n  reason: CryptorErrorReason;\n\n  participantIdentity?: string;\n\n  constructor(\n    message?: string,\n    reason: CryptorErrorReason = CryptorErrorReason.InternalError,\n    participantIdentity?: string,\n  ) {\n    super(40, message);\n    this.reason = reason;\n    this.participantIdentity = participantIdentity;\n  }\n}\n","import type Participant from '../room/participant/Participant';\nimport type { CryptorError } from './errors';\nimport type { KeyInfo, RatchetResult } from './types';\n\nexport enum KeyProviderEvent {\n  SetKey = 'setKey',\n  /** Event for requesting to ratchet the key used to encrypt the stream */\n  RatchetRequest = 'ratchetRequest',\n  /** Emitted when a key is ratcheted. Could be after auto-ratcheting on decryption failure or\n   *  following a `RatchetRequest`, will contain the ratcheted key material */\n  KeyRatcheted = 'keyRatcheted',\n}\n\nexport type KeyProviderCallbacks = {\n  [KeyProviderEvent.SetKey]: (keyInfo: KeyInfo) => void;\n  [KeyProviderEvent.RatchetRequest]: (participantIdentity?: string, keyIndex?: number) => void;\n  [KeyProviderEvent.KeyRatcheted]: (\n    ratchetedResult: RatchetResult,\n    participantIdentity?: string,\n    keyIndex?: number,\n  ) => void;\n};\n\nexport enum KeyHandlerEvent {\n  /** Emitted when a key has been ratcheted. Is emitted when any key has been ratcheted\n   * i.e. when the FrameCryptor tried to ratchet when decryption is failing  */\n  KeyRatcheted = 'keyRatcheted',\n}\n\nexport type ParticipantKeyHandlerCallbacks = {\n  [KeyHandlerEvent.KeyRatcheted]: (\n    ratchetResult: RatchetResult,\n    participantIdentity: string,\n    keyIndex?: number,\n  ) => void;\n};\n\nexport enum EncryptionEvent {\n  ParticipantEncryptionStatusChanged = 'participantEncryptionStatusChanged',\n  EncryptionError = 'encryptionError',\n}\n\nexport type E2EEManagerCallbacks = {\n  [EncryptionEvent.ParticipantEncryptionStatusChanged]: (\n    enabled: boolean,\n    participant: Participant,\n  ) => void;\n  [EncryptionEvent.EncryptionError]: (error: Error) => void;\n};\n\nexport type CryptorCallbacks = {\n  [CryptorEvent.Error]: (error: CryptorError) => void;\n};\n\nexport enum CryptorEvent {\n  Error = 'cryptorError',\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","import { ENCRYPTION_ALGORITHM } from './constants';\n\nexport function isE2EESupported() {\n  return isInsertableStreamSupported() || isScriptTransformSupported();\n}\n\nexport function isScriptTransformSupported() {\n  // @ts-ignore\n  return typeof window.RTCRtpScriptTransform !== 'undefined';\n}\n\nexport function isInsertableStreamSupported() {\n  return (\n    typeof window.RTCRtpSender !== 'undefined' &&\n    // @ts-ignore\n    typeof window.RTCRtpSender.prototype.createEncodedStreams !== 'undefined'\n  );\n}\n\nexport function isVideoFrame(\n  frame: RTCEncodedAudioFrame | RTCEncodedVideoFrame,\n): frame is RTCEncodedVideoFrame {\n  return 'type' in frame;\n}\n\nexport async function importKey(\n  keyBytes: Uint8Array | ArrayBuffer,\n  algorithm: string | { name: string } = { name: ENCRYPTION_ALGORITHM },\n  usage: 'derive' | 'encrypt' = 'encrypt',\n) {\n  // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey\n  return crypto.subtle.importKey(\n    'raw',\n    keyBytes,\n    algorithm,\n    false,\n    usage === 'derive' ? ['deriveBits', 'deriveKey'] : ['encrypt', 'decrypt'],\n  );\n}\n\nexport async function createKeyMaterialFromString(password: string) {\n  let enc = new TextEncoder();\n\n  const keyMaterial = await crypto.subtle.importKey(\n    'raw',\n    enc.encode(password),\n    {\n      name: 'PBKDF2',\n    },\n    false,\n    ['deriveBits', 'deriveKey'],\n  );\n\n  return keyMaterial;\n}\n\nexport async function createKeyMaterialFromBuffer(cryptoBuffer: ArrayBuffer) {\n  const keyMaterial = await crypto.subtle.importKey('raw', cryptoBuffer, 'HKDF', false, [\n    'deriveBits',\n    'deriveKey',\n  ]);\n\n  return keyMaterial;\n}\n\nfunction getAlgoOptions(algorithmName: string, salt: string) {\n  const textEncoder = new TextEncoder();\n  const encodedSalt = textEncoder.encode(salt);\n  switch (algorithmName) {\n    case 'HKDF':\n      return {\n        name: 'HKDF',\n        salt: encodedSalt,\n        hash: 'SHA-256',\n        info: new ArrayBuffer(128),\n      };\n    case 'PBKDF2': {\n      return {\n        name: 'PBKDF2',\n        salt: encodedSalt,\n        hash: 'SHA-256',\n        iterations: 100000,\n      };\n    }\n    default:\n      throw new Error(`algorithm ${algorithmName} is currently unsupported`);\n  }\n}\n\n/**\n * Derives a set of keys from the master key.\n * See https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.1\n */\nexport async function deriveKeys(material: CryptoKey, salt: string) {\n  const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey#HKDF\n  // https://developer.mozilla.org/en-US/docs/Web/API/HkdfParams\n  const encryptionKey = await crypto.subtle.deriveKey(\n    algorithmOptions,\n    material,\n    {\n      name: ENCRYPTION_ALGORITHM,\n      length: 128,\n    },\n    false,\n    ['encrypt', 'decrypt'],\n  );\n\n  return { material, encryptionKey };\n}\n\nexport function createE2EEKey(): Uint8Array {\n  return window.crypto.getRandomValues(new Uint8Array(32));\n}\n\n/**\n * Ratchets a key. See\n * https://tools.ietf.org/html/draft-omara-sframe-00#section-4.3.5.1\n */\nexport async function ratchet(material: CryptoKey, salt: string): Promise<ArrayBuffer> {\n  const algorithmOptions = getAlgoOptions(material.algorithm.name, salt);\n\n  // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits\n  return crypto.subtle.deriveBits(algorithmOptions, material, 256);\n}\n\nexport function needsRbspUnescaping(frameData: Uint8Array) {\n  for (var i = 0; i < frameData.length - 3; i++) {\n    if (frameData[i] == 0 && frameData[i + 1] == 0 && frameData[i + 2] == 3) return true;\n  }\n  return false;\n}\n\nexport function parseRbsp(stream: Uint8Array): Uint8Array {\n  const dataOut: number[] = [];\n  var length = stream.length;\n  for (var i = 0; i < stream.length; ) {\n    // Be careful about over/underflow here. byte_length_ - 3 can underflow, and\n    // i + 3 can overflow, but byte_length_ - i can't, because i < byte_length_\n    // above, and that expression will produce the number of bytes left in\n    // the stream including the byte at i.\n    if (length - i >= 3 && !stream[i] && !stream[i + 1] && stream[i + 2] == 3) {\n      // Two rbsp bytes.\n      dataOut.push(stream[i++]);\n      dataOut.push(stream[i++]);\n      // Skip the emulation byte.\n      i++;\n    } else {\n      // Single rbsp byte.\n      dataOut.push(stream[i++]);\n    }\n  }\n  return new Uint8Array(dataOut);\n}\n\nconst kZerosInStartSequence = 2;\nconst kEmulationByte = 3;\n\nexport function writeRbsp(data_in: Uint8Array): Uint8Array {\n  const dataOut: number[] = [];\n  var numConsecutiveZeros = 0;\n  for (var i = 0; i < data_in.length; ++i) {\n    var byte = data_in[i];\n    if (byte <= kEmulationByte && numConsecutiveZeros >= kZerosInStartSequence) {\n      // Need to escape.\n      dataOut.push(kEmulationByte);\n      numConsecutiveZeros = 0;\n    }\n    dataOut.push(byte);\n    if (byte == 0) {\n      ++numConsecutiveZeros;\n    } else {\n      numConsecutiveZeros = 0;\n    }\n  }\n  return new Uint8Array(dataOut);\n}\n","import { MAX_SIF_COUNT, MAX_SIF_DURATION } from '../constants';\n\nexport class SifGuard {\n  private consecutiveSifCount = 0;\n\n  private sifSequenceStartedAt: number | undefined;\n\n  private lastSifReceivedAt: number = 0;\n\n  private userFramesSinceSif: number = 0;\n\n  recordSif() {\n    this.consecutiveSifCount += 1;\n    this.sifSequenceStartedAt ??= Date.now();\n    this.lastSifReceivedAt = Date.now();\n  }\n\n  recordUserFrame() {\n    if (this.sifSequenceStartedAt === undefined) {\n      return;\n    } else {\n      this.userFramesSinceSif += 1;\n    }\n    if (\n      // reset if we received more user frames than SIFs\n      this.userFramesSinceSif > this.consecutiveSifCount ||\n      // also reset if we got a new user frame and the latest SIF frame hasn't been updated in a while\n      Date.now() - this.lastSifReceivedAt > MAX_SIF_DURATION\n    ) {\n      this.reset();\n    }\n  }\n\n  isSifAllowed() {\n    return (\n      this.consecutiveSifCount < MAX_SIF_COUNT &&\n      (this.sifSequenceStartedAt === undefined ||\n        Date.now() - this.sifSequenceStartedAt < MAX_SIF_DURATION)\n    );\n  }\n\n  reset() {\n    this.userFramesSinceSif = 0;\n    this.consecutiveSifCount = 0;\n    this.sifSequenceStartedAt = undefined;\n  }\n}\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n// TODO code inspired by https://github.com/webrtc/samples/blob/gh-pages/src/content/insertable-streams/endtoend-encryption/js/worker.js\nimport { EventEmitter } from 'events';\nimport type TypedEventEmitter from 'typed-emitter';\nimport { workerLogger } from '../../logger';\nimport type { VideoCodec } from '../../room/track/options';\nimport { ENCRYPTION_ALGORITHM, IV_LENGTH, UNENCRYPTED_BYTES } from '../constants';\nimport { CryptorError, CryptorErrorReason } from '../errors';\nimport { type CryptorCallbacks, CryptorEvent } from '../events';\nimport type { DecodeRatchetOptions, KeyProviderOptions, KeySet, RatchetResult } from '../types';\nimport { deriveKeys, isVideoFrame, needsRbspUnescaping, parseRbsp, writeRbsp } from '../utils';\nimport type { ParticipantKeyHandler } from './ParticipantKeyHandler';\nimport { SifGuard } from './SifGuard';\n\nexport const encryptionEnabledMap: Map<string, boolean> = new Map();\n\nexport interface FrameCryptorConstructor {\n  new (opts?: unknown): BaseFrameCryptor;\n}\n\nexport interface TransformerInfo {\n  readable: ReadableStream;\n  writable: WritableStream;\n  transformer: TransformStream;\n  abortController: AbortController;\n}\n\nexport class BaseFrameCryptor extends (EventEmitter as new () => TypedEventEmitter<CryptorCallbacks>) {\n  protected encodeFunction(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    controller: TransformStreamDefaultController,\n  ): Promise<any> {\n    throw Error('not implemented for subclass');\n  }\n\n  protected decodeFunction(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    controller: TransformStreamDefaultController,\n  ): Promise<any> {\n    throw Error('not implemented for subclass');\n  }\n}\n\n/**\n * Cryptor is responsible for en-/decrypting media frames.\n * Each Cryptor instance is responsible for en-/decrypting a single mediaStreamTrack.\n */\nexport class FrameCryptor extends BaseFrameCryptor {\n  private sendCounts: Map<number, number>;\n\n  private participantIdentity: string | undefined;\n\n  private trackId: string | undefined;\n\n  private keys: ParticipantKeyHandler;\n\n  private videoCodec?: VideoCodec;\n\n  private rtpMap: Map<number, VideoCodec>;\n\n  private keyProviderOptions: KeyProviderOptions;\n\n  /**\n   * used for detecting server injected unencrypted frames\n   */\n  private sifTrailer: Uint8Array;\n\n  private sifGuard: SifGuard;\n\n  private detectedCodec?: VideoCodec;\n\n  private isTransformActive: boolean = false;\n\n  constructor(opts: {\n    keys: ParticipantKeyHandler;\n    participantIdentity: string;\n    keyProviderOptions: KeyProviderOptions;\n    sifTrailer?: Uint8Array;\n  }) {\n    super();\n    this.sendCounts = new Map();\n    this.keys = opts.keys;\n    this.participantIdentity = opts.participantIdentity;\n    this.rtpMap = new Map();\n    this.keyProviderOptions = opts.keyProviderOptions;\n    this.sifTrailer = opts.sifTrailer ?? Uint8Array.from([]);\n    this.sifGuard = new SifGuard();\n  }\n\n  private get logContext() {\n    return {\n      participant: this.participantIdentity,\n      mediaTrackId: this.trackId,\n      fallbackCodec: this.videoCodec,\n    };\n  }\n\n  /**\n   * Assign a different participant to the cryptor.\n   * useful for transceiver re-use\n   * @param id\n   * @param keys\n   */\n  setParticipant(id: string, keys: ParticipantKeyHandler) {\n    workerLogger.debug('setting new participant on cryptor', {\n      ...this.logContext,\n      participant: id,\n    });\n    if (this.participantIdentity) {\n      workerLogger.error(\n        'cryptor has already a participant set, participant should have been unset before',\n        {\n          ...this.logContext,\n        },\n      );\n    }\n    this.participantIdentity = id;\n    this.keys = keys;\n    this.sifGuard.reset();\n  }\n\n  unsetParticipant() {\n    workerLogger.debug('unsetting participant', this.logContext);\n    this.participantIdentity = undefined;\n  }\n\n  isEnabled() {\n    if (this.participantIdentity) {\n      return encryptionEnabledMap.get(this.participantIdentity);\n    } else {\n      return undefined;\n    }\n  }\n\n  getParticipantIdentity() {\n    return this.participantIdentity;\n  }\n\n  getTrackId() {\n    return this.trackId;\n  }\n\n  /**\n   * Update the video codec used by the mediaStreamTrack\n   * @param codec\n   */\n  setVideoCodec(codec: VideoCodec) {\n    this.videoCodec = codec;\n  }\n\n  /**\n   * rtp payload type map used for figuring out codec of payload type when encoding\n   * @param map\n   */\n  setRtpMap(map: Map<number, VideoCodec>) {\n    this.rtpMap = map;\n  }\n\n  setupTransform(\n    operation: 'encode' | 'decode',\n    readable: ReadableStream<RTCEncodedVideoFrame | RTCEncodedAudioFrame>,\n    writable: WritableStream<RTCEncodedVideoFrame | RTCEncodedAudioFrame>,\n    trackId: string,\n    isReuse: boolean,\n    codec?: VideoCodec,\n  ) {\n    if (codec) {\n      workerLogger.info('setting codec on cryptor to', { codec });\n      this.videoCodec = codec;\n    }\n\n    workerLogger.debug('Setting up frame cryptor transform', {\n      operation,\n      passedTrackId: trackId,\n      codec,\n      ...this.logContext,\n    });\n\n    if (isReuse && this.isTransformActive) {\n      workerLogger.debug('reuse transform', {\n        ...this.logContext,\n      });\n      return;\n    }\n\n    const transformFn = operation === 'encode' ? this.encodeFunction : this.decodeFunction;\n    const transformStream = new TransformStream({\n      transform: transformFn.bind(this),\n    });\n\n    this.isTransformActive = true;\n\n    readable\n      .pipeThrough(transformStream)\n      .pipeTo(writable)\n      .catch((e) => {\n        workerLogger.warn(e);\n        this.emit(\n          CryptorEvent.Error,\n          e instanceof CryptorError\n            ? e\n            : new CryptorError(e.message, undefined, this.participantIdentity),\n        );\n      })\n      .finally(() => {\n        this.isTransformActive = false;\n      });\n    this.trackId = trackId;\n  }\n\n  setSifTrailer(trailer: Uint8Array) {\n    workerLogger.debug('setting SIF trailer', { ...this.logContext, trailer });\n    this.sifTrailer = trailer;\n  }\n\n  /**\n   * Function that will be injected in a stream and will encrypt the given encoded frames.\n   *\n   * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n   * @param {TransformStreamDefaultController} controller - TransportStreamController.\n   *\n   * The VP8 payload descriptor described in\n   * https://tools.ietf.org/html/rfc7741#section-4.2\n   * is part of the RTP packet and not part of the frame and is not controllable by us.\n   * This is fine as the SFU keeps having access to it for routing.\n   *\n   * The encrypted frame is formed as follows:\n   * 1) Find unencrypted byte length, depending on the codec, frame type and kind.\n   * 2) Form the GCM IV for the frame as described above.\n   * 3) Encrypt the rest of the frame using AES-GCM.\n   * 4) Allocate space for the encrypted frame.\n   * 5) Copy the unencrypted bytes to the start of the encrypted frame.\n   * 6) Append the ciphertext to the encrypted frame.\n   * 7) Append the IV.\n   * 8) Append a single byte for the key identifier.\n   * 9) Enqueue the encrypted frame for sending.\n   */\n  protected async encodeFunction(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    controller: TransformStreamDefaultController,\n  ) {\n    if (\n      !this.isEnabled() ||\n      // skip for encryption for empty dtx frames\n      encodedFrame.data.byteLength === 0\n    ) {\n      return controller.enqueue(encodedFrame);\n    }\n    const keySet = this.keys.getKeySet();\n    if (!keySet) {\n      this.emit(\n        CryptorEvent.Error,\n        new CryptorError(\n          `key set not found for ${\n            this.participantIdentity\n          } at index ${this.keys.getCurrentKeyIndex()}`,\n          CryptorErrorReason.MissingKey,\n          this.participantIdentity,\n        ),\n      );\n      return;\n    }\n    const { encryptionKey } = keySet;\n    const keyIndex = this.keys.getCurrentKeyIndex();\n\n    if (encryptionKey) {\n      const iv = this.makeIV(\n        encodedFrame.getMetadata().synchronizationSource ?? -1,\n        encodedFrame.timestamp,\n      );\n      let frameInfo = this.getUnencryptedBytes(encodedFrame);\n\n      // Thіs is not encrypted and contains the VP8 payload descriptor or the Opus TOC byte.\n      const frameHeader = new Uint8Array(encodedFrame.data, 0, frameInfo.unencryptedBytes);\n\n      // Frame trailer contains the R|IV_LENGTH and key index\n      const frameTrailer = new Uint8Array(2);\n\n      frameTrailer[0] = IV_LENGTH;\n      frameTrailer[1] = keyIndex;\n\n      // Construct frame trailer. Similar to the frame header described in\n      // https://tools.ietf.org/html/draft-omara-sframe-00#section-4.2\n      // but we put it at the end.\n      //\n      // ---------+-------------------------+-+---------+----\n      // payload  |IV...(length = IV_LENGTH)|R|IV_LENGTH|KID |\n      // ---------+-------------------------+-+---------+----\n      try {\n        const cipherText = await crypto.subtle.encrypt(\n          {\n            name: ENCRYPTION_ALGORITHM,\n            iv,\n            additionalData: new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength),\n          },\n          encryptionKey,\n          new Uint8Array(encodedFrame.data, frameInfo.unencryptedBytes),\n        );\n\n        let newDataWithoutHeader = new Uint8Array(\n          cipherText.byteLength + iv.byteLength + frameTrailer.byteLength,\n        );\n        newDataWithoutHeader.set(new Uint8Array(cipherText)); // add ciphertext.\n        newDataWithoutHeader.set(new Uint8Array(iv), cipherText.byteLength); // append IV.\n        newDataWithoutHeader.set(frameTrailer, cipherText.byteLength + iv.byteLength); // append frame trailer.\n\n        if (frameInfo.isH264) {\n          newDataWithoutHeader = writeRbsp(newDataWithoutHeader);\n        }\n\n        var newData = new Uint8Array(frameHeader.byteLength + newDataWithoutHeader.byteLength);\n        newData.set(frameHeader);\n        newData.set(newDataWithoutHeader, frameHeader.byteLength);\n\n        encodedFrame.data = newData.buffer;\n\n        return controller.enqueue(encodedFrame);\n      } catch (e: any) {\n        // TODO: surface this to the app.\n        workerLogger.error(e);\n      }\n    } else {\n      workerLogger.debug('failed to encrypt, emitting error', this.logContext);\n      this.emit(\n        CryptorEvent.Error,\n        new CryptorError(\n          `encryption key missing for encoding`,\n          CryptorErrorReason.MissingKey,\n          this.participantIdentity,\n        ),\n      );\n    }\n  }\n\n  /**\n   * Function that will be injected in a stream and will decrypt the given encoded frames.\n   *\n   * @param {RTCEncodedVideoFrame|RTCEncodedAudioFrame} encodedFrame - Encoded video frame.\n   * @param {TransformStreamDefaultController} controller - TransportStreamController.\n   */\n  protected async decodeFunction(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    controller: TransformStreamDefaultController,\n  ) {\n    if (\n      !this.isEnabled() ||\n      // skip for decryption for empty dtx frames\n      encodedFrame.data.byteLength === 0\n    ) {\n      workerLogger.debug('skipping empty frame', this.logContext);\n      this.sifGuard.recordUserFrame();\n      return controller.enqueue(encodedFrame);\n    }\n\n    if (isFrameServerInjected(encodedFrame.data, this.sifTrailer)) {\n      workerLogger.debug('enqueue SIF', this.logContext);\n      this.sifGuard.recordSif();\n\n      if (this.sifGuard.isSifAllowed()) {\n        encodedFrame.data = encodedFrame.data.slice(\n          0,\n          encodedFrame.data.byteLength - this.sifTrailer.byteLength,\n        );\n        return controller.enqueue(encodedFrame);\n      } else {\n        workerLogger.warn('SIF limit reached, dropping frame');\n        return;\n      }\n    } else {\n      this.sifGuard.recordUserFrame();\n    }\n    const data = new Uint8Array(encodedFrame.data);\n    const keyIndex = data[encodedFrame.data.byteLength - 1];\n\n    if (this.keys.hasInvalidKeyAtIndex(keyIndex)) {\n      // drop frame\n      return;\n    }\n\n    if (this.keys.getKeySet(keyIndex)) {\n      try {\n        const decodedFrame = await this.decryptFrame(encodedFrame, keyIndex);\n        this.keys.decryptionSuccess(keyIndex);\n        if (decodedFrame) {\n          return controller.enqueue(decodedFrame);\n        }\n      } catch (error) {\n        if (error instanceof CryptorError && error.reason === CryptorErrorReason.InvalidKey) {\n          // emit an error if the key handler thinks we have a valid key\n          if (this.keys.hasValidKey) {\n            this.emit(CryptorEvent.Error, error);\n            this.keys.decryptionFailure(keyIndex);\n          }\n        } else {\n          workerLogger.warn('decoding frame failed', { error });\n        }\n      }\n    } else {\n      // emit an error if the key index is out of bounds but the key handler thinks we still have a valid key\n      workerLogger.warn(`skipping decryption due to missing key at index ${keyIndex}`);\n      this.emit(\n        CryptorEvent.Error,\n        new CryptorError(\n          `missing key at index ${keyIndex} for participant ${this.participantIdentity}`,\n          CryptorErrorReason.MissingKey,\n          this.participantIdentity,\n        ),\n      );\n      this.keys.decryptionFailure(keyIndex);\n    }\n  }\n\n  /**\n   * Function that will decrypt the given encoded frame. If the decryption fails, it will\n   * ratchet the key for up to RATCHET_WINDOW_SIZE times.\n   */\n  private async decryptFrame(\n    encodedFrame: RTCEncodedVideoFrame | RTCEncodedAudioFrame,\n    keyIndex: number,\n    initialMaterial: KeySet | undefined = undefined,\n    ratchetOpts: DecodeRatchetOptions = { ratchetCount: 0 },\n  ): Promise<RTCEncodedVideoFrame | RTCEncodedAudioFrame | undefined> {\n    const keySet = this.keys.getKeySet(keyIndex);\n    if (!ratchetOpts.encryptionKey && !keySet) {\n      throw new TypeError(`no encryption key found for decryption of ${this.participantIdentity}`);\n    }\n    let frameInfo = this.getUnencryptedBytes(encodedFrame);\n\n    // Construct frame trailer. Similar to the frame header described in\n    // https://tools.ietf.org/html/draft-omara-sframe-00#section-4.2\n    // but we put it at the end.\n    //\n    // ---------+-------------------------+-+---------+----\n    // payload  |IV...(length = IV_LENGTH)|R|IV_LENGTH|KID |\n    // ---------+-------------------------+-+---------+----\n\n    try {\n      const frameHeader = new Uint8Array(encodedFrame.data, 0, frameInfo.unencryptedBytes);\n      var encryptedData = new Uint8Array(\n        encodedFrame.data,\n        frameHeader.length,\n        encodedFrame.data.byteLength - frameHeader.length,\n      );\n      if (frameInfo.isH264 && needsRbspUnescaping(encryptedData)) {\n        encryptedData = parseRbsp(encryptedData);\n        const newUint8 = new Uint8Array(frameHeader.byteLength + encryptedData.byteLength);\n        newUint8.set(frameHeader);\n        newUint8.set(encryptedData, frameHeader.byteLength);\n        encodedFrame.data = newUint8.buffer;\n      }\n\n      const frameTrailer = new Uint8Array(encodedFrame.data, encodedFrame.data.byteLength - 2, 2);\n\n      const ivLength = frameTrailer[0];\n      const iv = new Uint8Array(\n        encodedFrame.data,\n        encodedFrame.data.byteLength - ivLength - frameTrailer.byteLength,\n        ivLength,\n      );\n\n      const cipherTextStart = frameHeader.byteLength;\n      const cipherTextLength =\n        encodedFrame.data.byteLength -\n        (frameHeader.byteLength + ivLength + frameTrailer.byteLength);\n\n      const plainText = await crypto.subtle.decrypt(\n        {\n          name: ENCRYPTION_ALGORITHM,\n          iv,\n          additionalData: new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength),\n        },\n        ratchetOpts.encryptionKey ?? keySet!.encryptionKey,\n        new Uint8Array(encodedFrame.data, cipherTextStart, cipherTextLength),\n      );\n\n      const newData = new ArrayBuffer(frameHeader.byteLength + plainText.byteLength);\n      const newUint8 = new Uint8Array(newData);\n\n      newUint8.set(new Uint8Array(encodedFrame.data, 0, frameHeader.byteLength));\n      newUint8.set(new Uint8Array(plainText), frameHeader.byteLength);\n\n      encodedFrame.data = newData;\n\n      return encodedFrame;\n    } catch (error: any) {\n      if (this.keyProviderOptions.ratchetWindowSize > 0) {\n        if (ratchetOpts.ratchetCount < this.keyProviderOptions.ratchetWindowSize) {\n          workerLogger.debug(\n            `ratcheting key attempt ${ratchetOpts.ratchetCount} of ${\n              this.keyProviderOptions.ratchetWindowSize\n            }, for kind ${encodedFrame instanceof RTCEncodedAudioFrame ? 'audio' : 'video'}`,\n          );\n\n          let ratchetedKeySet: KeySet | undefined;\n          let ratchetResult: RatchetResult | undefined;\n          if ((initialMaterial ?? keySet) === this.keys.getKeySet(keyIndex)) {\n            // only ratchet if the currently set key is still the same as the one used to decrypt this frame\n            // if not, it might be that a different frame has already ratcheted and we try with that one first\n            ratchetResult = await this.keys.ratchetKey(keyIndex, false);\n\n            ratchetedKeySet = await deriveKeys(\n              ratchetResult.cryptoKey,\n              this.keyProviderOptions.ratchetSalt,\n            );\n          }\n\n          const frame = await this.decryptFrame(encodedFrame, keyIndex, initialMaterial || keySet, {\n            ratchetCount: ratchetOpts.ratchetCount + 1,\n            encryptionKey: ratchetedKeySet?.encryptionKey,\n          });\n          if (frame && ratchetedKeySet) {\n            // before updating the keys, make sure that the keySet used for this frame is still the same as the currently set key\n            // if it's not, a new key might have been set already, which we don't want to override\n            if ((initialMaterial ?? keySet) === this.keys.getKeySet(keyIndex)) {\n              this.keys.setKeySet(ratchetedKeySet, keyIndex, ratchetResult);\n              // decryption was successful, set the new key index to reflect the ratcheted key set\n              this.keys.setCurrentKeyIndex(keyIndex);\n            }\n          }\n          return frame;\n        } else {\n          /**\n           * Because we only set a new key once decryption has been successful,\n           * we can be sure that we don't need to reset the key to the initial material at this point\n           * as the key has not been updated on the keyHandler instance\n           */\n\n          workerLogger.warn('maximum ratchet attempts exceeded');\n          throw new CryptorError(\n            `valid key missing for participant ${this.participantIdentity}`,\n            CryptorErrorReason.InvalidKey,\n            this.participantIdentity,\n          );\n        }\n      } else {\n        throw new CryptorError(\n          `Decryption failed: ${error.message}`,\n          CryptorErrorReason.InvalidKey,\n          this.participantIdentity,\n        );\n      }\n    }\n  }\n\n  /**\n   * Construct the IV used for AES-GCM and sent (in plain) with the packet similar to\n   * https://tools.ietf.org/html/rfc7714#section-8.1\n   * It concatenates\n   * - the 32 bit synchronization source (SSRC) given on the encoded frame,\n   * - the 32 bit rtp timestamp given on the encoded frame,\n   * - a send counter that is specific to the SSRC. Starts at a random number.\n   * The send counter is essentially the pictureId but we currently have to implement this ourselves.\n   * There is no XOR with a salt. Note that this IV leaks the SSRC to the receiver but since this is\n   * randomly generated and SFUs may not rewrite this is considered acceptable.\n   * The SSRC is used to allow demultiplexing multiple streams with the same key, as described in\n   *   https://tools.ietf.org/html/rfc3711#section-4.1.1\n   * The RTP timestamp is 32 bits and advances by the codec clock rate (90khz for video, 48khz for\n   * opus audio) every second. For video it rolls over roughly every 13 hours.\n   * The send counter will advance at the frame rate (30fps for video, 50fps for 20ms opus audio)\n   * every second. It will take a long time to roll over.\n   *\n   * See also https://developer.mozilla.org/en-US/docs/Web/API/AesGcmParams\n   */\n  private makeIV(synchronizationSource: number, timestamp: number) {\n    const iv = new ArrayBuffer(IV_LENGTH);\n    const ivView = new DataView(iv);\n\n    // having to keep our own send count (similar to a picture id) is not ideal.\n    if (!this.sendCounts.has(synchronizationSource)) {\n      // Initialize with a random offset, similar to the RTP sequence number.\n      this.sendCounts.set(synchronizationSource, Math.floor(Math.random() * 0xffff));\n    }\n\n    const sendCount = this.sendCounts.get(synchronizationSource) ?? 0;\n\n    ivView.setUint32(0, synchronizationSource);\n    ivView.setUint32(4, timestamp);\n    ivView.setUint32(8, timestamp - (sendCount % 0xffff));\n\n    this.sendCounts.set(synchronizationSource, sendCount + 1);\n\n    return iv;\n  }\n\n  private getUnencryptedBytes(frame: RTCEncodedVideoFrame | RTCEncodedAudioFrame): {\n    unencryptedBytes: number;\n    isH264: boolean;\n  } {\n    var frameInfo = { unencryptedBytes: 0, isH264: false };\n    if (isVideoFrame(frame)) {\n      let detectedCodec = this.getVideoCodec(frame) ?? this.videoCodec;\n      if (detectedCodec !== this.detectedCodec) {\n        workerLogger.debug('detected different codec', {\n          detectedCodec,\n          oldCodec: this.detectedCodec,\n          ...this.logContext,\n        });\n        this.detectedCodec = detectedCodec;\n      }\n\n      if (detectedCodec === 'av1') {\n        throw new Error(`${detectedCodec} is not yet supported for end to end encryption`);\n      }\n\n      if (detectedCodec === 'vp8') {\n        frameInfo.unencryptedBytes = UNENCRYPTED_BYTES[frame.type];\n      } else if (detectedCodec === 'vp9') {\n        frameInfo.unencryptedBytes = 0;\n        return frameInfo;\n      }\n\n      const data = new Uint8Array(frame.data);\n      try {\n        const naluIndices = findNALUIndices(data);\n\n        // if the detected codec is undefined we test whether it _looks_ like a h264 frame as a best guess\n        frameInfo.isH264 =\n          detectedCodec === 'h264' ||\n          naluIndices.some((naluIndex) =>\n            [NALUType.SLICE_IDR, NALUType.SLICE_NON_IDR].includes(parseNALUType(data[naluIndex])),\n          );\n\n        if (frameInfo.isH264) {\n          for (const index of naluIndices) {\n            let type = parseNALUType(data[index]);\n            switch (type) {\n              case NALUType.SLICE_IDR:\n              case NALUType.SLICE_NON_IDR:\n                frameInfo.unencryptedBytes = index + 2;\n                return frameInfo;\n              default:\n                break;\n            }\n          }\n          throw new TypeError('Could not find NALU');\n        }\n      } catch (e) {\n        // no op, we just continue and fallback to vp8\n      }\n\n      frameInfo.unencryptedBytes = UNENCRYPTED_BYTES[frame.type];\n      return frameInfo;\n    } else {\n      frameInfo.unencryptedBytes = UNENCRYPTED_BYTES.audio;\n      return frameInfo;\n    }\n  }\n\n  /**\n   * inspects frame payloadtype if available and maps it to the codec specified in rtpMap\n   */\n  private getVideoCodec(frame: RTCEncodedVideoFrame): VideoCodec | undefined {\n    if (this.rtpMap.size === 0) {\n      return undefined;\n    }\n    const payloadType = frame.getMetadata().payloadType;\n    const codec = payloadType ? this.rtpMap.get(payloadType) : undefined;\n    return codec;\n  }\n}\n\n/**\n * Slice the NALUs present in the supplied buffer, assuming it is already byte-aligned\n * code adapted from https://github.com/medooze/h264-frame-parser/blob/main/lib/NalUnits.ts to return indices only\n */\nexport function findNALUIndices(stream: Uint8Array): number[] {\n  const result: number[] = [];\n  let start = 0,\n    pos = 0,\n    searchLength = stream.length - 2;\n  while (pos < searchLength) {\n    // skip until end of current NALU\n    while (\n      pos < searchLength &&\n      !(stream[pos] === 0 && stream[pos + 1] === 0 && stream[pos + 2] === 1)\n    )\n      pos++;\n    if (pos >= searchLength) pos = stream.length;\n    // remove trailing zeros from current NALU\n    let end = pos;\n    while (end > start && stream[end - 1] === 0) end--;\n    // save current NALU\n    if (start === 0) {\n      if (end !== start) throw TypeError('byte stream contains leading data');\n    } else {\n      result.push(start);\n    }\n    // begin new NALU\n    start = pos = pos + 3;\n  }\n  return result;\n}\n\nexport function parseNALUType(startByte: number): NALUType {\n  return startByte & kNaluTypeMask;\n}\n\nconst kNaluTypeMask = 0x1f;\n\nexport enum NALUType {\n  /** Coded slice of a non-IDR picture */\n  SLICE_NON_IDR = 1,\n  /** Coded slice data partition A */\n  SLICE_PARTITION_A = 2,\n  /** Coded slice data partition B */\n  SLICE_PARTITION_B = 3,\n  /** Coded slice data partition C */\n  SLICE_PARTITION_C = 4,\n  /** Coded slice of an IDR picture */\n  SLICE_IDR = 5,\n  /** Supplemental enhancement information */\n  SEI = 6,\n  /** Sequence parameter set */\n  SPS = 7,\n  /** Picture parameter set */\n  PPS = 8,\n  /** Access unit delimiter */\n  AUD = 9,\n  /** End of sequence */\n  END_SEQ = 10,\n  /** End of stream */\n  END_STREAM = 11,\n  /** Filler data */\n  FILLER_DATA = 12,\n  /** Sequence parameter set extension */\n  SPS_EXT = 13,\n  /** Prefix NAL unit */\n  PREFIX_NALU = 14,\n  /** Subset sequence parameter set */\n  SUBSET_SPS = 15,\n  /** Depth parameter set */\n  DPS = 16,\n\n  // 17, 18 reserved\n\n  /** Coded slice of an auxiliary coded picture without partitioning */\n  SLICE_AUX = 19,\n  /** Coded slice extension */\n  SLICE_EXT = 20,\n  /** Coded slice extension for a depth view component or a 3D-AVC texture view component */\n  SLICE_LAYER_EXT = 21,\n\n  // 22, 23 reserved\n}\n\n/**\n * we use a magic frame trailer to detect whether a frame is injected\n * by the livekit server and thus to be treated as unencrypted\n * @internal\n */\nexport function isFrameServerInjected(frameData: ArrayBuffer, trailerBytes: Uint8Array): boolean {\n  if (trailerBytes.byteLength === 0) {\n    return false;\n  }\n  const frameTrailer = new Uint8Array(\n    frameData.slice(frameData.byteLength - trailerBytes.byteLength),\n  );\n  return trailerBytes.every((value, index) => value === frameTrailer[index]);\n}\n","import { EventEmitter } from 'events';\nimport type TypedEventEmitter from 'typed-emitter';\nimport { workerLogger } from '../../logger';\nimport { KeyHandlerEvent, type ParticipantKeyHandlerCallbacks } from '../events';\nimport type { KeyProviderOptions, KeySet, RatchetResult } from '../types';\nimport { deriveKeys, importKey, ratchet } from '../utils';\n\n// TODO ParticipantKeyHandlers currently don't get destroyed on participant disconnect\n// we could do this by having a separate worker message on participant disconnected.\n\n/**\n * ParticipantKeyHandler is responsible for providing a cryptor instance with the\n * en-/decryption key of a participant. It assumes that all tracks of a specific participant\n * are encrypted with the same key.\n * Additionally it exposes a method to ratchet a key which can be used by the cryptor either automatically\n * if decryption fails or can be triggered manually on both sender and receiver side.\n *\n */\nexport class ParticipantKeyHandler extends (EventEmitter as new () => TypedEventEmitter<ParticipantKeyHandlerCallbacks>) {\n  private currentKeyIndex: number;\n\n  private cryptoKeyRing: Array<KeySet | undefined>;\n\n  private decryptionFailureCounts: Array<number>;\n\n  private keyProviderOptions: KeyProviderOptions;\n\n  private ratchetPromiseMap: Map<number, Promise<RatchetResult>>;\n\n  private participantIdentity: string;\n\n  /**\n   * true if the current key has not been marked as invalid\n   */\n  get hasValidKey(): boolean {\n    return !this.hasInvalidKeyAtIndex(this.currentKeyIndex);\n  }\n\n  constructor(participantIdentity: string, keyProviderOptions: KeyProviderOptions) {\n    super();\n    this.currentKeyIndex = 0;\n    if (keyProviderOptions.keyringSize < 1 || keyProviderOptions.keyringSize > 256) {\n      throw new TypeError('Keyring size needs to be between 1 and 256');\n    }\n    this.cryptoKeyRing = new Array(keyProviderOptions.keyringSize).fill(undefined);\n    this.decryptionFailureCounts = new Array(keyProviderOptions.keyringSize).fill(0);\n    this.keyProviderOptions = keyProviderOptions;\n    this.ratchetPromiseMap = new Map();\n    this.participantIdentity = participantIdentity;\n  }\n\n  /**\n   * Returns true if the key at the given index is marked as invalid.\n   *\n   * @param keyIndex the index of the key\n   */\n  hasInvalidKeyAtIndex(keyIndex: number): boolean {\n    return (\n      this.keyProviderOptions.failureTolerance >= 0 &&\n      this.decryptionFailureCounts[keyIndex] > this.keyProviderOptions.failureTolerance\n    );\n  }\n\n  /**\n   * Informs the key handler that a decryption failure occurred for an encryption key.\n   * @internal\n   * @param keyIndex the key index for which the failure occurred. Defaults to the current key index.\n   */\n  decryptionFailure(keyIndex: number = this.currentKeyIndex): void {\n    if (this.keyProviderOptions.failureTolerance < 0) {\n      return;\n    }\n\n    this.decryptionFailureCounts[keyIndex] += 1;\n\n    if (this.decryptionFailureCounts[keyIndex] > this.keyProviderOptions.failureTolerance) {\n      workerLogger.warn(\n        `key for ${this.participantIdentity} at index ${keyIndex} is being marked as invalid`,\n      );\n    }\n  }\n\n  /**\n   * Informs the key handler that a frame was successfully decrypted using an encryption key.\n   * @internal\n   * @param keyIndex the key index for which the success occurred. Defaults to the current key index.\n   */\n  decryptionSuccess(keyIndex: number = this.currentKeyIndex): void {\n    this.resetKeyStatus(keyIndex);\n  }\n\n  /**\n   * Call this after user initiated ratchet or a new key has been set in order to make sure to mark potentially\n   * invalid keys as valid again\n   *\n   * @param keyIndex the index of the key. Defaults to the current key index.\n   */\n  resetKeyStatus(keyIndex?: number): void {\n    if (keyIndex === undefined) {\n      this.decryptionFailureCounts.fill(0);\n    } else {\n      this.decryptionFailureCounts[keyIndex] = 0;\n    }\n  }\n\n  /**\n   * Ratchets the current key (or the one at keyIndex if provided) and\n   * returns the ratcheted material\n   * if `setKey` is true (default), it will also set the ratcheted key directly on the crypto key ring\n   * @param keyIndex\n   * @param setKey\n   */\n  ratchetKey(keyIndex?: number, setKey = true): Promise<RatchetResult> {\n    const currentKeyIndex = keyIndex ?? this.getCurrentKeyIndex();\n\n    const existingPromise = this.ratchetPromiseMap.get(currentKeyIndex);\n    if (typeof existingPromise !== 'undefined') {\n      return existingPromise;\n    }\n    const ratchetPromise = new Promise<RatchetResult>(async (resolve, reject) => {\n      try {\n        const keySet = this.getKeySet(currentKeyIndex);\n        if (!keySet) {\n          throw new TypeError(\n            `Cannot ratchet key without a valid keyset of participant ${this.participantIdentity}`,\n          );\n        }\n        const currentMaterial = keySet.material;\n        const chainKey = await ratchet(currentMaterial, this.keyProviderOptions.ratchetSalt);\n        const newMaterial = await importKey(chainKey, currentMaterial.algorithm.name, 'derive');\n        const ratchetResult: RatchetResult = {\n          chainKey,\n          cryptoKey: newMaterial,\n        };\n        if (setKey) {\n          // Set the new key and emit a ratchet event with the ratcheted chain key\n          await this.setKeyFromMaterial(newMaterial, currentKeyIndex, ratchetResult);\n        }\n        resolve(ratchetResult);\n      } catch (e) {\n        reject(e);\n      } finally {\n        this.ratchetPromiseMap.delete(currentKeyIndex);\n      }\n    });\n    this.ratchetPromiseMap.set(currentKeyIndex, ratchetPromise);\n    return ratchetPromise;\n  }\n\n  /**\n   * takes in a key material with `deriveBits` and `deriveKey` set as key usages\n   * and derives encryption keys from the material and sets it on the key ring buffer\n   * together with the material\n   * also resets the valid key property and updates the currentKeyIndex\n   */\n  async setKey(material: CryptoKey, keyIndex = 0) {\n    await this.setKeyFromMaterial(material, keyIndex);\n    this.resetKeyStatus(keyIndex);\n  }\n\n  /**\n   * takes in a key material with `deriveBits` and `deriveKey` set as key usages\n   * and derives encryption keys from the material and sets it on the key ring buffers\n   * together with the material\n   * also updates the currentKeyIndex\n   */\n  async setKeyFromMaterial(\n    material: CryptoKey,\n    keyIndex: number,\n    ratchetedResult: RatchetResult | null = null,\n  ) {\n    const keySet = await deriveKeys(material, this.keyProviderOptions.ratchetSalt);\n    const newIndex = keyIndex >= 0 ? keyIndex % this.cryptoKeyRing.length : this.currentKeyIndex;\n    workerLogger.debug(`setting new key with index ${keyIndex}`, {\n      usage: material.usages,\n      algorithm: material.algorithm,\n      ratchetSalt: this.keyProviderOptions.ratchetSalt,\n    });\n    this.setKeySet(keySet, newIndex, ratchetedResult);\n    if (newIndex >= 0) this.currentKeyIndex = newIndex;\n  }\n\n  setKeySet(keySet: KeySet, keyIndex: number, ratchetedResult: RatchetResult | null = null) {\n    this.cryptoKeyRing[keyIndex % this.cryptoKeyRing.length] = keySet;\n\n    if (ratchetedResult) {\n      this.emit(KeyHandlerEvent.KeyRatcheted, ratchetedResult, this.participantIdentity, keyIndex);\n    }\n  }\n\n  async setCurrentKeyIndex(index: number) {\n    this.currentKeyIndex = index % this.cryptoKeyRing.length;\n    this.resetKeyStatus(index);\n  }\n\n  getCurrentKeyIndex() {\n    return this.currentKeyIndex;\n  }\n\n  /**\n   * returns currently used KeySet or the one at `keyIndex` if provided\n   * @param keyIndex\n   * @returns\n   */\n  getKeySet(keyIndex?: number) {\n    return this.cryptoKeyRing[keyIndex ?? this.currentKeyIndex];\n  }\n}\n","import { workerLogger } from '../../logger';\nimport type { VideoCodec } from '../../room/track/options';\nimport { AsyncQueue } from '../../utils/AsyncQueue';\nimport { KEY_PROVIDER_DEFAULTS } from '../constants';\nimport { CryptorErrorReason } from '../errors';\nimport { CryptorEvent, KeyHandlerEvent } from '../events';\nimport type {\n  E2EEWorkerMessage,\n  ErrorMessage,\n  InitAck,\n  KeyProviderOptions,\n  RatchetMessage,\n  RatchetRequestMessage,\n  RatchetResult,\n  ScriptTransformOptions,\n} from '../types';\nimport { FrameCryptor, encryptionEnabledMap } from './FrameCryptor';\nimport { ParticipantKeyHandler } from './ParticipantKeyHandler';\n\nconst participantCryptors: FrameCryptor[] = [];\nconst participantKeys: Map<string, ParticipantKeyHandler> = new Map();\nlet sharedKeyHandler: ParticipantKeyHandler | undefined;\nlet messageQueue = new AsyncQueue();\n\nlet isEncryptionEnabled: boolean = false;\n\nlet useSharedKey: boolean = false;\n\nlet sifTrailer: Uint8Array | undefined;\n\nlet keyProviderOptions: KeyProviderOptions = KEY_PROVIDER_DEFAULTS;\n\nlet rtpMap: Map<number, VideoCodec> = new Map();\n\nworkerLogger.setDefaultLevel('info');\n\nonmessage = (ev) => {\n  messageQueue.run(async () => {\n    const { kind, data }: E2EEWorkerMessage = ev.data;\n\n    switch (kind) {\n      case 'init':\n        workerLogger.setLevel(data.loglevel);\n        workerLogger.info('worker initialized');\n        keyProviderOptions = data.keyProviderOptions;\n        useSharedKey = !!data.keyProviderOptions.sharedKey;\n        // acknowledge init successful\n        const ackMsg: InitAck = {\n          kind: 'initAck',\n          data: { enabled: isEncryptionEnabled },\n        };\n        postMessage(ackMsg);\n        break;\n      case 'enable':\n        setEncryptionEnabled(data.enabled, data.participantIdentity);\n        workerLogger.info(\n          `updated e2ee enabled status for ${data.participantIdentity} to ${data.enabled}`,\n        );\n        // acknowledge enable call successful\n        postMessage(ev.data);\n        break;\n      case 'decode':\n        let cryptor = getTrackCryptor(data.participantIdentity, data.trackId);\n        cryptor.setupTransform(\n          kind,\n          data.readableStream,\n          data.writableStream,\n          data.trackId,\n          data.isReuse,\n          data.codec,\n        );\n        break;\n      case 'encode':\n        let pubCryptor = getTrackCryptor(data.participantIdentity, data.trackId);\n        pubCryptor.setupTransform(\n          kind,\n          data.readableStream,\n          data.writableStream,\n          data.trackId,\n          data.isReuse,\n          data.codec,\n        );\n        break;\n      case 'setKey':\n        if (useSharedKey) {\n          await setSharedKey(data.key, data.keyIndex);\n        } else if (data.participantIdentity) {\n          workerLogger.info(\n            `set participant sender key ${data.participantIdentity} index ${data.keyIndex}`,\n          );\n          await getParticipantKeyHandler(data.participantIdentity).setKey(data.key, data.keyIndex);\n        } else {\n          workerLogger.error('no participant Id was provided and shared key usage is disabled');\n        }\n        break;\n      case 'removeTransform':\n        unsetCryptorParticipant(data.trackId, data.participantIdentity);\n        break;\n      case 'updateCodec':\n        getTrackCryptor(data.participantIdentity, data.trackId).setVideoCodec(data.codec);\n        break;\n      case 'setRTPMap':\n        // this is only used for the local participant\n        rtpMap = data.map;\n        participantCryptors.forEach((cr) => {\n          if (cr.getParticipantIdentity() === data.participantIdentity) {\n            cr.setRtpMap(data.map);\n          }\n        });\n        break;\n      case 'ratchetRequest':\n        handleRatchetRequest(data);\n        break;\n      case 'setSifTrailer':\n        handleSifTrailer(data.trailer);\n        break;\n      default:\n        break;\n    }\n  });\n};\n\nasync function handleRatchetRequest(data: RatchetRequestMessage['data']) {\n  if (useSharedKey) {\n    const keyHandler = getSharedKeyHandler();\n    await keyHandler.ratchetKey(data.keyIndex);\n    keyHandler.resetKeyStatus();\n  } else if (data.participantIdentity) {\n    const keyHandler = getParticipantKeyHandler(data.participantIdentity);\n    await keyHandler.ratchetKey(data.keyIndex);\n    keyHandler.resetKeyStatus();\n  } else {\n    workerLogger.error(\n      'no participant Id was provided for ratchet request and shared key usage is disabled',\n    );\n  }\n}\n\nfunction getTrackCryptor(participantIdentity: string, trackId: string) {\n  let cryptors = participantCryptors.filter((c) => c.getTrackId() === trackId);\n  if (cryptors.length > 1) {\n    const debugInfo = cryptors\n      .map((c) => {\n        return { participant: c.getParticipantIdentity() };\n      })\n      .join(',');\n    workerLogger.error(\n      `Found multiple cryptors for the same trackID ${trackId}. target participant: ${participantIdentity} `,\n      { participants: debugInfo },\n    );\n  }\n  let cryptor = cryptors[0];\n  if (!cryptor) {\n    workerLogger.info('creating new cryptor for', { participantIdentity });\n    if (!keyProviderOptions) {\n      throw Error('Missing keyProvider options');\n    }\n    cryptor = new FrameCryptor({\n      participantIdentity,\n      keys: getParticipantKeyHandler(participantIdentity),\n      keyProviderOptions,\n      sifTrailer,\n    });\n    cryptor.setRtpMap(rtpMap);\n    setupCryptorErrorEvents(cryptor);\n    participantCryptors.push(cryptor);\n  } else if (participantIdentity !== cryptor.getParticipantIdentity()) {\n    // assign new participant id to track cryptor and pass in correct key handler\n    cryptor.setParticipant(participantIdentity, getParticipantKeyHandler(participantIdentity));\n  }\n\n  return cryptor;\n}\n\nfunction getParticipantKeyHandler(participantIdentity: string) {\n  if (useSharedKey) {\n    return getSharedKeyHandler();\n  }\n  let keys = participantKeys.get(participantIdentity);\n  if (!keys) {\n    keys = new ParticipantKeyHandler(participantIdentity, keyProviderOptions);\n    keys.on(KeyHandlerEvent.KeyRatcheted, emitRatchetedKeys);\n    participantKeys.set(participantIdentity, keys);\n  }\n  return keys;\n}\n\nfunction getSharedKeyHandler() {\n  if (!sharedKeyHandler) {\n    workerLogger.debug('creating new shared key handler');\n    sharedKeyHandler = new ParticipantKeyHandler('shared-key', keyProviderOptions);\n  }\n  return sharedKeyHandler;\n}\n\nfunction unsetCryptorParticipant(trackId: string, participantIdentity: string) {\n  const cryptors = participantCryptors.filter(\n    (c) => c.getParticipantIdentity() === participantIdentity && c.getTrackId() === trackId,\n  );\n  if (cryptors.length > 1) {\n    workerLogger.error('Found multiple cryptors for the same participant and trackID combination', {\n      trackId,\n      participantIdentity,\n    });\n  }\n  const cryptor = cryptors[0];\n  if (!cryptor) {\n    workerLogger.warn('Could not unset participant on cryptor', { trackId, participantIdentity });\n  } else {\n    cryptor.unsetParticipant();\n  }\n}\n\nfunction setEncryptionEnabled(enable: boolean, participantIdentity: string) {\n  workerLogger.debug(`setting encryption enabled for all tracks of ${participantIdentity}`, {\n    enable,\n  });\n  encryptionEnabledMap.set(participantIdentity, enable);\n}\n\nasync function setSharedKey(key: CryptoKey, index?: number) {\n  workerLogger.info('set shared key', { index });\n  await getSharedKeyHandler().setKey(key, index);\n}\n\nfunction setupCryptorErrorEvents(cryptor: FrameCryptor) {\n  cryptor.on(CryptorEvent.Error, (error) => {\n    const msg: ErrorMessage = {\n      kind: 'error',\n      data: { error: new Error(`${CryptorErrorReason[error.reason]}: ${error.message}`) },\n    };\n    postMessage(msg);\n  });\n}\n\nfunction emitRatchetedKeys(\n  ratchetResult: RatchetResult,\n  participantIdentity: string,\n  keyIndex?: number,\n) {\n  const msg: RatchetMessage = {\n    kind: `ratchetKey`,\n    data: {\n      participantIdentity,\n      keyIndex,\n      ratchetResult,\n    },\n  };\n  postMessage(msg);\n}\n\nfunction handleSifTrailer(trailer: Uint8Array) {\n  sifTrailer = trailer;\n  participantCryptors.forEach((c) => {\n    c.setSifTrailer(trailer);\n  });\n}\n\n// Operations using RTCRtpScriptTransform.\n// @ts-ignore\nif (self.RTCTransformEvent) {\n  workerLogger.debug('setup transform event');\n  // @ts-ignore\n  self.onrtctransform = (event: RTCTransformEvent) => {\n    // @ts-ignore\n    const transformer = event.transformer;\n    workerLogger.debug('transformer', transformer);\n\n    const { kind, participantIdentity, trackId, codec } =\n      transformer.options as ScriptTransformOptions;\n    const cryptor = getTrackCryptor(participantIdentity, trackId);\n    workerLogger.debug('transform', { codec });\n    cryptor.setupTransform(kind, transformer.readable, transformer.writable, trackId, false, codec);\n  };\n}\n"],"names":["root","definition","LogLevel","LoggerNames","noop","undefinedType","isIE","window","navigator","test","userAgent","logMethods","_loggersByName","defaultLogger","bindMethod","obj","methodName","method","bind","Function","prototype","call","e","apply","arguments","traceForIE","console","log","trace","replaceLoggingMethods","level","this","getLevel","i","length","methodFactory","name","debug","levels","SILENT","enableLoggingWhenConsoleArrives","defaultMethodFactory","_level","_loggerName","undefined","realMethod","Logger","factory","inheritedLevel","defaultLevel","userLevel","self","storageKey","getPersistedLevel","storedLevel","localStorage","ignore","cookie","document","cookieName","encodeURIComponent","location","indexOf","exec","slice","normalizeLevel","input","toUpperCase","TypeError","TRACE","DEBUG","INFO","WARN","ERROR","setLevel","persist","levelNum","levelName","persistLevelIfPossible","setDefaultLevel","resetLevel","removeItem","clearPersistedLevel","enableAll","disableAll","rebuild","childName","initialLevel","getLogger","logger","_log","noConflict","getLoggers","exports","module","livekitLogger","Object","values","map","info","workerLogger","QueueTaskStatus","_","constructor","o","_locking","Promise","resolve","_locks","isLocked","lock","s","t","l","unlockNext","c","then","ENCRYPTION_ALGORITHM","UNENCRYPTED_BYTES","key","delta","audio","empty","KEY_PROVIDER_DEFAULTS","sharedKey","ratchetSalt","ratchetWindowSize","failureTolerance","keyringSize","LivekitError","Error","code","message","super","ConnectionErrorReason","MediaDeviceFailure","CryptorErrorReason","KeyProviderEvent","KeyHandlerEvent","EncryptionEvent","CryptorEvent","getFailure","error","NotFound","PermissionDenied","DeviceInUse","Other","CryptorError","reason","InternalError","participantIdentity","ReflectOwnKeys","R","Reflect","ReflectApply","target","receiver","args","ownKeys","getOwnPropertySymbols","getOwnPropertyNames","concat","NumberIsNaN","Number","isNaN","value","EventEmitter","init","eventsModule","once","emitter","reject","errorListener","err","removeListener","resolver","eventTargetAgnosticAddListener","handler","flags","on","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","listener","_getMaxListeners","that","_addListener","type","prepend","m","events","existing","warning","create","newListener","emit","unshift","push","warned","w","String","count","warn","onceWrapper","fired","wrapFn","_onceWrap","state","wrapped","_listeners","unwrap","evlistener","arr","ret","Array","unwrapListeners","arrayClone","listenerCount","n","copy","addEventListener","wrapListener","arg","removeEventListener","defineProperty","enumerable","get","set","RangeError","getPrototypeOf","setMaxListeners","getMaxListeners","doError","er","context","len","listeners","addListener","prependListener","prependOnceListener","list","position","originalListener","shift","index","pop","spliceOne","off","removeAllListeners","keys","rawListeners","eventNames","getAlgoOptions","algorithmName","salt","encodedSalt","TextEncoder","encode","hash","ArrayBuffer","iterations","deriveKeys","material","algorithmOptions","algorithm","encryptionKey","crypto","subtle","deriveKey","SifGuard","consecutiveSifCount","lastSifReceivedAt","userFramesSinceSif","recordSif","_a","sifSequenceStartedAt","Date","now","recordUserFrame","reset","isSifAllowed","encryptionEnabledMap","Map","BaseFrameCryptor","encodeFunction","encodedFrame","controller","decodeFunction","FrameCryptor","opts","isTransformActive","sendCounts","rtpMap","keyProviderOptions","sifTrailer","Uint8Array","from","sifGuard","logContext","participant","mediaTrackId","trackId","fallbackCodec","videoCodec","setParticipant","id","assign","unsetParticipant","isEnabled","getParticipantIdentity","getTrackId","setVideoCodec","codec","setRtpMap","setupTransform","operation","readable","writable","isReuse","passedTrackId","transformFn","transformStream","TransformStream","transform","pipeThrough","pipeTo","catch","finally","setSifTrailer","trailer","data","byteLength","enqueue","keySet","getKeySet","getCurrentKeyIndex","MissingKey","keyIndex","iv","makeIV","getMetadata","synchronizationSource","timestamp","frameInfo","getUnencryptedBytes","frameHeader","unencryptedBytes","frameTrailer","cipherText","encrypt","additionalData","newDataWithoutHeader","isH264","data_in","dataOut","numConsecutiveZeros","byte","writeRbsp","newData","buffer","frameData","trailerBytes","every","isFrameServerInjected","hasInvalidKeyAtIndex","decodedFrame","decryptFrame","decryptionSuccess","InvalidKey","hasValidKey","decryptionFailure","encodedFrame_1","keyIndex_1","_this","initialMaterial","ratchetOpts","ratchetCount","encryptedData","needsRbspUnescaping","stream","parseRbsp","newUint8","ivLength","cipherTextStart","cipherTextLength","plainText","decrypt","ratchetedKeySet","ratchetResult","RTCEncodedAudioFrame","ratchetKey","cryptoKey","frame","setKeySet","setCurrentKeyIndex","ivView","DataView","has","Math","floor","random","sendCount","setUint32","isVideoFrame","detectedCodec","getVideoCodec","oldCodec","naluIndices","result","start","pos","searchLength","end","findNALUIndices","some","naluIndex","NALUType","SLICE_IDR","SLICE_NON_IDR","includes","parseNALUType","size","payloadType","startByte","kNaluTypeMask","ParticipantKeyHandler","currentKeyIndex","cryptoKeyRing","fill","decryptionFailureCounts","ratchetPromiseMap","resetKeyStatus","setKey","existingPromise","ratchetPromise","__awaiter","currentMaterial","chainKey","deriveBits","ratchet","newMaterial","keyBytes_1","keyBytes","usage","importKey","setKeyFromMaterial","delete","material_1","_this2","ratchetedResult","newIndex","usages","KeyRatcheted","participantCryptors","participantKeys","sharedKeyHandler","messageQueue","pendingTasks","taskMutex","Mutex","nextTaskIndex","run","task","taskInfo","enqueuedAt","status","WAITING","unlock","executedAt","RUNNING","COMPLETED","flush","snapshot","useSharedKey","getTrackCryptor","cryptors","filter","debugInfo","join","participants","cryptor","getParticipantKeyHandler","msg","kind","postMessage","setupCryptorErrorEvents","getSharedKeyHandler","emitRatchetedKeys","onmessage","ev","loglevel","enabled","enable","readableStream","writableStream","setSharedKey","unsetCryptorParticipant","forEach","cr","keyHandler","handleRatchetRequest","RTCTransformEvent","onrtctransform","event","transformer","options"],"mappings":"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","x_google_ignoreList":[0,3,8]}