import * as e from "react";
import { c as ie, w as oe, r as ue, m as le, a as G } from "./room-CDUkJ6U1.mjs";
import { C as J, S as de, a as me, M as B, b as fe, T as R, c as he, d as pe, D as z, e as ge, f as H, L as Q, G as Ee, P as K, F as Se, g as ve, h as ke, R as be, i as Ce, j as we, k as ye, B as Ie } from "./components-CU_md5RK.mjs";
import { w as Me, x, y as Pe, z as Ne, A as X, t as Y, B as Te, C as Le } from "./hooks-DnOXtSov.mjs";
import { j as Z, ao as Ae, ap as De, l as N, a as Re, aq as Ve, ar as Oe, a1 as q, as as $e, at as Ue } from "./contexts-BPNgUYT_.mjs";
import { Track as k, facingModeFromLocalTrack as _e, Mutex as Fe, createLocalTracks as Be, createLocalVideoTrack as qe, VideoPresets as xe, createLocalAudioTrack as We, RoomEvent as je } from "livekit-client";
function ee({
  messageFormatter: r,
  messageDecoder: d,
  messageEncoder: u,
  channelTopic: n,
  ...S
}) {
  const g = e.useRef(null), m = e.useRef(null), l = e.useMemo(() => ({ messageDecoder: d, messageEncoder: u, channelTopic: n }), [d, u, n]), { chatMessages: c, send: I, isSending: t } = Me(l), h = Z(), i = e.useRef(0);
  async function v(s) {
    s.preventDefault(), m.current && m.current.value.trim() !== "" && (await I(m.current.value), m.current.value = "", m.current.focus());
  }
  return e.useEffect(() => {
    var s;
    g && ((s = g.current) == null || s.scrollTo({ top: g.current.scrollHeight }));
  }, [g, c]), e.useEffect(() => {
    var o, E, a, w, b;
    if (!h || c.length === 0)
      return;
    if ((o = h.widget.state) != null && o.showChat && c.length > 0 && i.current !== ((E = c[c.length - 1]) == null ? void 0 : E.timestamp)) {
      i.current = (a = c[c.length - 1]) == null ? void 0 : a.timestamp;
      return;
    }
    const s = c.filter(
      (A) => !i.current || A.timestamp > i.current
    ).length, { widget: f } = h;
    s > 0 && ((w = f.state) == null ? void 0 : w.unreadMessages) !== s && ((b = f.dispatch) == null || b.call(f, { msg: "unread_msg", count: s }));
  }, [c, h == null ? void 0 : h.widget]), /* @__PURE__ */ e.createElement("div", { ...S, className: "lk-chat" }, /* @__PURE__ */ e.createElement("div", { className: "lk-chat-header" }, "Messages", h && /* @__PURE__ */ e.createElement(J, { className: "lk-close-button" }, /* @__PURE__ */ e.createElement(de, null))), /* @__PURE__ */ e.createElement("ul", { className: "lk-list lk-chat-messages", ref: g }, S.children ? c.map(
    (s, f) => ie(S.children, {
      entry: s,
      key: s.id ?? f,
      messageFormatter: r
    })
  ) : c.map((s, f, o) => {
    const E = f >= 1 && o[f - 1].from === s.from, a = f >= 1 && s.timestamp - o[f - 1].timestamp < 6e4;
    return /* @__PURE__ */ e.createElement(
      me,
      {
        key: s.id ?? f,
        hideName: E,
        hideTimestamp: E === !1 ? !1 : a,
        entry: s,
        messageFormatter: r
      }
    );
  })), /* @__PURE__ */ e.createElement("form", { className: "lk-chat-form", onSubmit: v }, /* @__PURE__ */ e.createElement(
    "input",
    {
      className: "lk-form-control lk-chat-form-input",
      disabled: t,
      ref: m,
      type: "text",
      placeholder: "Enter a message...",
      onInput: (s) => s.stopPropagation(),
      onKeyDown: (s) => s.stopPropagation(),
      onKeyUp: (s) => s.stopPropagation()
    }
  ), /* @__PURE__ */ e.createElement("button", { type: "submit", className: "lk-button lk-chat-form-button", disabled: t }, "Send")));
}
function O({
  kind: r,
  initialSelection: d,
  onActiveDeviceChange: u,
  tracks: n,
  requestPermissions: S = !1,
  ...g
}) {
  const [m, l] = e.useState(!1), [c, I] = e.useState([]), [t, h] = e.useState(!0), [i, v] = e.useState(S), s = (a, w) => {
    N.debug("handle device change"), l(!1), u == null || u(a, w);
  }, f = e.useRef(null), o = e.useRef(null);
  e.useLayoutEffect(() => {
    m && v(!0);
  }, [m]), e.useLayoutEffect(() => {
    let a;
    return f.current && o.current && (c || t) && (a = Ae(f.current, o.current, (w, b) => {
      o.current && Object.assign(o.current.style, { left: `${w}px`, top: `${b}px` });
    })), h(!1), () => {
      a == null || a();
    };
  }, [f, o, c, t]);
  const E = e.useCallback(
    (a) => {
      o.current && a.target !== f.current && m && De(o.current, a) && l(!1);
    },
    [m, o, f]
  );
  return e.useEffect(() => (document.addEventListener("click", E), () => {
    document.removeEventListener("click", E);
  }), [E]), /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement(
    "button",
    {
      className: "lk-button lk-button-menu",
      "aria-pressed": m,
      ...g,
      onClick: () => l(!m),
      ref: f
    },
    g.children
  ), !g.disabled && /* @__PURE__ */ e.createElement(
    "div",
    {
      className: "lk-device-menu",
      ref: o,
      style: { visibility: m ? "visible" : "hidden" }
    },
    r ? /* @__PURE__ */ e.createElement(
      B,
      {
        initialSelection: d,
        onActiveDeviceChange: (a) => s(r, a),
        onDeviceListChange: I,
        kind: r,
        track: n == null ? void 0 : n[r],
        requestPermissions: i
      }
    ) : /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement("div", { className: "lk-device-menu-heading" }, "Audio inputs"), /* @__PURE__ */ e.createElement(
      B,
      {
        kind: "audioinput",
        onActiveDeviceChange: (a) => s("audioinput", a),
        onDeviceListChange: I,
        track: n == null ? void 0 : n.audioinput,
        requestPermissions: i
      }
    ), /* @__PURE__ */ e.createElement("div", { className: "lk-device-menu-heading" }, "Video inputs"), /* @__PURE__ */ e.createElement(
      B,
      {
        kind: "videoinput",
        onActiveDeviceChange: (a) => s("videoinput", a),
        onDeviceListChange: I,
        track: n == null ? void 0 : n.videoinput,
        requestPermissions: i
      }
    ))
  ));
}
function W() {
  e.useEffect(() => {
    oe();
  }, []);
}
function Ke(r, d) {
  const [u, n] = e.useState(), S = e.useMemo(() => new Fe(), []);
  return e.useEffect(() => {
    let g = !1, m = [];
    return S.lock().then(async (l) => {
      try {
        (r.audio || r.video) && (m = await Be(r), g ? m.forEach((c) => c.stop()) : n(m));
      } catch (c) {
        d && c instanceof Error ? d(c) : N.error(c);
      } finally {
        l();
      }
    }), () => {
      g = !0, m.forEach((l) => {
        l.stop();
      });
    };
  }, [JSON.stringify(r, ue), d, S]), u;
}
function et(r, d, u) {
  const [n, S] = e.useState(null), [g, m] = e.useState(!1), l = Pe({ kind: u }), [c, I] = e.useState(
    void 0
  ), [t, h] = e.useState(), [i, v] = e.useState(d);
  e.useEffect(() => {
    v(d);
  }, [d]);
  const s = async (E, a) => {
    try {
      const w = a === "videoinput" ? await qe({
        deviceId: E,
        resolution: xe.h720.resolution
      }) : await We({ deviceId: E }), b = await w.getDeviceId(!1);
      b && E !== b && (o.current = b, v(b)), h(w);
    } catch (w) {
      w instanceof Error && S(w);
    }
  }, f = async (E, a) => {
    await E.setDeviceId(a), o.current = a;
  }, o = e.useRef(i);
  return e.useEffect(() => {
    r && !t && !n && !g && (N.debug("creating track", u), m(!0), s(i, u).finally(() => {
      m(!1);
    }));
  }, [r, t, n, g]), e.useEffect(() => {
    t && (r ? c != null && c.deviceId && o.current !== (c == null ? void 0 : c.deviceId) ? (N.debug(`switching ${u} device from`, o.current, c.deviceId), f(t, c.deviceId)) : (N.debug(`unmuting local ${u} track`), t.unmute()) : (N.debug(`muting ${u} track`), t.mute().then(() => N.debug(t.mediaStreamTrack))));
  }, [t, c, r, u]), e.useEffect(() => () => {
    t && (N.debug(`stopping local ${u} track`), t.stop(), t.mute());
  }, []), e.useEffect(() => {
    I(l == null ? void 0 : l.find((E) => E.deviceId === i));
  }, [i, l]), {
    selectedDevice: c,
    localTrack: t,
    deviceError: n
  };
}
function tt({
  defaults: r = {},
  onValidate: d,
  onSubmit: u,
  onError: n,
  debug: S,
  joinLabel: g = "Join Room",
  micLabel: m = "Microphone",
  camLabel: l = "Camera",
  userLabel: c = "Username",
  persistUserChoices: I = !0,
  videoProcessor: t,
  ...h
}) {
  const {
    userChoices: i,
    saveAudioInputDeviceId: v,
    saveAudioInputEnabled: s,
    saveVideoInputDeviceId: f,
    saveVideoInputEnabled: o,
    saveUsername: E
  } = x({
    defaults: r,
    preventSave: !I,
    preventLoad: !I
  }), [a, w] = e.useState(i), [b, A] = e.useState(a.audioEnabled), [y, L] = e.useState(a.videoEnabled), [T, $] = e.useState(a.audioDeviceId), [p, M] = e.useState(a.videoDeviceId), [V, ae] = e.useState(a.username);
  e.useEffect(() => {
    s(b);
  }, [b, s]), e.useEffect(() => {
    o(y);
  }, [y, o]), e.useEffect(() => {
    v(T);
  }, [T, v]), e.useEffect(() => {
    f(p);
  }, [p, f]), e.useEffect(() => {
    E(V);
  }, [V, E]);
  const D = Ke(
    {
      audio: b ? { deviceId: i.audioDeviceId } : !1,
      video: y ? { deviceId: i.videoDeviceId, processor: t } : !1
    },
    n
  ), U = e.useRef(null), P = e.useMemo(
    () => D == null ? void 0 : D.filter((C) => C.kind === k.Kind.Video)[0],
    [D]
  ), ne = e.useMemo(() => {
    if (P) {
      const { facingMode: C } = _e(P);
      return C;
    } else
      return "undefined";
  }, [P]), j = e.useMemo(
    () => D == null ? void 0 : D.filter((C) => C.kind === k.Kind.Audio)[0],
    [D]
  );
  e.useEffect(() => (U.current && P && (P.unmute(), P.attach(U.current)), () => {
    P == null || P.detach();
  }), [P]);
  const [ce, se] = e.useState(), _ = e.useCallback(
    (C) => typeof d == "function" ? d(C) : C.username !== "",
    [d]
  );
  e.useEffect(() => {
    const C = {
      username: V,
      videoEnabled: y,
      videoDeviceId: p,
      audioEnabled: b,
      audioDeviceId: T
    };
    w(C), se(_(C));
  }, [V, y, _, b, T, p]);
  function re(C) {
    C.preventDefault(), _(a) ? typeof u == "function" && u(a) : N.warn("Validation failed with: ", a);
  }
  return W(), /* @__PURE__ */ e.createElement("div", { className: "lk-prejoin", ...h }, /* @__PURE__ */ e.createElement("div", { className: "lk-video-container" }, P && /* @__PURE__ */ e.createElement("video", { ref: U, width: "1280", height: "720", "data-lk-facing-mode": ne }), (!P || !y) && /* @__PURE__ */ e.createElement("div", { className: "lk-camera-off-note" }, /* @__PURE__ */ e.createElement(fe, null))), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-container" }, /* @__PURE__ */ e.createElement("div", { className: "lk-button-group audio" }, /* @__PURE__ */ e.createElement(
    R,
    {
      initialState: b,
      source: k.Source.Microphone,
      onChange: (C) => A(C)
    },
    m
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      initialSelection: T,
      kind: "audioinput",
      disabled: !j,
      tracks: { audioinput: j },
      onActiveDeviceChange: (C, F) => $(F)
    }
  ))), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group video" }, /* @__PURE__ */ e.createElement(
    R,
    {
      initialState: y,
      source: k.Source.Camera,
      onChange: (C) => L(C)
    },
    l
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      initialSelection: p,
      kind: "videoinput",
      disabled: !P,
      tracks: { videoinput: P },
      onActiveDeviceChange: (C, F) => M(F)
    }
  )))), /* @__PURE__ */ e.createElement("form", { className: "lk-username-container" }, /* @__PURE__ */ e.createElement(
    "input",
    {
      className: "lk-form-control",
      id: "username",
      name: "username",
      type: "text",
      defaultValue: V,
      placeholder: c,
      onChange: (C) => ae(C.target.value),
      autoComplete: "off"
    }
  ), /* @__PURE__ */ e.createElement(
    "button",
    {
      className: "lk-button lk-join-button",
      type: "submit",
      onClick: re,
      disabled: !ce
    },
    g
  )), S && /* @__PURE__ */ e.createElement(e.Fragment, null, /* @__PURE__ */ e.createElement("strong", null, "User Choices:"), /* @__PURE__ */ e.createElement("ul", { className: "lk-list", style: { overflow: "hidden", maxWidth: "15rem" } }, /* @__PURE__ */ e.createElement("li", null, "Username: ", `${a.username}`), /* @__PURE__ */ e.createElement("li", null, "Video Enabled: ", `${a.videoEnabled}`), /* @__PURE__ */ e.createElement("li", null, "Audio Enabled: ", `${a.audioEnabled}`), /* @__PURE__ */ e.createElement("li", null, "Video Device: ", `${a.videoDeviceId}`), /* @__PURE__ */ e.createElement("li", null, "Audio Device: ", `${a.audioDeviceId}`))));
}
function Ge({ props: r }) {
  const { dispatch: d, state: u } = Re().widget, n = "lk-button lk-settings-toggle";
  return { mergedProps: e.useMemo(() => le(r, {
    className: n,
    onClick: () => {
      d && d({ msg: "toggle_settings" });
    },
    "aria-pressed": u != null && u.showSettings ? "true" : "false"
  }), [r, n, d, u]) };
}
const Je = /* @__PURE__ */ e.forwardRef(
  function(d, u) {
    const { mergedProps: n } = Ge({ props: d });
    return /* @__PURE__ */ e.createElement("button", { ref: u, ...n }, d.children);
  }
), ze = (r) => {
  switch (r) {
    case k.Source.Camera:
      return 1;
    case k.Source.Microphone:
      return 2;
    case k.Source.ScreenShare:
      return 3;
    default:
      return 0;
  }
};
function te({
  variation: r,
  controls: d,
  saveUserChoices: u = !0,
  onDeviceError: n,
  ...S
}) {
  var $;
  const [g, m] = e.useState(!1), l = Z();
  e.useEffect(() => {
    var p, M;
    ((p = l == null ? void 0 : l.widget.state) == null ? void 0 : p.showChat) !== void 0 && m((M = l == null ? void 0 : l.widget.state) == null ? void 0 : M.showChat);
  }, [($ = l == null ? void 0 : l.widget.state) == null ? void 0 : $.showChat]);
  const I = Ne(`(max-width: ${g ? 1e3 : 760}px)`) ? "minimal" : "verbose";
  r ?? (r = I);
  const t = { leave: !0, ...d }, h = X();
  if (!h)
    t.camera = !1, t.chat = !1, t.microphone = !1, t.screenShare = !1;
  else {
    const p = (M) => h.canPublish && (h.canPublishSources.length === 0 || h.canPublishSources.includes(ze(M)));
    t.camera ?? (t.camera = p(k.Source.Camera)), t.microphone ?? (t.microphone = p(k.Source.Microphone)), t.screenShare ?? (t.screenShare = p(k.Source.ScreenShare)), t.chat ?? (t.chat = h.canPublishData && (d == null ? void 0 : d.chat));
  }
  const i = e.useMemo(
    () => r === "minimal" || r === "verbose",
    [r]
  ), v = e.useMemo(
    () => r === "textOnly" || r === "verbose",
    [r]
  ), s = Ve(), [f, o] = e.useState(!1), E = e.useCallback(
    (p) => {
      o(p);
    },
    [o]
  ), a = G({ className: "lk-control-bar" }, S), {
    saveAudioInputEnabled: w,
    saveVideoInputEnabled: b,
    saveAudioInputDeviceId: A,
    saveVideoInputDeviceId: y
  } = x({ preventSave: !u }), L = e.useCallback(
    (p, M) => M ? w(p) : null,
    [w]
  ), T = e.useCallback(
    (p, M) => M ? b(p) : null,
    [b]
  );
  return /* @__PURE__ */ e.createElement("div", { ...a }, t.microphone && /* @__PURE__ */ e.createElement("div", { className: "lk-button-group" }, /* @__PURE__ */ e.createElement(
    R,
    {
      source: k.Source.Microphone,
      showIcon: i,
      onChange: L,
      onDeviceError: (p) => n == null ? void 0 : n({ source: k.Source.Microphone, error: p })
    },
    v && "Microphone"
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      kind: "audioinput",
      onActiveDeviceChange: (p, M) => A(M ?? "default")
    }
  ))), t.camera && /* @__PURE__ */ e.createElement("div", { className: "lk-button-group" }, /* @__PURE__ */ e.createElement(
    R,
    {
      source: k.Source.Camera,
      showIcon: i,
      onChange: T,
      onDeviceError: (p) => n == null ? void 0 : n({ source: k.Source.Camera, error: p })
    },
    v && "Camera"
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      kind: "videoinput",
      onActiveDeviceChange: (p, M) => y(M ?? "default")
    }
  ))), t.screenShare && s && /* @__PURE__ */ e.createElement(
    R,
    {
      source: k.Source.ScreenShare,
      captureOptions: { audio: !0, selfBrowserSurface: "include" },
      showIcon: i,
      onChange: E,
      onDeviceError: (p) => n == null ? void 0 : n({ source: k.Source.ScreenShare, error: p })
    },
    v && (f ? "Stop screen share" : "Share screen")
  ), t.chat && /* @__PURE__ */ e.createElement(J, null, i && /* @__PURE__ */ e.createElement(he, null), v && "Chat"), t.settings && /* @__PURE__ */ e.createElement(Je, null, i && /* @__PURE__ */ e.createElement(pe, null), v && "Settings"), t.leave && /* @__PURE__ */ e.createElement(z, null, i && /* @__PURE__ */ e.createElement(ge, null), v && "Leave"), /* @__PURE__ */ e.createElement(H, null));
}
function at({
  chatMessageFormatter: r,
  chatMessageDecoder: d,
  chatMessageEncoder: u,
  SettingsComponent: n,
  ...S
}) {
  var s, f;
  const [g, m] = e.useState({
    showChat: !1,
    unreadMessages: 0,
    showSettings: !1
  }), l = e.useRef(null), c = Y(
    [
      { source: k.Source.Camera, withPlaceholder: !0 },
      { source: k.Source.ScreenShare, withPlaceholder: !1 }
    ],
    { updateOnlyOn: [je.ActiveSpeakersChanged], onlySubscribed: !1 }
  ), I = (o) => {
    N.debug("updating widget state", o), m(o);
  }, t = Oe(), h = c.filter(q).filter((o) => o.publication.source === k.Source.ScreenShare), i = (s = Te(t)) == null ? void 0 : s[0], v = c.filter((o) => !$e(o, i));
  return e.useEffect(() => {
    var o, E, a, w, b, A;
    if (h.some((y) => y.publication.isSubscribed) && l.current === null ? (N.debug("Auto set screen share focus:", { newScreenShareTrack: h[0] }), (E = (o = t.pin).dispatch) == null || E.call(o, { msg: "set_pin", trackReference: h[0] }), l.current = h[0]) : l.current && !h.some(
      (y) => {
        var L, T;
        return y.publication.trackSid === ((T = (L = l.current) == null ? void 0 : L.publication) == null ? void 0 : T.trackSid);
      }
    ) && (N.debug("Auto clearing screen share focus."), (w = (a = t.pin).dispatch) == null || w.call(a, { msg: "clear_pin" }), l.current = null), i && !q(i)) {
      const y = c.find(
        (L) => L.participant.identity === i.participant.identity && L.source === i.source
      );
      y !== i && q(y) && ((A = (b = t.pin).dispatch) == null || A.call(b, { msg: "set_pin", trackReference: y }));
    }
  }, [
    h.map((o) => `${o.publication.trackSid}_${o.publication.isSubscribed}`).join(),
    (f = i == null ? void 0 : i.publication) == null ? void 0 : f.trackSid,
    c
  ]), W(), /* @__PURE__ */ e.createElement("div", { className: "lk-video-conference", ...S }, Ue() && /* @__PURE__ */ e.createElement(
    Q,
    {
      value: t,
      onWidgetChange: I
    },
    /* @__PURE__ */ e.createElement("div", { className: "lk-video-conference-inner" }, i ? /* @__PURE__ */ e.createElement("div", { className: "lk-focus-layout-wrapper" }, /* @__PURE__ */ e.createElement(Se, null, /* @__PURE__ */ e.createElement(ve, { tracks: v }, /* @__PURE__ */ e.createElement(K, null)), i && /* @__PURE__ */ e.createElement(ke, { trackRef: i }))) : /* @__PURE__ */ e.createElement("div", { className: "lk-grid-layout-wrapper" }, /* @__PURE__ */ e.createElement(Ee, { tracks: c }, /* @__PURE__ */ e.createElement(K, null))), /* @__PURE__ */ e.createElement(te, { controls: { chat: !0, settings: !!n } })),
    /* @__PURE__ */ e.createElement(
      ee,
      {
        style: { display: g.showChat ? "grid" : "none" },
        messageFormatter: r,
        messageEncoder: u,
        messageDecoder: d
      }
    ),
    n && /* @__PURE__ */ e.createElement(
      "div",
      {
        className: "lk-settings-menu-modal",
        style: { display: g.showSettings ? "block" : "none" }
      },
      /* @__PURE__ */ e.createElement(n, null)
    )
  ), /* @__PURE__ */ e.createElement(be, null), /* @__PURE__ */ e.createElement(Ce, null));
}
function nt({ ...r }) {
  const [d, u] = e.useState({
    showChat: !1,
    unreadMessages: 0
  }), n = Y([k.Source.Microphone]);
  return W(), /* @__PURE__ */ e.createElement(Q, { onWidgetChange: u }, /* @__PURE__ */ e.createElement("div", { className: "lk-audio-conference", ...r }, /* @__PURE__ */ e.createElement("div", { className: "lk-audio-conference-stage" }, /* @__PURE__ */ e.createElement(we, { tracks: n }, /* @__PURE__ */ e.createElement(ye, null))), /* @__PURE__ */ e.createElement(
    te,
    {
      controls: { microphone: !0, screenShare: !1, camera: !1, chat: !0 }
    }
  ), d.showChat && /* @__PURE__ */ e.createElement(ee, null)));
}
function ct({
  controls: r,
  saveUserChoices: d = !0,
  onDeviceError: u,
  ...n
}) {
  const S = { leave: !0, microphone: !0, ...r }, g = X(), { microphoneTrack: m, localParticipant: l } = Le(), c = e.useMemo(() => ({
    participant: l,
    source: k.Source.Microphone,
    publication: m
  }), [l, m]);
  g ? S.microphone ?? (S.microphone = g.canPublish) : S.microphone = !1;
  const I = G({ className: "lk-agent-control-bar" }, n), { saveAudioInputEnabled: t, saveAudioInputDeviceId: h } = x({
    preventSave: !d
  }), i = e.useCallback(
    (v, s) => {
      s && t(v);
    },
    [t]
  );
  return /* @__PURE__ */ e.createElement("div", { ...I }, S.microphone && /* @__PURE__ */ e.createElement("div", { className: "lk-button-group" }, /* @__PURE__ */ e.createElement(
    R,
    {
      source: k.Source.Microphone,
      showIcon: !0,
      onChange: i,
      onDeviceError: (v) => u == null ? void 0 : u({ source: k.Source.Microphone, error: v })
    },
    /* @__PURE__ */ e.createElement(Ie, { trackRef: c, barCount: 7, options: { minHeight: 5 } })
  ), /* @__PURE__ */ e.createElement("div", { className: "lk-button-group-menu" }, /* @__PURE__ */ e.createElement(
    O,
    {
      kind: "audioinput",
      onActiveDeviceChange: (v, s) => h(s ?? "default")
    }
  ))), S.leave && /* @__PURE__ */ e.createElement(z, null, "Disconnect"), /* @__PURE__ */ e.createElement(H, null));
}
export {
  nt as AudioConference,
  ee as Chat,
  te as ControlBar,
  O as MediaDeviceMenu,
  tt as PreJoin,
  at as VideoConference,
  ct as VoiceAssistantControlBar,
  et as usePreviewDevice,
  Ke as usePreviewTracks
};
//# sourceMappingURL=prefabs.mjs.map
