{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nconst initialState = {};\nconst roomSlice = createSlice({\n  name: \"room\",\n  initialState,\n  // reducer\n  reducers: {\n    inviteRoom: (state, data) => {\n      let room = data.payload;\n      state[room.id] = room;\n    },\n    insertUser: (state, data) => {\n      let {\n        id,\n        new_users\n      } = data.payload;\n      let aa = state[id].participants.concat(new_users);\n      console.log(id, new_users, aa);\n      state[id].participants = state[id].participants.concat(new_users);\n    },\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\n    //   let { nickname, online } = data.payload;\n    //   return {\n    //     ...current,\n    //     friends: current.friends.map((val: User) =>\n    //       val.nickname == nickname ? { ...val, online } : val\n    //     ),\n    //   };\n    // },\n    init: current => initialState\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        stream_room\n      } = action.payload.user;\n      if (stream_room && stream_room.length) stream_room.map(val => state[val.id] = val);\n      return state;\n    });\n  }\n});\nexport const {\n  inviteRoom,\n  insertUser\n} = roomSlice.actions;\nexport default roomSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","roomSlice","name","reducers","inviteRoom","state","data","room","payload","id","insertUser","new_users","aa","participants","concat","console","log","init","current","extraReducers","builder","addCase","getUserAction","fulfilled","action","stream_room","user","length","map","val","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/reducer/roomReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { Room } from \"../../types/room\";\r\nimport { roomAction } from \"../actions/roomAction\";\r\n\r\nconst initialState: { [id: number]: Room } = {};\r\n\r\nconst roomSlice = createSlice({\r\n  name: \"room\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    inviteRoom: (state: any, data: any) => {\r\n      let room = data.payload;\r\n      state[room.id] = room;\r\n    },\r\n\r\n    insertUser: (state: any, data: any) => {\r\n      let { id, new_users } = data.payload;\r\n      let aa = state[id].participants.concat(new_users);\r\n      console.log(id, new_users, aa);\r\n\r\n      state[id].participants = state[id].participants.concat(new_users);\r\n    },\r\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\r\n    //   let { nickname, online } = data.payload;\r\n    //   return {\r\n    //     ...current,\r\n    //     friends: current.friends.map((val: User) =>\r\n    //       val.nickname == nickname ? { ...val, online } : val\r\n    //     ),\r\n    //   };\r\n    // },\r\n    init: (current) => initialState,\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { stream_room } = action.payload.user;\r\n\r\n      if (stream_room && stream_room.length)\r\n        stream_room.map((val: Room) => (state[val.id!] = val));\r\n\r\n      return state;\r\n    });\r\n  },\r\n});\r\n\r\nexport const { inviteRoom, insertUser } = roomSlice.actions;\r\nexport default roomSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAKA,MAAMC,YAAoC,GAAG,CAAC,CAAC;AAE/C,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZF,YAAY;EAAE;EACdG,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAU,EAAEC,IAAS,KAAK;MACrC,IAAIC,IAAI,GAAGD,IAAI,CAACE,OAAO;MACvBH,KAAK,CAACE,IAAI,CAACE,EAAE,CAAC,GAAGF,IAAI;IACvB,CAAC;IAEDG,UAAU,EAAEA,CAACL,KAAU,EAAEC,IAAS,KAAK;MACrC,IAAI;QAAEG,EAAE;QAAEE;MAAU,CAAC,GAAGL,IAAI,CAACE,OAAO;MACpC,IAAII,EAAE,GAAGP,KAAK,CAACI,EAAE,CAAC,CAACI,YAAY,CAACC,MAAM,CAACH,SAAS,CAAC;MACjDI,OAAO,CAACC,GAAG,CAACP,EAAE,EAAEE,SAAS,EAAEC,EAAE,CAAC;MAE9BP,KAAK,CAACI,EAAE,CAAC,CAACI,YAAY,GAAGR,KAAK,CAACI,EAAE,CAAC,CAACI,YAAY,CAACC,MAAM,CAACH,SAAS,CAAC;IACnE,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAM,IAAI,EAAGC,OAAO,IAAKlB;EACrB,CAAC;EAED;EACAmB,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACtB,UAAU,CAACuB,aAAa,CAACC,SAAS,EAAE,CAAClB,KAAK,EAAEmB,MAAM,KAAK;MACrE,IAAI;QAAEC;MAAY,CAAC,GAAGD,MAAM,CAAChB,OAAO,CAACkB,IAAI;MAEzC,IAAID,WAAW,IAAIA,WAAW,CAACE,MAAM,EACnCF,WAAW,CAACG,GAAG,CAAEC,GAAS,IAAMxB,KAAK,CAACwB,GAAG,CAACpB,EAAE,CAAE,GAAGoB,GAAI,CAAC;MAExD,OAAOxB,KAAK;IACd,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAED,UAAU;EAAEM;AAAW,CAAC,GAAGT,SAAS,CAAC6B,OAAO;AAC3D,eAAe7B,SAAS,CAAC8B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}