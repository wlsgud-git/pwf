{"ast":null,"code":"// import { getUser } from \"../reducer/userSlice\";\nimport { userService } from \"../../service/userservice\";\n// import { AppDispatch } from \"\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// types\n// import { UserAction, UserActionTypes } from \"../../types/user\";\n\nclass UserAction extends userService {\n  constructor(...args) {\n    super(...args);\n    this.requestFriendHandle = createAsyncThunk(\"request/friend\", async data => {\n      try {\n        let res = await this.handleRequestFriend(data);\n        return await res;\n      } catch (error) {\n        window.location.href = \"/login\";\n      }\n    });\n    this.getUserAction = createAsyncThunk(\"user/fetchUser\", async () => {\n      try {\n        let res = await this.getUser();\n        return await res;\n      } catch (error) {\n        window.location.href = \"/login\";\n      }\n    });\n  } //   modifyList = (id, fullname) => {\n  //     return async (dispatch, getState) => {\n  //       let state = getState();\n  //       let { check } = state.fileList;\n  //       if (id in check) dispatch(updateList({ id, fullname }));\n  //     };\n  //   };\n  //   deleteFileList = (id, fullname) => {\n  //     return async (dispatch, getState) => {\n  //       let state = getState();\n  //       let list = state.fileList.list;\n  //       let new_id;\n  //       let ft = fullname.join(\"/\");\n  //       if (!list.filter((val) => val.fullname.join(\"/\") === ft).length) return;\n  //       if (list.length >= 2) new_id = list[list[0].id == id ? 1 : 0].id;\n  //       else new_id = 0;\n  //       try {\n  //         const res = await dictService.deleteFileList(id);\n  //         dispatch(deleteList(id));\n  //         dispatch(changeId({ id: new_id, type: false }));\n  //       } catch (err) {\n  //         console.log(err);\n  //       }\n  //     };\n  //   };\n}\nexport let userAction = new UserAction();","map":{"version":3,"names":["userService","createAsyncThunk","UserAction","constructor","args","requestFriendHandle","data","res","handleRequestFriend","error","window","location","href","getUserAction","getUser","userAction"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/actions/userAction.ts"],"sourcesContent":["// import { getUser } from \"../reducer/userSlice\";\r\nimport { userService } from \"../../service/userservice\";\r\n// import { AppDispatch } from \"\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// types\r\n// import { UserAction, UserActionTypes } from \"../../types/user\";\r\nimport { User } from \"../../types/user\";\r\nimport { errorHandling } from \"../../error/error\";\r\nimport { HttpResponse } from \"../../types/http\";\r\n\r\nclass UserAction extends userService {\r\n  requestFriendHandle = createAsyncThunk(\r\n    \"request/friend\",\r\n    async (data: FormData): Promise<boolean> => {\r\n      try {\r\n        let res = await this.handleRequestFriend(data);\r\n        return await res;\r\n      } catch (error) {\r\n        window.location.href = \"/login\";\r\n      }\r\n    }\r\n  );\r\n  getUserAction = createAsyncThunk(\"user/fetchUser\", async (): Promise<any> => {\r\n    try {\r\n      let res = await this.getUser();\r\n      return await res!;\r\n    } catch (error) {\r\n      window.location.href = \"/login\";\r\n    }\r\n  });\r\n  //   modifyList = (id, fullname) => {\r\n  //     return async (dispatch, getState) => {\r\n  //       let state = getState();\r\n  //       let { check } = state.fileList;\r\n  //       if (id in check) dispatch(updateList({ id, fullname }));\r\n  //     };\r\n  //   };\r\n  //   deleteFileList = (id, fullname) => {\r\n  //     return async (dispatch, getState) => {\r\n  //       let state = getState();\r\n  //       let list = state.fileList.list;\r\n  //       let new_id;\r\n  //       let ft = fullname.join(\"/\");\r\n  //       if (!list.filter((val) => val.fullname.join(\"/\") === ft).length) return;\r\n  //       if (list.length >= 2) new_id = list[list[0].id == id ? 1 : 0].id;\r\n  //       else new_id = 0;\r\n  //       try {\r\n  //         const res = await dictService.deleteFileList(id);\r\n  //         dispatch(deleteList(id));\r\n  //         dispatch(changeId({ id: new_id, type: false }));\r\n  //       } catch (err) {\r\n  //         console.log(err);\r\n  //       }\r\n  //     };\r\n  //   };\r\n}\r\n\r\nexport let userAction = new UserAction();\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,2BAA2B;AACvD;AACA,SAASC,gBAAgB,QAAQ,kBAAkB;;AAInD;AACA;;AAKA,MAAMC,UAAU,SAASF,WAAW,CAAC;EAAAG,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACnCC,mBAAmB,GAAGJ,gBAAgB,CACpC,gBAAgB,EAChB,MAAOK,IAAc,IAAuB;MAC1C,IAAI;QACF,IAAIC,GAAG,GAAG,MAAM,IAAI,CAACC,mBAAmB,CAACF,IAAI,CAAC;QAC9C,OAAO,MAAMC,GAAG;MAClB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC;IACF,CACF,CAAC;IAAA,KACDC,aAAa,GAAGZ,gBAAgB,CAAC,gBAAgB,EAAE,YAA0B;MAC3E,IAAI;QACF,IAAIM,GAAG,GAAG,MAAM,IAAI,CAACO,OAAO,CAAC,CAAC;QAC9B,OAAO,MAAMP,GAAI;MACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC;IACF,CAAC,CAAC;EAAA,EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAEA,OAAO,IAAIG,UAAU,GAAG,IAAIb,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}