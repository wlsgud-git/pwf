{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashh1\\\\Desktop\\\\project\\\\PlayWithFriends\\\\client\\\\src\\\\page\\\\streamroom.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport \"../css/room/streamRoom.css\";\nimport { useParams } from \"react-router-dom\";\nimport { socketClient } from \"../util/socket\";\nimport { stream_service } from \"../service/streamservice\";\nimport { emitter } from \"../util/event\";\nimport { useSelector } from \"react-redux\";\n\n// type\n\n// component\nimport { Menu } from \"../components/room/menu/menu\";\nimport { RoomMain } from \"../components/room/main/roomMain\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StreamRoom = () => {\n  _s();\n  let user = useSelector(state => state.user);\n  let {\n    id\n  } = useParams();\n\n  // ref\n  let peerConnects = useRef({});\n\n  // state\n  let [room, setRoom] = useState(null); //방 정보\n  let [stream, setStream] = useState(null);\n  let [connects, setConnects] = useState({});\n\n  // 방 입장/퇴장 관련 --------------------------\n  let joinRoomHandler = who => {\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\n  };\n\n  // room leave 처리\n  let leaveRoomHandler = who => {\n    delete peerConnects.current[who];\n    setConnects(c => {\n      const copy = {\n        ...c\n      };\n      delete copy[who];\n      return copy;\n    });\n  };\n\n  // 비디오/오디오 상태 ----------------------------\n\n  // 상대 화면 on/off\n  let trackHandler = (to, type, state) => {\n    setConnects(c => {\n      let stInfo = c[to];\n      type == \"audio\" ? stInfo.audio = state : stInfo.video = state;\n      return {\n        ...c,\n        [to]: stInfo\n      };\n    });\n  };\n\n  // p2p연결 관련 --------------------------------\n  // connect 연결\n  let peerConnect = async (to, stream) => {\n    let pc = new RTCPeerConnection();\n    const channel = pc.createDataChannel(\"chat\");\n    stream === null || stream === void 0 ? void 0 : stream.getTracks().forEach(track => {\n      pc.addTrack(track, stream);\n    });\n\n    // signaling event\n    pc.onicecandidate = e => {\n      if (e.candidate) socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\n    };\n    pc.ontrack = e => {\n      let kind = e.track.kind;\n      // peerConnects.current[to] = { pc, channel };\n      setConnects(c => {\n        let stream = new MediaStream();\n        let audio = true;\n        let video = true;\n\n        // 만약에 event track이 stream에 존재하지 않으면 추가해줌\n        if (!stream.getTracks().includes(e.track)) stream.addTrack(e.track);\n        // 미디어 kind타입에 활성화 상태 알려줌\n        kind == \"audio\" ? audio = e.track.enabled : video = e.track.enabled;\n        return {\n          ...c,\n          [to]: {\n            pc,\n            channel,\n            stream,\n            video,\n            audio\n          }\n        };\n      });\n    };\n\n    // channel event\n    channel.onmessage = e => {\n      emitter.emit(\"menu chat\", JSON.parse(e.data));\n    };\n\n    // offer 부분\n    let offer = await pc.createOffer();\n    await pc.setLocalDescription(offer);\n    socketClient.emit(\"offer\", user.nickname, to, offer);\n    peerConnects.current[to] = {\n      pc,\n      channel\n    };\n  };\n\n  // 연결 시작\n  let start = async () => {\n    try {\n      var _room$participants;\n      let stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      setStream(stream);\n\n      // 트랙을 더해줌\n      if (room) (_room$participants = room.participants) === null || _room$participants === void 0 ? void 0 : _room$participants.map(async val => {\n        if (val.nickname !== user.nickname) {\n          await peerConnect(val.nickname, stream);\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // offer처리\n  let offerHandler = async (from, offer) => {\n    console.log(`offer from ${from}`);\n    if (!peerConnects.current[from]) await peerConnect(from);\n    // console.log(!peerConnects.current[from]);\n    try {\n      var _peerConnects$current, _peerConnects$current2;\n      // if (!peerConnects.current[from].pc) peerConnect(from);\n      await ((_peerConnects$current = peerConnects.current[from].pc) === null || _peerConnects$current === void 0 ? void 0 : _peerConnects$current.setRemoteDescription(new RTCSessionDescription(offer)));\n      if (((_peerConnects$current2 = peerConnects.current[from]) === null || _peerConnects$current2 === void 0 ? void 0 : _peerConnects$current2.pc.signalingState) == \"have-remote-offer\" && user.nickname !== \"\") {\n        var _peerConnects$current3, _peerConnects$current4;\n        const answer = await ((_peerConnects$current3 = peerConnects.current[from]) === null || _peerConnects$current3 === void 0 ? void 0 : _peerConnects$current3.pc.createAnswer());\n        await ((_peerConnects$current4 = peerConnects.current[from]) === null || _peerConnects$current4 === void 0 ? void 0 : _peerConnects$current4.pc.setLocalDescription(answer));\n        socketClient.emit(\"answer\", user.nickname, from, answer);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // answer 처리\n  let answerHandler = async (from, answer) => {\n    console.log(`answer from ${from}`);\n    try {\n      var _peerConnects$current5, _peerConnects$current6;\n      if (!((_peerConnects$current5 = peerConnects.current[from]) !== null && _peerConnects$current5 !== void 0 && _peerConnects$current5.pc.currentRemoteDescription)) await ((_peerConnects$current6 = peerConnects.current[from]) === null || _peerConnects$current6 === void 0 ? void 0 : _peerConnects$current6.pc.setRemoteDescription(answer));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // candidate처리\n  let candidateHandler = async (from, candidate) => {\n    var _peerConnects$current7;\n    const iceCandidate = new RTCIceCandidate(candidate);\n    await ((_peerConnects$current7 = peerConnects.current[from]) === null || _peerConnects$current7 === void 0 ? void 0 : _peerConnects$current7.pc.addIceCandidate(iceCandidate));\n  };\n\n  // useEffect -----------------------------\n  // 시작시 방 정보 얻어옴\n  useEffect(() => {\n    let data = async () => {\n      try {\n        let room = await stream_service.getStreamRoomData(id);\n        setRoom(room.room);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    data();\n  }, []);\n\n  // 룸정보가 오면 start시작\n  useEffect(() => {\n    if (room) {\n      var _room$participants2;\n      (_room$participants2 = room.participants) === null || _room$participants2 === void 0 ? void 0 : _room$participants2.map(val => {\n        if (val.nickname !== user.nickname) {\n          peerConnect(val.nickname);\n        }\n      });\n    }\n    start();\n  }, [room]);\n\n  // 소켓 연결\n  useEffect(() => {\n    socketClient.emit(\"join\", `room${id}`);\n    socketClient.on(\"other join\", joinRoomHandler);\n    socketClient.on(\"offer\", offerHandler); //signaling offer\n    socketClient.on(\"answer\", answerHandler); //signaling answer\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\n    socketClient.on(\"toggle track\", trackHandler);\n    return () => {\n      socketClient.on(\"other join\", joinRoomHandler);\n      socketClient.off(\"offer\", offerHandler);\n      socketClient.off(\"answer\", answerHandler);\n      socketClient.off(\"candidate\", candidateHandler);\n      socketClient.off(\"leave room\", leaveRoomHandler);\n      socketClient.off(\"toggle track\", trackHandler);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page streamRoom_page\",\n    children: [/*#__PURE__*/_jsxDEV(RoomMain, {\n      user: user,\n      stream: stream,\n      connects: connects\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      user: user,\n      connects: connects,\n      participants: room === null || room === void 0 ? void 0 : room.participants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamRoom, \"d+eRXfwhJ1PWvR7foM06MlAAT2Y=\", false, function () {\n  return [useSelector, useParams];\n});\n_c = StreamRoom;\nvar _c;\n$RefreshReg$(_c, \"StreamRoom\");","map":{"version":3,"names":["useEffect","useRef","useState","useParams","socketClient","stream_service","emitter","useSelector","Menu","RoomMain","jsxDEV","_jsxDEV","StreamRoom","_s","user","state","id","peerConnects","room","setRoom","stream","setStream","connects","setConnects","joinRoomHandler","who","leaveRoomHandler","current","c","copy","trackHandler","to","type","stInfo","audio","video","peerConnect","pc","RTCPeerConnection","channel","createDataChannel","getTracks","forEach","track","addTrack","onicecandidate","e","candidate","emit","nickname","ontrack","kind","MediaStream","includes","enabled","onmessage","JSON","parse","data","offer","createOffer","setLocalDescription","start","_room$participants","navigator","mediaDevices","getUserMedia","participants","map","val","err","console","log","offerHandler","from","_peerConnects$current","_peerConnects$current2","setRemoteDescription","RTCSessionDescription","signalingState","_peerConnects$current3","_peerConnects$current4","answer","createAnswer","answerHandler","_peerConnects$current5","_peerConnects$current6","currentRemoteDescription","candidateHandler","_peerConnects$current7","iceCandidate","RTCIceCandidate","addIceCandidate","getStreamRoomData","_room$participants2","on","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/page/streamroom.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport \"../css/room/streamRoom.css\";\r\nimport { Form, useNavigate, useParams } from \"react-router-dom\";\r\nimport { socketClient } from \"../util/socket\";\r\nimport { stream_service } from \"../service/streamservice\";\r\nimport { emitter } from \"../util/event\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../context/store\";\r\n\r\n// type\r\nimport { Room } from \"../types/room\";\r\nimport { User } from \"../types/user\";\r\nimport { PeerConnects } from \"../types/room\";\r\n\r\n// component\r\nimport { Menu } from \"../components/room/menu/menu\";\r\nimport { RoomMain } from \"../components/room/main/roomMain\";\r\nimport { convertToObject } from \"typescript\";\r\n\r\nexport const StreamRoom = () => {\r\n  let user = useSelector((state: RootState) => state.user);\r\n  let { id } = useParams();\r\n\r\n  // ref\r\n  let peerConnects = useRef<{\r\n    [nickname: string]: { pc: RTCPeerConnection; channel: RTCDataChannel };\r\n  }>({});\r\n\r\n  // state\r\n  let [room, setRoom] = useState<Room | null>(null); //방 정보\r\n  let [stream, setStream] = useState<MediaStream | null>(null);\r\n  let [connects, setConnects] = useState<PeerConnects>({});\r\n\r\n  // 방 입장/퇴장 관련 --------------------------\r\n  let joinRoomHandler = (who: string) => {\r\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\r\n  };\r\n\r\n  // room leave 처리\r\n  let leaveRoomHandler = (who: string) => {\r\n    delete peerConnects.current[who];\r\n    setConnects((c) => {\r\n      const copy = { ...c };\r\n      delete copy[who];\r\n      return copy;\r\n    });\r\n  };\r\n\r\n  // 비디오/오디오 상태 ----------------------------\r\n\r\n  // 상대 화면 on/off\r\n  let trackHandler = (to: string, type: \"audio\" | \"video\", state: boolean) => {\r\n    setConnects((c) => {\r\n      let stInfo = c[to];\r\n\r\n      type == \"audio\" ? (stInfo.audio = state) : (stInfo.video = state);\r\n\r\n      return { ...c, [to]: stInfo };\r\n    });\r\n  };\r\n\r\n  // p2p연결 관련 --------------------------------\r\n  // connect 연결\r\n  let peerConnect = async (to: string, stream?: MediaStream) => {\r\n    let pc = new RTCPeerConnection();\r\n    const channel = pc.createDataChannel(\"chat\");\r\n\r\n    stream?.getTracks().forEach((track) => {\r\n      pc.addTrack(track, stream);\r\n    });\r\n\r\n    // signaling event\r\n    pc.onicecandidate = (e) => {\r\n      if (e.candidate)\r\n        socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\r\n    };\r\n\r\n    pc.ontrack = (e) => {\r\n      let kind = e.track.kind;\r\n      // peerConnects.current[to] = { pc, channel };\r\n      setConnects((c) => {\r\n        let stream = new MediaStream();\r\n        let audio = true;\r\n        let video = true;\r\n\r\n        // 만약에 event track이 stream에 존재하지 않으면 추가해줌\r\n        if (!stream.getTracks().includes(e.track)) stream.addTrack(e.track);\r\n        // 미디어 kind타입에 활성화 상태 알려줌\r\n        kind == \"audio\" ? (audio = e.track.enabled) : (video = e.track.enabled);\r\n\r\n        return {\r\n          ...c,\r\n          [to]: { pc, channel, stream, video, audio },\r\n        };\r\n      });\r\n    };\r\n\r\n    // channel event\r\n    channel.onmessage = (e) => {\r\n      emitter.emit(\"menu chat\", JSON.parse(e.data));\r\n    };\r\n\r\n    // offer 부분\r\n    let offer = await pc.createOffer();\r\n    await pc.setLocalDescription(offer!);\r\n    socketClient.emit(\"offer\", user.nickname, to, offer);\r\n\r\n    peerConnects.current[to] = { pc, channel };\r\n  };\r\n\r\n  // 연결 시작\r\n  let start = async () => {\r\n    try {\r\n      let stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      });\r\n      setStream(stream);\r\n\r\n      // 트랙을 더해줌\r\n      if (room)\r\n        room.participants?.map(async (val: any) => {\r\n          if (val.nickname !== user.nickname) {\r\n            await peerConnect(val.nickname, stream);\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // offer처리\r\n  let offerHandler = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    console.log(`offer from ${from}`);\r\n    if (!peerConnects.current[from]) await peerConnect(from);\r\n    // console.log(!peerConnects.current[from]);\r\n    try {\r\n      // if (!peerConnects.current[from].pc) peerConnect(from);\r\n      await peerConnects.current[from].pc?.setRemoteDescription(\r\n        new RTCSessionDescription(offer)\r\n      );\r\n\r\n      if (\r\n        peerConnects.current[from]?.pc.signalingState == \"have-remote-offer\" &&\r\n        user.nickname !== \"\"\r\n      ) {\r\n        const answer = await peerConnects.current[from]?.pc.createAnswer();\r\n        await peerConnects.current[from]?.pc.setLocalDescription(answer!);\r\n        socketClient.emit(\"answer\", user.nickname, from, answer);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // answer 처리\r\n  let answerHandler = async (\r\n    from: string,\r\n    answer: RTCSessionDescriptionInit\r\n  ) => {\r\n    console.log(`answer from ${from}`);\r\n    try {\r\n      if (!peerConnects.current[from]?.pc.currentRemoteDescription)\r\n        await peerConnects.current[from]?.pc.setRemoteDescription(answer!);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // candidate처리\r\n  let candidateHandler = async (from: string, candidate: RTCIceCandidate) => {\r\n    const iceCandidate = new RTCIceCandidate(candidate);\r\n    await peerConnects.current[from]?.pc.addIceCandidate(iceCandidate);\r\n  };\r\n\r\n  // useEffect -----------------------------\r\n  // 시작시 방 정보 얻어옴\r\n  useEffect(() => {\r\n    let data = async () => {\r\n      try {\r\n        let room = await stream_service.getStreamRoomData(id!);\r\n        setRoom(room.room);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    data();\r\n  }, []);\r\n\r\n  // 룸정보가 오면 start시작\r\n  useEffect(() => {\r\n    if (room) {\r\n      room.participants?.map((val: any) => {\r\n        if (val.nickname !== user.nickname) {\r\n          peerConnect(val.nickname);\r\n        }\r\n      });\r\n    }\r\n    start();\r\n  }, [room]);\r\n\r\n  // 소켓 연결\r\n  useEffect(() => {\r\n    socketClient.emit(\"join\", `room${id}`);\r\n\r\n    socketClient.on(\"other join\", joinRoomHandler);\r\n    socketClient.on(\"offer\", offerHandler); //signaling offer\r\n    socketClient.on(\"answer\", answerHandler); //signaling answer\r\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\r\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\r\n    socketClient.on(\"toggle track\", trackHandler);\r\n\r\n    return () => {\r\n      socketClient.on(\"other join\", joinRoomHandler);\r\n      socketClient.off(\"offer\", offerHandler);\r\n      socketClient.off(\"answer\", answerHandler);\r\n      socketClient.off(\"candidate\", candidateHandler);\r\n      socketClient.off(\"leave room\", leaveRoomHandler);\r\n      socketClient.off(\"toggle track\", trackHandler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"page streamRoom_page\">\r\n      {/* main */}\r\n      <RoomMain user={user} stream={stream} connects={connects} />\r\n\r\n      {/* menu */}\r\n      <Menu user={user} connects={connects} participants={room?.participants} />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}