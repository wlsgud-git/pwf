{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nconst initialState = [];\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // reducer\n  reducers: {\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\n    //   let { nickname, online } = data.payload;\n    //   return {\n    //     ...current,\n    //     friends: current.friends.map((val: User) =>\n    //       val.nickname == nickname ? { ...val, online } : val\n    //     ),\n    //   };\n    // },\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        id,\n        email,\n        nickname,\n        profile_img\n      } = action.payload;\n      state.id = id;\n      state.email = email;\n      state.profile_img = profile_img;\n      state.nickname = nickname;\n    });\n  }\n});\nexport const {\n  insertReceiver,\n  userInit\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","userSlice","name","reducers","extraReducers","builder","addCase","getUserAction","fulfilled","state","action","id","email","nickname","profile_img","payload","insertReceiver","userInit","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/reducer/roomReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\n\r\nconst initialState: Room[] = [];\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\r\n    //   let { nickname, online } = data.payload;\r\n    //   return {\r\n    //     ...current,\r\n    //     friends: current.friends.map((val: User) =>\r\n    //       val.nickname == nickname ? { ...val, online } : val\r\n    //     ),\r\n    //   };\r\n    // },\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { id, email, nickname, profile_img } = action.payload;\r\n\r\n      state.id = id;\r\n      state.email = email;\r\n      state.profile_img = profile_img;\r\n      state.nickname = nickname;\r\n    });\r\n  },\r\n});\r\n\r\nexport const { insertReceiver, userInit } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAGA,MAAMC,YAAoB,GAAG,EAAE;AAE/B,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZF,YAAY;EAAE;EACdG,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;EAED;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACP,UAAU,CAACQ,aAAa,CAACC,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrE,IAAI;QAAEC,EAAE;QAAEC,KAAK;QAAEC,QAAQ;QAAEC;MAAY,CAAC,GAAGJ,MAAM,CAACK,OAAO;MAEzDN,KAAK,CAACE,EAAE,GAAGA,EAAE;MACbF,KAAK,CAACG,KAAK,GAAGA,KAAK;MACnBH,KAAK,CAACK,WAAW,GAAGA,WAAW;MAC/BL,KAAK,CAACI,QAAQ,GAAGA,QAAQ;IAC3B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEG,cAAc;EAAEC;AAAS,CAAC,GAAGhB,SAAS,CAACiB,OAAO;AAC7D,eAAejB,SAAS,CAACkB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}