{"ast":null,"code":"// import { getUser } from \"../reducer/userSlice\";\nimport { userService } from \"../../service/user.service\";\n// import { AppDispatch } from \"\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\n\n// types\n// import { UserAction, UserActionTypes } from \"../../types/user\";\n\nclass UserAction extends userService {\n  constructor(...args) {\n    super(...args);\n    // 친구요청 수락 or 거절\n    // requestFriendHandle = createAsyncThunk(\n    //   \"request/friend\",\n    //   async (data: FormData): Promise<any> => {\n    //     try {\n    //       let res = await this.handleRequestFriend(data);\n    //       return await res!;\n    //     } catch (error) {\n    //       alert(error);\n    //     }\n    //   }\n    // );\n    // 유저 정보 불러오기\n    this.getUserAction = createAsyncThunk(\"user/fetchUser\", async (_, {\n      rejectWithValue\n    }) => {\n      try {\n        let res = await this.getUser();\n        return res;\n      } catch (error) {\n        return rejectWithValue(error.response.data || \"unknown error\");\n      }\n    });\n  }\n}\nexport let userAction = new UserAction();","map":{"version":3,"names":["userService","createAsyncThunk","UserAction","constructor","args","getUserAction","_","rejectWithValue","res","getUser","error","response","data","userAction"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/actions/userAction.ts"],"sourcesContent":["// import { getUser } from \"../reducer/userSlice\";\r\nimport { userService } from \"../../service/user.service\";\r\n// import { AppDispatch } from \"\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// types\r\n// import { UserAction, UserActionTypes } from \"../../types/user\";\r\nimport { User } from \"../../types/user\";\r\nimport { HttpResponse } from \"../../types/http\";\r\n\r\nclass UserAction extends userService {\r\n  // 친구요청 수락 or 거절\r\n  // requestFriendHandle = createAsyncThunk(\r\n  //   \"request/friend\",\r\n  //   async (data: FormData): Promise<any> => {\r\n  //     try {\r\n  //       let res = await this.handleRequestFriend(data);\r\n  //       return await res!;\r\n  //     } catch (error) {\r\n  //       alert(error);\r\n  //     }\r\n  //   }\r\n  // );\r\n\r\n  // 유저 정보 불러오기\r\n  getUserAction = createAsyncThunk(\r\n    \"user/fetchUser\",\r\n    async (_, { rejectWithValue }): Promise<any> => {\r\n      try {\r\n        let res = await this.getUser();\r\n        return res;\r\n      } catch (error: any) {\r\n        return rejectWithValue(error.response!.data || \"unknown error\");\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport let userAction = new UserAction();\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,4BAA4B;AACxD;AACA,SAASC,gBAAgB,QAAQ,kBAAkB;;AAInD;AACA;;AAIA,MAAMC,UAAU,SAASF,WAAW,CAAC;EAAAG,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IACnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IAAA,KACAC,aAAa,GAAGJ,gBAAgB,CAC9B,gBAAgB,EAChB,OAAOK,CAAC,EAAE;MAAEC;IAAgB,CAAC,KAAmB;MAC9C,IAAI;QACF,IAAIC,GAAG,GAAG,MAAM,IAAI,CAACC,OAAO,CAAC,CAAC;QAC9B,OAAOD,GAAG;MACZ,CAAC,CAAC,OAAOE,KAAU,EAAE;QACnB,OAAOH,eAAe,CAACG,KAAK,CAACC,QAAQ,CAAEC,IAAI,IAAI,eAAe,CAAC;MACjE;IACF,CACF,CAAC;EAAA;AACH;AAEA,OAAO,IAAIC,UAAU,GAAG,IAAIX,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}