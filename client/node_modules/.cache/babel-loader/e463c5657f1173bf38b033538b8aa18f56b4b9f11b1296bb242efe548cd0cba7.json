{"ast":null,"code":"import{useEffect,useRef,useState}from\"react\";import\"../css/room/streamRoom.css\";import{useNavigate,useParams}from\"react-router-dom\";import{socketClient}from\"../util/socket\";import{stream_service}from\"../service/stream.service\";import{emitter}from\"../util/event\";import{useSelector}from\"react-redux\";// type\n// component\nimport{Menu}from\"../components/room/menu\";import{RoomMain}from\"../components/room/roomMain\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const StreamRoom=()=>{let user=useSelector(state=>state.user);let{id}=useParams();let navigate=useNavigate();// ref\nlet peerConnects=useRef({});// state\nlet[room,setRoom]=useState(null);//방 정보\nlet[stream,setStream]=useState(null);let[connects,setConnects]=useState({});let[invitationModal,setInvitationModal]=useState(false);// 방 입장/퇴장 관련 --------------------------\nlet joinRoomHandler=who=>{// setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\n};// room leave 처리\nlet leaveRoomHandler=who=>{peerConnects.current[who].pc.close();delete peerConnects.current[who];setConnects(c=>{const copy={...c};delete copy[who];return copy;});};// 비디오/오디오 상태 ----------------------------\n// 상대 화면 on/off\nlet trackHandler=(to,type,state)=>{setConnects(c=>{let stInfo=c[to];type==\"audio\"?stInfo.audio=state:stInfo.video=state;return{...c,[to]:stInfo};});};// p2p연결 관련 --------------------------------\n// connect 연결\nlet peerConnect=async(to,stream)=>{let pc=new RTCPeerConnection();const channel=pc.createDataChannel(\"chat\");stream===null||stream===void 0?void 0:stream.getTracks().forEach(track=>{pc.addTrack(track,stream);});// signaling event\npc.onicecandidate=e=>{if(e.candidate)socketClient.emit(\"candidate\",user.nickname,to,e.candidate);};pc.ontrack=e=>{let kind=e.track.kind;// peerConnects.current[to] = { pc, channel };\nsetConnects(c=>{let stream=new MediaStream();let audio=true;let video=true;// 만약에 event track이 stream에 존재하지 않으면 추가해줌\nif(!stream.getTracks().includes(e.track))stream.addTrack(e.track);// 미디어 kind타입에 활성화 상태 알려줌\nkind==\"audio\"?audio=e.track.enabled:video=e.track.enabled;return{...c,[to]:{pc,channel,stream,video,audio}};});};// channel event\nchannel.onmessage=e=>{emitter.emit(\"menu chat\",JSON.parse(e.data));};// offer 부분\nlet offer=await pc.createOffer();await pc.setLocalDescription(offer);socketClient.emit(\"offer\",user.nickname,to,offer);peerConnects.current[to]={pc,channel};};// 연결 시작\nlet start=async()=>{try{var _room$participants;let stream=await navigator.mediaDevices.getUserMedia({video:true,audio:true});setStream(stream);// 트랙을 더해줌\nif(room)(_room$participants=room.participants)===null||_room$participants===void 0?void 0:_room$participants.map(async val=>{if(val.nickname!==user.nickname){await peerConnect(val.nickname,stream);}});}catch(err){console.log(err);}};// offer처리\nlet offerHandler=async(from,offer)=>{console.log(`offer from ${from}`);if(!peerConnects.current[from])await peerConnect(from);try{var _peerConnects$current,_peerConnects$current2;await((_peerConnects$current=peerConnects.current[from].pc)===null||_peerConnects$current===void 0?void 0:_peerConnects$current.setRemoteDescription(new RTCSessionDescription(offer)));if(((_peerConnects$current2=peerConnects.current[from])===null||_peerConnects$current2===void 0?void 0:_peerConnects$current2.pc.signalingState)==\"have-remote-offer\"&&user.nickname!==\"\"){var _peerConnects$current3,_peerConnects$current4;const answer=await((_peerConnects$current3=peerConnects.current[from])===null||_peerConnects$current3===void 0?void 0:_peerConnects$current3.pc.createAnswer());await((_peerConnects$current4=peerConnects.current[from])===null||_peerConnects$current4===void 0?void 0:_peerConnects$current4.pc.setLocalDescription(answer));socketClient.emit(\"answer\",user.nickname,from,answer);}}catch(err){console.log(err);}};// answer 처리\nlet answerHandler=async(from,answer)=>{try{var _peerConnects$current5,_peerConnects$current6;if(!((_peerConnects$current5=peerConnects.current[from])!==null&&_peerConnects$current5!==void 0&&_peerConnects$current5.pc.currentRemoteDescription))await((_peerConnects$current6=peerConnects.current[from])===null||_peerConnects$current6===void 0?void 0:_peerConnects$current6.pc.setRemoteDescription(answer));}catch(err){console.log(err);}};// candidate처리\nlet candidateHandler=async(from,candidate)=>{// console.log(`candidate from ${from}`);\nif(!peerConnects.current[from])await peerConnect(from);try{var _peerConnects$current7;if((_peerConnects$current7=peerConnects.current[from].pc)!==null&&_peerConnects$current7!==void 0&&_peerConnects$current7.remoteDescription){var _peerConnects$current8;const iceCandidate=new RTCIceCandidate(candidate);await((_peerConnects$current8=peerConnects.current[from])===null||_peerConnects$current8===void 0?void 0:_peerConnects$current8.pc.addIceCandidate(iceCandidate));}}catch(err){console.log(err);}};// useEffect -----------------------------\n// 시작시 방 정보 얻어옴\nuseEffect(()=>{let data=async()=>{try{let room=await stream_service.getStreamRoomData(id);setRoom(room.room);}catch(err){console.log(err);}};data();},[]);// 룸정보가 오면 start시작\nuseEffect(()=>{if(room&&user.id){let participants=room.participants.map(val=>val);if(!participants.find(val=>val.id===user.id)){alert(\"참가자가 아닙니다.\");navigate(\"/\");return;}participants.map(val=>{if(val.nickname!==user.nickname){peerConnect(val.nickname);}});start();}},[room]);// 소켓 연결\nuseEffect(()=>{socketClient.emit(\"join\",`room${id}`);socketClient.on(\"other join\",joinRoomHandler);socketClient.on(\"offer\",offerHandler);//signaling offer\nsocketClient.on(\"answer\",answerHandler);//signaling answer\nsocketClient.on(\"candidate\",candidateHandler);//signaling candidate\nsocketClient.on(\"leave room\",leaveRoomHandler);// other user leave room\nsocketClient.on(\"toggle track\",trackHandler);return()=>{socketClient.on(\"other join\",joinRoomHandler);socketClient.off(\"offer\",offerHandler);socketClient.off(\"answer\",answerHandler);socketClient.off(\"candidate\",candidateHandler);socketClient.off(\"leave room\",leaveRoomHandler);socketClient.off(\"toggle track\",trackHandler);};},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"page streamRoom_page\",children:[/*#__PURE__*/_jsx(RoomMain,{user:user,stream:stream,connects:connects,participants:room===null||room===void 0?void 0:room.participants}),/*#__PURE__*/_jsx(Menu,{user:user,connects:connects,participants:room===null||room===void 0?void 0:room.participants})]});};","map":{"version":3,"names":["useEffect","useRef","useState","useNavigate","useParams","socketClient","stream_service","emitter","useSelector","Menu","RoomMain","jsx","_jsx","jsxs","_jsxs","StreamRoom","user","state","id","navigate","peerConnects","room","setRoom","stream","setStream","connects","setConnects","invitationModal","setInvitationModal","joinRoomHandler","who","leaveRoomHandler","current","pc","close","c","copy","trackHandler","to","type","stInfo","audio","video","peerConnect","RTCPeerConnection","channel","createDataChannel","getTracks","forEach","track","addTrack","onicecandidate","e","candidate","emit","nickname","ontrack","kind","MediaStream","includes","enabled","onmessage","JSON","parse","data","offer","createOffer","setLocalDescription","start","_room$participants","navigator","mediaDevices","getUserMedia","participants","map","val","err","console","log","offerHandler","from","_peerConnects$current","_peerConnects$current2","setRemoteDescription","RTCSessionDescription","signalingState","_peerConnects$current3","_peerConnects$current4","answer","createAnswer","answerHandler","_peerConnects$current5","_peerConnects$current6","currentRemoteDescription","candidateHandler","_peerConnects$current7","remoteDescription","_peerConnects$current8","iceCandidate","RTCIceCandidate","addIceCandidate","getStreamRoomData","find","alert","on","off","className","children"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/page/streamroom.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport \"../css/room/streamRoom.css\";\r\nimport { Form, useNavigate, useParams } from \"react-router-dom\";\r\nimport { socketClient } from \"../util/socket\";\r\nimport { stream_service } from \"../service/stream.service\";\r\nimport { emitter } from \"../util/event\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../context/store\";\r\n\r\n// type\r\nimport { Room } from \"../types/room\";\r\nimport { User } from \"../types/user\";\r\nimport { PeerConnects } from \"../types/room\";\r\n\r\n// component\r\nimport { Menu } from \"../components/room/menu\";\r\nimport { RoomMain } from \"../components/room/roomMain\";\r\n\r\nexport const StreamRoom = () => {\r\n  let user = useSelector((state: RootState) => state.user);\r\n  let { id } = useParams();\r\n  let navigate = useNavigate();\r\n\r\n  // ref\r\n  let peerConnects = useRef<{\r\n    [nickname: string]: { pc: RTCPeerConnection; channel: RTCDataChannel };\r\n  }>({});\r\n\r\n  // state\r\n  let [room, setRoom] = useState<Room | null>(null); //방 정보\r\n  let [stream, setStream] = useState<MediaStream | null>(null);\r\n  let [connects, setConnects] = useState<PeerConnects>({});\r\n  let [invitationModal, setInvitationModal] = useState<boolean>(false);\r\n\r\n  // 방 입장/퇴장 관련 --------------------------\r\n  let joinRoomHandler = (who: string) => {\r\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\r\n  };\r\n\r\n  // room leave 처리\r\n  let leaveRoomHandler = (who: string) => {\r\n    peerConnects.current[who].pc.close();\r\n    delete peerConnects.current[who];\r\n    setConnects((c) => {\r\n      const copy = { ...c };\r\n      delete copy[who];\r\n      return copy;\r\n    });\r\n  };\r\n\r\n  // 비디오/오디오 상태 ----------------------------\r\n\r\n  // 상대 화면 on/off\r\n  let trackHandler = (to: string, type: \"audio\" | \"video\", state: boolean) => {\r\n    setConnects((c) => {\r\n      let stInfo = c[to];\r\n\r\n      type == \"audio\" ? (stInfo.audio = state) : (stInfo.video = state);\r\n\r\n      return { ...c, [to]: stInfo };\r\n    });\r\n  };\r\n\r\n  // p2p연결 관련 --------------------------------\r\n  // connect 연결\r\n  let peerConnect = async (to: string, stream?: MediaStream) => {\r\n    let pc = new RTCPeerConnection();\r\n    const channel = pc.createDataChannel(\"chat\");\r\n\r\n    stream?.getTracks().forEach((track) => {\r\n      pc.addTrack(track, stream);\r\n    });\r\n\r\n    // signaling event\r\n    pc.onicecandidate = (e) => {\r\n      if (e.candidate)\r\n        socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\r\n    };\r\n\r\n    pc.ontrack = (e) => {\r\n      let kind = e.track.kind;\r\n      // peerConnects.current[to] = { pc, channel };\r\n      setConnects((c) => {\r\n        let stream = new MediaStream();\r\n        let audio = true;\r\n        let video = true;\r\n\r\n        // 만약에 event track이 stream에 존재하지 않으면 추가해줌\r\n        if (!stream.getTracks().includes(e.track)) stream.addTrack(e.track);\r\n        // 미디어 kind타입에 활성화 상태 알려줌\r\n        kind == \"audio\" ? (audio = e.track.enabled) : (video = e.track.enabled);\r\n\r\n        return {\r\n          ...c,\r\n          [to]: { pc, channel, stream, video, audio },\r\n        };\r\n      });\r\n    };\r\n\r\n    // channel event\r\n    channel.onmessage = (e) => {\r\n      emitter.emit(\"menu chat\", JSON.parse(e.data));\r\n    };\r\n\r\n    // offer 부분\r\n    let offer = await pc.createOffer();\r\n    await pc.setLocalDescription(offer!);\r\n    socketClient.emit(\"offer\", user.nickname, to, offer);\r\n\r\n    peerConnects.current[to] = { pc, channel };\r\n  };\r\n\r\n  // 연결 시작\r\n  let start = async () => {\r\n    try {\r\n      let stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      });\r\n      setStream(stream);\r\n\r\n      // 트랙을 더해줌\r\n      if (room)\r\n        room.participants?.map(async (val: any) => {\r\n          if (val.nickname !== user.nickname) {\r\n            await peerConnect(val.nickname, stream);\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // offer처리\r\n  let offerHandler = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    console.log(`offer from ${from}`);\r\n    if (!peerConnects.current[from]) await peerConnect(from);\r\n    try {\r\n      await peerConnects.current[from].pc?.setRemoteDescription(\r\n        new RTCSessionDescription(offer)\r\n      );\r\n\r\n      if (\r\n        peerConnects.current[from]?.pc.signalingState == \"have-remote-offer\" &&\r\n        user.nickname !== \"\"\r\n      ) {\r\n        const answer = await peerConnects.current[from]?.pc.createAnswer();\r\n        await peerConnects.current[from]?.pc.setLocalDescription(answer!);\r\n        socketClient.emit(\"answer\", user.nickname, from, answer);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // answer 처리\r\n  let answerHandler = async (\r\n    from: string,\r\n    answer: RTCSessionDescriptionInit\r\n  ) => {\r\n    try {\r\n      if (!peerConnects.current[from]?.pc.currentRemoteDescription)\r\n        await peerConnects.current[from]?.pc.setRemoteDescription(answer!);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // candidate처리\r\n  let candidateHandler = async (from: string, candidate: RTCIceCandidate) => {\r\n    // console.log(`candidate from ${from}`);\r\n    if (!peerConnects.current[from]) await peerConnect(from);\r\n    try {\r\n      if (peerConnects.current[from].pc?.remoteDescription) {\r\n        const iceCandidate = new RTCIceCandidate(candidate);\r\n        await peerConnects.current[from]?.pc.addIceCandidate(iceCandidate);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // useEffect -----------------------------\r\n  // 시작시 방 정보 얻어옴\r\n  useEffect(() => {\r\n    let data = async () => {\r\n      try {\r\n        let room = await stream_service.getStreamRoomData(id!);\r\n        setRoom(room.room);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    data();\r\n  }, []);\r\n\r\n  // 룸정보가 오면 start시작\r\n  useEffect(() => {\r\n    if (room && user.id) {\r\n      let participants = (room.participants as User[]).map((val) => val);\r\n      if (!participants.find((val) => val.id === user.id)) {\r\n        alert(\"참가자가 아닙니다.\");\r\n        navigate(\"/\");\r\n        return;\r\n      }\r\n      participants.map((val: any) => {\r\n        if (val.nickname !== user.nickname) {\r\n          peerConnect(val.nickname);\r\n        }\r\n      });\r\n      start();\r\n    }\r\n  }, [room]);\r\n\r\n  // 소켓 연결\r\n  useEffect(() => {\r\n    socketClient.emit(\"join\", `room${id}`);\r\n\r\n    socketClient.on(\"other join\", joinRoomHandler);\r\n    socketClient.on(\"offer\", offerHandler); //signaling offer\r\n    socketClient.on(\"answer\", answerHandler); //signaling answer\r\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\r\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\r\n    socketClient.on(\"toggle track\", trackHandler);\r\n\r\n    return () => {\r\n      socketClient.on(\"other join\", joinRoomHandler);\r\n      socketClient.off(\"offer\", offerHandler);\r\n      socketClient.off(\"answer\", answerHandler);\r\n      socketClient.off(\"candidate\", candidateHandler);\r\n      socketClient.off(\"leave room\", leaveRoomHandler);\r\n      socketClient.off(\"toggle track\", trackHandler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"page streamRoom_page\">\r\n      {/* main */}\r\n      <RoomMain\r\n        user={user}\r\n        stream={stream}\r\n        connects={connects}\r\n        participants={room?.participants}\r\n      />\r\n\r\n      {/* menu */}\r\n      <Menu user={user} connects={connects} participants={room?.participants} />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}