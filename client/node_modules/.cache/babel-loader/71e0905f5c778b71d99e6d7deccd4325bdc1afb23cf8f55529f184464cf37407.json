{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nconst initialState = {\n  request_friends: [],\n  friends: []\n};\nconst friendSlice = createSlice({\n  name: \"friend\",\n  initialState,\n  // reducer\n  reducers: {\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\n    //   let { nickname, online } = data.payload;\n    //   return {\n    //     ...current,\n    //     friends: current.friends.map((val: User) =>\n    //       val.nickname == nickname ? { ...val, online } : val\n    //     ),\n    //   };\n    // },\n    // insertReceiver: (current: any, data: PayloadAction<User>) => {\n    //   let { nickname, profile_img, online } = data.payload;\n    //   return { ...current, friends: [...current.friends, data.payload] };\n    // },\n    // userInit: (current: any) => (current = initialState),\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        request_friends,\n        friends\n      } = action.payload;\n      if (request_friends && request_friends.length) state.request_friends = request_friends.map(val => val);\n      if (friends && friends.length) state.friends = friends.map(val => val);\n    });\n\n    // 친구요청에 대한 결과\n    // builder.addCase(\n    //   userAction.requestFriendHandle.fulfilled,\n    //   (state, action) => {\n    //     let { sender, msg } = action.payload;\n\n    //     state.request_friends = state.request_friends?.filter((val) => {\n    //       if (val.nickname == sender.nickname) state.friends?.push(sender);\n    //       return val.nickname != sender.nickname;\n    //     });\n\n    //     alert(msg);\n    //     return;\n    //   }\n    // );\n  }\n});\nexport const {} = friendSlice.actions;\nexport default friendSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","request_friends","friends","friendSlice","name","reducers","extraReducers","builder","addCase","getUserAction","fulfilled","state","action","payload","length","map","val","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/reducer/friendReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\n\r\nconst initialState: User = {\r\n  request_friends: [],\r\n  friends: [],\r\n};\r\n\r\nconst friendSlice = createSlice({\r\n  name: \"friend\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\r\n    //   let { nickname, online } = data.payload;\r\n    //   return {\r\n    //     ...current,\r\n    //     friends: current.friends.map((val: User) =>\r\n    //       val.nickname == nickname ? { ...val, online } : val\r\n    //     ),\r\n    //   };\r\n    // },\r\n    // insertReceiver: (current: any, data: PayloadAction<User>) => {\r\n    //   let { nickname, profile_img, online } = data.payload;\r\n    //   return { ...current, friends: [...current.friends, data.payload] };\r\n    // },\r\n    // userInit: (current: any) => (current = initialState),\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { request_friends, friends } = action.payload;\r\n\r\n      if (request_friends && request_friends.length)\r\n        state.request_friends = request_friends.map((val: User) => val);\r\n      if (friends && friends.length)\r\n        state.friends = friends.map((val: User) => val);\r\n    });\r\n\r\n    // 친구요청에 대한 결과\r\n    // builder.addCase(\r\n    //   userAction.requestFriendHandle.fulfilled,\r\n    //   (state, action) => {\r\n    //     let { sender, msg } = action.payload;\r\n\r\n    //     state.request_friends = state.request_friends?.filter((val) => {\r\n    //       if (val.nickname == sender.nickname) state.friends?.push(sender);\r\n    //       return val.nickname != sender.nickname;\r\n    //     });\r\n\r\n    //     alert(msg);\r\n    //     return;\r\n    //   }\r\n    // );\r\n  },\r\n});\r\n\r\nexport const {} = friendSlice.actions;\r\nexport default friendSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAGA,MAAMC,YAAkB,GAAG;EACzBC,eAAe,EAAE,EAAE;EACnBC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,WAAW,GAAGL,WAAW,CAAC;EAC9BM,IAAI,EAAE,QAAQ;EACdJ,YAAY;EAAE;EACdK,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;EAED;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACT,UAAU,CAACU,aAAa,CAACC,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrE,IAAI;QAAEX,eAAe;QAAEC;MAAQ,CAAC,GAAGU,MAAM,CAACC,OAAO;MAEjD,IAAIZ,eAAe,IAAIA,eAAe,CAACa,MAAM,EAC3CH,KAAK,CAACV,eAAe,GAAGA,eAAe,CAACc,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;MACjE,IAAId,OAAO,IAAIA,OAAO,CAACY,MAAM,EAC3BH,KAAK,CAACT,OAAO,GAAGA,OAAO,CAACa,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;IACnD,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM,CAAC,CAAC,GAAGb,WAAW,CAACc,OAAO;AACrC,eAAed,WAAW,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}