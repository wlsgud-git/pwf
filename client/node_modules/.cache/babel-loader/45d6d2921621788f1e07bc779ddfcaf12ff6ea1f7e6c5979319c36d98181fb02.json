{"ast":null,"code":"// import { getUser } from \"../reducer/userSlice\";\nimport{userService}from\"../../service/userservice\";// import { AppDispatch } from \"\";\nimport{createAsyncThunk}from\"@reduxjs/toolkit\";// types\n// import { UserAction, UserActionTypes } from \"../../types/user\";\nclass UserAction extends userService{constructor(){super(...arguments);// 친구요청 수락 or 거절\nthis.requestFriendHandle=createAsyncThunk(\"request/friend\",async data=>{try{let res=await this.handleRequestFriend(data);return await res;}catch(error){alert(error);}});// 유저 정보 불러오기\nthis.getUserAction=createAsyncThunk(\"user/fetchUser\",async()=>{try{let res=await this.getUser();return await res;}catch(error){window.location.href=\"/login\";}});}}export let userAction=new UserAction();","map":{"version":3,"names":["userService","createAsyncThunk","UserAction","constructor","arguments","requestFriendHandle","data","res","handleRequestFriend","error","alert","getUserAction","getUser","window","location","href","userAction"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/actions/userAction.ts"],"sourcesContent":["// import { getUser } from \"../reducer/userSlice\";\r\nimport { userService } from \"../../service/userservice\";\r\n// import { AppDispatch } from \"\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// types\r\n// import { UserAction, UserActionTypes } from \"../../types/user\";\r\nimport { User } from \"../../types/user\";\r\nimport { errorHandling } from \"../../error/error\";\r\nimport { HttpResponse } from \"../../types/http\";\r\n\r\nclass UserAction extends userService {\r\n  // 친구요청 수락 or 거절\r\n  requestFriendHandle = createAsyncThunk(\r\n    \"request/friend\",\r\n    async (data: FormData): Promise<any> => {\r\n      try {\r\n        let res = await this.handleRequestFriend(data);\r\n        return await res!;\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  );\r\n  // 유저 정보 불러오기\r\n  getUserAction = createAsyncThunk(\"user/fetchUser\", async (): Promise<any> => {\r\n    try {\r\n      let res = await this.getUser();\r\n      return await res!;\r\n    } catch (error) {\r\n      window.location.href = \"/login\";\r\n    }\r\n  });\r\n}\r\n\r\nexport let userAction = new UserAction();\r\n"],"mappings":"AAAA;AACA,OAASA,WAAW,KAAQ,2BAA2B,CACvD;AACA,OAASC,gBAAgB,KAAQ,kBAAkB,CAInD;AACA;AAKA,KAAM,CAAAC,UAAU,QAAS,CAAAF,WAAY,CAAAG,YAAA,WAAAC,SAAA,EACnC;AAAA,KACAC,mBAAmB,CAAGJ,gBAAgB,CACpC,gBAAgB,CAChB,KAAO,CAAAK,IAAc,EAAmB,CACtC,GAAI,CACF,GAAI,CAAAC,GAAG,CAAG,KAAM,KAAI,CAACC,mBAAmB,CAACF,IAAI,CAAC,CAC9C,MAAO,MAAM,CAAAC,GAAI,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdC,KAAK,CAACD,KAAK,CAAC,CACd,CACF,CACF,CAAC,CACD;AAAA,KACAE,aAAa,CAAGV,gBAAgB,CAAC,gBAAgB,CAAE,SAA0B,CAC3E,GAAI,CACF,GAAI,CAAAM,GAAG,CAAG,KAAM,KAAI,CAACK,OAAO,CAAC,CAAC,CAC9B,MAAO,MAAM,CAAAL,GAAI,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdI,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CACF,CAAC,CAAC,EACJ,CAEA,MAAO,IAAI,CAAAC,UAAU,CAAG,GAAI,CAAAd,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}