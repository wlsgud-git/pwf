{"ast":null,"code":"// import { getUser } from \"../reducer/userSlice\";\nimport{userService}from\"../../service/user.service\";// import { AppDispatch } from \"\";\nimport{createAsyncThunk}from\"@reduxjs/toolkit\";// types\n// import { UserAction, UserActionTypes } from \"../../types/user\";\nclass UserAction extends userService{constructor(){super(...arguments);// 친구요청 수락 or 거절\nthis.requestFriendHandle=createAsyncThunk(\"request/friend\",async data=>{try{let res=await this.handleRequestFriend(data);return await res;}catch(error){alert(error);}});// 유저 정보 불러오기\nthis.getUserAction=createAsyncThunk(\"user/fetchUser\",async(_,_ref)=>{let{rejectWithValue}=_ref;try{let res=await this.getUser();return await res;}catch(error){return rejectWithValue(error.response.data||\"unknown error\");}});}}export let userAction=new UserAction();","map":{"version":3,"names":["userService","createAsyncThunk","UserAction","constructor","arguments","requestFriendHandle","data","res","handleRequestFriend","error","alert","getUserAction","_","_ref","rejectWithValue","getUser","response","userAction"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/actions/userAction.ts"],"sourcesContent":["// import { getUser } from \"../reducer/userSlice\";\r\nimport { userService } from \"../../service/user.service\";\r\n// import { AppDispatch } from \"\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// types\r\n// import { UserAction, UserActionTypes } from \"../../types/user\";\r\nimport { User } from \"../../types/user\";\r\nimport { HttpResponse } from \"../../types/http\";\r\n\r\nclass UserAction extends userService {\r\n  // 친구요청 수락 or 거절\r\n  requestFriendHandle = createAsyncThunk(\r\n    \"request/friend\",\r\n    async (data: FormData): Promise<any> => {\r\n      try {\r\n        let res = await this.handleRequestFriend(data);\r\n        return await res!;\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  );\r\n\r\n  // 유저 정보 불러오기\r\n  getUserAction = createAsyncThunk(\r\n    \"user/fetchUser\",\r\n    async (_, { rejectWithValue }): Promise<any> => {\r\n      try {\r\n        let res = await this.getUser();\r\n        return await res!;\r\n      } catch (error: any) {\r\n        return rejectWithValue(error.response!.data || \"unknown error\");\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nexport let userAction = new UserAction();\r\n"],"mappings":"AAAA;AACA,OAASA,WAAW,KAAQ,4BAA4B,CACxD;AACA,OAASC,gBAAgB,KAAQ,kBAAkB,CAInD;AACA;AAIA,KAAM,CAAAC,UAAU,QAAS,CAAAF,WAAY,CAAAG,YAAA,WAAAC,SAAA,EACnC;AAAA,KACAC,mBAAmB,CAAGJ,gBAAgB,CACpC,gBAAgB,CAChB,KAAO,CAAAK,IAAc,EAAmB,CACtC,GAAI,CACF,GAAI,CAAAC,GAAG,CAAG,KAAM,KAAI,CAACC,mBAAmB,CAACF,IAAI,CAAC,CAC9C,MAAO,MAAM,CAAAC,GAAI,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdC,KAAK,CAACD,KAAK,CAAC,CACd,CACF,CACF,CAAC,CAED;AAAA,KACAE,aAAa,CAAGV,gBAAgB,CAC9B,gBAAgB,CAChB,MAAOW,CAAC,CAAAC,IAAA,GAAwC,IAAtC,CAAEC,eAAgB,CAAC,CAAAD,IAAA,CAC3B,GAAI,CACF,GAAI,CAAAN,GAAG,CAAG,KAAM,KAAI,CAACQ,OAAO,CAAC,CAAC,CAC9B,MAAO,MAAM,CAAAR,GAAI,CACnB,CAAE,MAAOE,KAAU,CAAE,CACnB,MAAO,CAAAK,eAAe,CAACL,KAAK,CAACO,QAAQ,CAAEV,IAAI,EAAI,eAAe,CAAC,CACjE,CACF,CACF,CAAC,EACH,CAEA,MAAO,IAAI,CAAAW,UAAU,CAAG,GAAI,CAAAf,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}