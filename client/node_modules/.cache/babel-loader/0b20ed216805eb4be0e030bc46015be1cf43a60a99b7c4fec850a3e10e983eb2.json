{"ast":null,"code":"import { EmailError, PasswordError } from \"../types/auth\";\nimport { user_service } from \"../service/userservice\";\nimport { createFormData } from \"../util/form\";\n// 이메일 형태 검증\nexport const emailFormValid = email => {\n  let result = email.toString().trim().toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n  return !result ? false : true;\n};\n\n// 비밀번호 형태 검증\nexport const passwordFormValid = password => {\n  let result = password.trim().toLowerCase().match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\n  return !result ? false : true;\n};\n\n// 이메일 검증 값 전체검증\nexport const emailValidate = async (email, overlap) => {\n  try {\n    if (!emailFormValid(email)) throw {\n      type: \"email\",\n      msg: EmailError.EMAIL_FORM_ERROR\n    };\n    let formdata = createFormData({\n      email\n    });\n    let res = await user_service.emailOverlap(formdata);\n    if (overlap) {\n      if (typeof res == \"string\") throw {\n        type: \"email\",\n        msg: EmailError.EMAIL_UNDEFINED_ERROR\n      };\n    } else {\n      if (typeof res == \"object\") throw {\n        type: \"email\",\n        msg: EmailError.EMAIL_OVERLAP_ERROR\n      };\n    }\n    return true;\n  } catch (err) {\n    throw err;\n  }\n};\n\n// 닉네임 검증\nexport const nicknameValidate = async nickname => {\n  try {\n    let formdata = createFormData({\n      nickname\n    });\n    let res = await user_service.nicknameOverlap(formdata);\n  } catch (err) {\n    throw err;\n  }\n};\n\n// 비밀번호 인가\nexport const passwordValidate = password => {\n  let result = passwordFormValid(password);\n  if (!result) set_password(c => ({\n    ...c,\n    error: !result ? true : false,\n    error_msg: !result ? PasswordError.PASSWORD_FORM_ERROR : \"\"\n  }));\n};","map":{"version":3,"names":["EmailError","PasswordError","user_service","createFormData","emailFormValid","email","result","toString","trim","toLowerCase","match","passwordFormValid","password","emailValidate","overlap","type","msg","EMAIL_FORM_ERROR","formdata","res","emailOverlap","EMAIL_UNDEFINED_ERROR","EMAIL_OVERLAP_ERROR","err","nicknameValidate","nickname","nicknameOverlap","passwordValidate","set_password","c","error","error_msg","PASSWORD_FORM_ERROR"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/validation/auth.ts"],"sourcesContent":["import { Dispatch } from \"react\";\r\nimport { EmailError, PasswordError, NicknameError } from \"../types/auth\";\r\nimport { user_service } from \"../service/userservice\";\r\nimport { createFormData } from \"../util/form\";\r\nimport { errorHandling } from \"../error/error\";\r\n\r\nimport { SignupInputProps } from \"../types/auth\";\r\nimport { StateDispatch } from \"../types/event\";\r\n\r\n// 이메일 형태 검증\r\nexport const emailFormValid = (email: string) => {\r\n  let result = email\r\n    .toString()\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n  return !result ? false : true;\r\n};\r\n\r\n// 비밀번호 형태 검증\r\nexport const passwordFormValid = (password: string) => {\r\n  let result = password\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\r\n  return !result ? false : true;\r\n};\r\n\r\n// 이메일 검증 값 전체검증\r\nexport const emailValidate = async (email: string, overlap: boolean) => {\r\n  try {\r\n    if (!emailFormValid(email))\r\n      throw { type: \"email\", msg: EmailError.EMAIL_FORM_ERROR };\r\n    let formdata = createFormData({ email });\r\n    let res = await user_service.emailOverlap(formdata);\r\n\r\n    if (overlap) {\r\n      if (typeof res == \"string\")\r\n        throw { type: \"email\", msg: EmailError.EMAIL_UNDEFINED_ERROR };\r\n    } else {\r\n      if (typeof res == \"object\")\r\n        throw { type: \"email\", msg: EmailError.EMAIL_OVERLAP_ERROR };\r\n    }\r\n    return true;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\n// 닉네임 검증\r\nexport const nicknameValidate = async (nickname: string) => {\r\n  try {\r\n    let formdata = createFormData({ nickname });\r\n    let res = await user_service.nicknameOverlap(formdata);\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\n// 비밀번호 인가\r\nexport const passwordValidate = (password: string) => {\r\n  let result = passwordFormValid(password);\r\n  if (!result)\r\n    set_password((c) => ({\r\n      ...c,\r\n      error: !result ? true : false,\r\n      error_msg: !result ? PasswordError.PASSWORD_FORM_ERROR : \"\",\r\n    }));\r\n};\r\n"],"mappings":"AACA,SAASA,UAAU,EAAEC,aAAa,QAAuB,eAAe;AACxE,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,cAAc;AAM7C;AACA,OAAO,MAAMC,cAAc,GAAIC,KAAa,IAAK;EAC/C,IAAIC,MAAM,GAAGD,KAAK,CACfE,QAAQ,CAAC,CAAC,CACVC,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,wJACF,CAAC;EACH,OAAO,CAACJ,MAAM,GAAG,KAAK,GAAG,IAAI;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAIC,QAAgB,IAAK;EACrD,IAAIN,MAAM,GAAGM,QAAQ,CAClBJ,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,+DAA+D,CAAC;EACzE,OAAO,CAACJ,MAAM,GAAG,KAAK,GAAG,IAAI;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMO,aAAa,GAAG,MAAAA,CAAOR,KAAa,EAAES,OAAgB,KAAK;EACtE,IAAI;IACF,IAAI,CAACV,cAAc,CAACC,KAAK,CAAC,EACxB,MAAM;MAAEU,IAAI,EAAE,OAAO;MAAEC,GAAG,EAAEhB,UAAU,CAACiB;IAAiB,CAAC;IAC3D,IAAIC,QAAQ,GAAGf,cAAc,CAAC;MAAEE;IAAM,CAAC,CAAC;IACxC,IAAIc,GAAG,GAAG,MAAMjB,YAAY,CAACkB,YAAY,CAACF,QAAQ,CAAC;IAEnD,IAAIJ,OAAO,EAAE;MACX,IAAI,OAAOK,GAAG,IAAI,QAAQ,EACxB,MAAM;QAAEJ,IAAI,EAAE,OAAO;QAAEC,GAAG,EAAEhB,UAAU,CAACqB;MAAsB,CAAC;IAClE,CAAC,MAAM;MACL,IAAI,OAAOF,GAAG,IAAI,QAAQ,EACxB,MAAM;QAAEJ,IAAI,EAAE,OAAO;QAAEC,GAAG,EAAEhB,UAAU,CAACsB;MAAoB,CAAC;IAChE;IACA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAgB,IAAK;EAC1D,IAAI;IACF,IAAIP,QAAQ,GAAGf,cAAc,CAAC;MAAEsB;IAAS,CAAC,CAAC;IAC3C,IAAIN,GAAG,GAAG,MAAMjB,YAAY,CAACwB,eAAe,CAACR,QAAQ,CAAC;EACxD,CAAC,CAAC,OAAOK,GAAG,EAAE;IACZ,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMI,gBAAgB,GAAIf,QAAgB,IAAK;EACpD,IAAIN,MAAM,GAAGK,iBAAiB,CAACC,QAAQ,CAAC;EACxC,IAAI,CAACN,MAAM,EACTsB,YAAY,CAAEC,CAAC,KAAM;IACnB,GAAGA,CAAC;IACJC,KAAK,EAAE,CAACxB,MAAM,GAAG,IAAI,GAAG,KAAK;IAC7ByB,SAAS,EAAE,CAACzB,MAAM,GAAGL,aAAa,CAAC+B,mBAAmB,GAAG;EAC3D,CAAC,CAAC,CAAC;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}