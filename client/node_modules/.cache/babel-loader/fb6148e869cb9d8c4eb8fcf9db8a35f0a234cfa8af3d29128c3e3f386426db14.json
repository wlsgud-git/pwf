{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nimport { friendAction } from \"../actions/friendAction\";\nconst initialState = {\n  request_friends: [],\n  friends: []\n};\nconst friendSlice = createSlice({\n  name: \"friend\",\n  initialState,\n  // reducer\n  reducers: {\n    friendRequest: (state, data) => {\n      state.request_friends.push(data.payload.from);\n    },\n    friendReqeustHandle: (state, data) => {\n      state.friends.push(data.payload);\n    },\n    init: current => current = initialState\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        request_friends,\n        friends\n      } = action.payload.user;\n      if (request_friends && request_friends.length) state.request_friends = request_friends.map(val => val);\n      if (friends && friends.length) state.friends = friends.map(val => val);\n    });\n\n    // 친구요청에 대한 결과\n    builder.addCase(friendAction.requestFriendHandle.fulfilled, (state, action) => {\n      let {\n        sender,\n        response\n      } = action.payload;\n      console.log(\"in redux thunk:\", sender, response);\n      // state.request_friends = state.request_friends?.filter((val) => {\n      //   if (val.nickname == sender.nickname) state.friends?.push(sender);\n      //   return val.nickname != sender.nickname;\n      // });\n      // alert(msg);\n      // return;\n    });\n  }\n});\nexport const {\n  friendRequest,\n  friendReqeustHandle\n} = friendSlice.actions;\nexport default friendSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","friendAction","initialState","request_friends","friends","friendSlice","name","reducers","friendRequest","state","data","push","payload","from","friendReqeustHandle","init","current","extraReducers","builder","addCase","getUserAction","fulfilled","action","user","length","map","val","requestFriendHandle","sender","response","console","log","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/reducer/friendReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { friendAction } from \"../actions/friendAction\";\r\n\r\nconst initialState: User = {\r\n  request_friends: [],\r\n  friends: [],\r\n};\r\n\r\nconst friendSlice = createSlice({\r\n  name: \"friend\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    friendRequest: (state: any, data: any) => {\r\n      state.request_friends.push(data.payload.from);\r\n    },\r\n\r\n    friendReqeustHandle: (state: any, data: any) => {\r\n      state.friends.push(data.payload);\r\n    },\r\n    init: (current) => (current = initialState),\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { request_friends, friends } = action.payload.user;\r\n\r\n      if (request_friends && request_friends.length)\r\n        state.request_friends = request_friends.map((val: User) => val);\r\n      if (friends && friends.length)\r\n        state.friends = friends.map((val: User) => val);\r\n    });\r\n\r\n    // 친구요청에 대한 결과\r\n    builder.addCase(\r\n      friendAction.requestFriendHandle.fulfilled,\r\n      (state, action) => {\r\n        let { sender, response } = action.payload;\r\n        console.log(\"in redux thunk:\", sender, response);\r\n        // state.request_friends = state.request_friends?.filter((val) => {\r\n        //   if (val.nickname == sender.nickname) state.friends?.push(sender);\r\n        //   return val.nickname != sender.nickname;\r\n        // });\r\n        // alert(msg);\r\n        // return;\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nexport const { friendRequest, friendReqeustHandle } = friendSlice.actions;\r\nexport default friendSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAEA,SAASC,YAAY,QAAQ,yBAAyB;AAEtD,MAAMC,YAAkB,GAAG;EACzBC,eAAe,EAAE,EAAE;EACnBC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,WAAW,GAAGN,WAAW,CAAC;EAC9BO,IAAI,EAAE,QAAQ;EACdJ,YAAY;EAAE;EACdK,QAAQ,EAAE;IACRC,aAAa,EAAEA,CAACC,KAAU,EAAEC,IAAS,KAAK;MACxCD,KAAK,CAACN,eAAe,CAACQ,IAAI,CAACD,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC;IAC/C,CAAC;IAEDC,mBAAmB,EAAEA,CAACL,KAAU,EAAEC,IAAS,KAAK;MAC9CD,KAAK,CAACL,OAAO,CAACO,IAAI,CAACD,IAAI,CAACE,OAAO,CAAC;IAClC,CAAC;IACDG,IAAI,EAAGC,OAAO,IAAMA,OAAO,GAAGd;EAChC,CAAC;EAED;EACAe,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACnB,UAAU,CAACoB,aAAa,CAACC,SAAS,EAAE,CAACZ,KAAK,EAAEa,MAAM,KAAK;MACrE,IAAI;QAAEnB,eAAe;QAAEC;MAAQ,CAAC,GAAGkB,MAAM,CAACV,OAAO,CAACW,IAAI;MAEtD,IAAIpB,eAAe,IAAIA,eAAe,CAACqB,MAAM,EAC3Cf,KAAK,CAACN,eAAe,GAAGA,eAAe,CAACsB,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;MACjE,IAAItB,OAAO,IAAIA,OAAO,CAACoB,MAAM,EAC3Bf,KAAK,CAACL,OAAO,GAAGA,OAAO,CAACqB,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;IACnD,CAAC,CAAC;;IAEF;IACAR,OAAO,CAACC,OAAO,CACblB,YAAY,CAAC0B,mBAAmB,CAACN,SAAS,EAC1C,CAACZ,KAAK,EAAEa,MAAM,KAAK;MACjB,IAAI;QAAEM,MAAM;QAAEC;MAAS,CAAC,GAAGP,MAAM,CAACV,OAAO;MACzCkB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,MAAM,EAAEC,QAAQ,CAAC;MAChD;MACA;MACA;MACA;MACA;MACA;IACF,CACF,CAAC;EACH;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAErB,aAAa;EAAEM;AAAoB,CAAC,GAAGT,WAAW,CAAC2B,OAAO;AACzE,eAAe3B,WAAW,CAAC4B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}