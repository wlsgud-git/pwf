{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nimport { friendAction } from \"../actions/friendAction\";\nconst initialState = {\n  request_friends: {},\n  friends: {}\n};\nconst friendSlice = createSlice({\n  name: \"friend\",\n  initialState,\n  // reducer\n  reducers: {\n    friendRequest: (state, data) => {\n      state.request_friends[data.payload.from.id] = data.payload.from;\n    },\n    friendReqeustHandle: (state, data) => {\n      state.friends[data.payload.id] = data.payload;\n    },\n    friendOnlineUpdate: (state, data) => {\n      console.log(data.payload);\n      state.friends[data.payload.who.id].online = data.payload.online;\n    },\n    init: current => current = initialState\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        request_friends,\n        friends\n      } = action.payload.user;\n      console.log(friends);\n      if (request_friends && request_friends.length) request_friends.map(val => state.request_friends[val.id] = val);\n      if (friends && friends.length) friends.map(val => state.friends[val.id] = val);\n    });\n\n    // 친구요청에 대한 결과\n    builder.addCase(friendAction.requestFriendHandle.fulfilled, (state, action) => {\n      let {\n        sender,\n        response\n      } = action.payload;\n      delete state.request_friends[sender.id];\n      if (response) state.friends[sender.id] = sender;\n    });\n  }\n});\nexport const {\n  friendRequest,\n  friendReqeustHandle,\n  friendOnlineUpdate\n} = friendSlice.actions;\nexport default friendSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","friendAction","initialState","request_friends","friends","friendSlice","name","reducers","friendRequest","state","data","payload","from","id","friendReqeustHandle","friendOnlineUpdate","console","log","who","online","init","current","extraReducers","builder","addCase","getUserAction","fulfilled","action","user","length","map","val","requestFriendHandle","sender","response","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/reducer/friendReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { friendAction } from \"../actions/friendAction\";\r\n\r\ninterface FriendProps {\r\n  request_friends: { [id: number]: User };\r\n  friends: { [id: number]: User };\r\n}\r\n\r\nconst initialState: FriendProps = {\r\n  request_friends: {},\r\n  friends: {},\r\n};\r\n\r\nconst friendSlice = createSlice({\r\n  name: \"friend\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    friendRequest: (state: any, data: any) => {\r\n      state.request_friends[data.payload.from.id] = data.payload.from;\r\n    },\r\n\r\n    friendReqeustHandle: (state: any, data: any) => {\r\n      state.friends[data.payload.id] = data.payload;\r\n    },\r\n\r\n    friendOnlineUpdate: (state: any, data: any) => {\r\n      console.log(data.payload);\r\n      state.friends[data.payload.who.id].online = data.payload.online;\r\n    },\r\n    init: (current) => (current = initialState),\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { request_friends, friends } = action.payload.user;\r\n      console.log(friends);\r\n\r\n      if (request_friends && request_friends.length)\r\n        request_friends.map(\r\n          (val: User) => (state.request_friends[val.id!] = val)\r\n        );\r\n      if (friends && friends.length)\r\n        friends.map((val: User) => (state.friends[val.id!] = val));\r\n    });\r\n\r\n    // 친구요청에 대한 결과\r\n    builder.addCase(\r\n      friendAction.requestFriendHandle.fulfilled,\r\n      (state, action) => {\r\n        let { sender, response } = action.payload;\r\n        delete state.request_friends[sender.id];\r\n        if (response) state.friends[sender.id] = sender;\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nexport const { friendRequest, friendReqeustHandle, friendOnlineUpdate } =\r\n  friendSlice.actions;\r\nexport default friendSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAEA,SAASC,YAAY,QAAQ,yBAAyB;AAOtD,MAAMC,YAAyB,GAAG;EAChCC,eAAe,EAAE,CAAC,CAAC;EACnBC,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAMC,WAAW,GAAGN,WAAW,CAAC;EAC9BO,IAAI,EAAE,QAAQ;EACdJ,YAAY;EAAE;EACdK,QAAQ,EAAE;IACRC,aAAa,EAAEA,CAACC,KAAU,EAAEC,IAAS,KAAK;MACxCD,KAAK,CAACN,eAAe,CAACO,IAAI,CAACC,OAAO,CAACC,IAAI,CAACC,EAAE,CAAC,GAAGH,IAAI,CAACC,OAAO,CAACC,IAAI;IACjE,CAAC;IAEDE,mBAAmB,EAAEA,CAACL,KAAU,EAAEC,IAAS,KAAK;MAC9CD,KAAK,CAACL,OAAO,CAACM,IAAI,CAACC,OAAO,CAACE,EAAE,CAAC,GAAGH,IAAI,CAACC,OAAO;IAC/C,CAAC;IAEDI,kBAAkB,EAAEA,CAACN,KAAU,EAAEC,IAAS,KAAK;MAC7CM,OAAO,CAACC,GAAG,CAACP,IAAI,CAACC,OAAO,CAAC;MACzBF,KAAK,CAACL,OAAO,CAACM,IAAI,CAACC,OAAO,CAACO,GAAG,CAACL,EAAE,CAAC,CAACM,MAAM,GAAGT,IAAI,CAACC,OAAO,CAACQ,MAAM;IACjE,CAAC;IACDC,IAAI,EAAGC,OAAO,IAAMA,OAAO,GAAGnB;EAChC,CAAC;EAED;EACAoB,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACxB,UAAU,CAACyB,aAAa,CAACC,SAAS,EAAE,CAACjB,KAAK,EAAEkB,MAAM,KAAK;MACrE,IAAI;QAAExB,eAAe;QAAEC;MAAQ,CAAC,GAAGuB,MAAM,CAAChB,OAAO,CAACiB,IAAI;MACtDZ,OAAO,CAACC,GAAG,CAACb,OAAO,CAAC;MAEpB,IAAID,eAAe,IAAIA,eAAe,CAAC0B,MAAM,EAC3C1B,eAAe,CAAC2B,GAAG,CAChBC,GAAS,IAAMtB,KAAK,CAACN,eAAe,CAAC4B,GAAG,CAAClB,EAAE,CAAE,GAAGkB,GACnD,CAAC;MACH,IAAI3B,OAAO,IAAIA,OAAO,CAACyB,MAAM,EAC3BzB,OAAO,CAAC0B,GAAG,CAAEC,GAAS,IAAMtB,KAAK,CAACL,OAAO,CAAC2B,GAAG,CAAClB,EAAE,CAAE,GAAGkB,GAAI,CAAC;IAC9D,CAAC,CAAC;;IAEF;IACAR,OAAO,CAACC,OAAO,CACbvB,YAAY,CAAC+B,mBAAmB,CAACN,SAAS,EAC1C,CAACjB,KAAK,EAAEkB,MAAM,KAAK;MACjB,IAAI;QAAEM,MAAM;QAAEC;MAAS,CAAC,GAAGP,MAAM,CAAChB,OAAO;MACzC,OAAOF,KAAK,CAACN,eAAe,CAAC8B,MAAM,CAACpB,EAAE,CAAC;MACvC,IAAIqB,QAAQ,EAAEzB,KAAK,CAACL,OAAO,CAAC6B,MAAM,CAACpB,EAAE,CAAC,GAAGoB,MAAM;IACjD,CACF,CAAC;EACH;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEzB,aAAa;EAAEM,mBAAmB;EAAEC;AAAmB,CAAC,GACrEV,WAAW,CAAC8B,OAAO;AACrB,eAAe9B,WAAW,CAAC+B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}