{"ast":null,"code":"import { EmailError, NicknameError } from \"../types/auth\";\nimport { createFormData } from \"../util/form\";\nimport { auth_service } from \"../service/auth.service\";\n\n// 이메일 형태 검증\nexport const emailFormValid = email => {\n  let result = email.toString().trim().toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n  return !result ? true : false;\n};\n\n// 비밀번호 형태 검증\nexport const passwordFormValid = password => {\n  let result = password.trim().toLowerCase().match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\n  return !result ? true : false;\n};\n\n// 이메일 검증\nexport const emailValidate = async (email, overlap) => {\n  try {\n    if (emailFormValid(email)) throw {\n      type: \"email\",\n      msg: EmailError.EMAIL_FORM_ERROR\n    };\n    let formdata = createFormData({\n      email,\n      overlap\n    });\n    await auth_service.emailOverlap(formdata);\n    return false;\n  } catch (err) {\n    throw err;\n  }\n};\n\n// 닉네임 검정\nexport const nicknameValidate = async nickname => {\n  try {\n    if (nickname.length < 2 || nickname.length > 12) throw {\n      type: \"nickname\",\n      msg: NicknameError.NICKNAME_FORM_ERROR\n    };\n    let formdata = createFormData({\n      nickname\n    });\n    await auth_service.nicknameOverlap(formdata);\n    return false;\n  } catch (err) {\n    throw err;\n  }\n};","map":{"version":3,"names":["EmailError","NicknameError","createFormData","auth_service","emailFormValid","email","result","toString","trim","toLowerCase","match","passwordFormValid","password","emailValidate","overlap","type","msg","EMAIL_FORM_ERROR","formdata","emailOverlap","err","nicknameValidate","nickname","length","NICKNAME_FORM_ERROR","nicknameOverlap"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/validation/auth.ts"],"sourcesContent":["import { Dispatch } from \"react\";\r\nimport { EmailError, PasswordError, NicknameError } from \"../types/auth\";\r\nimport { user_service } from \"../service/user.service\";\r\nimport { createFormData } from \"../util/form\";\r\nimport { auth_service } from \"../service/auth.service\";\r\n\r\n// 이메일 형태 검증\r\nexport const emailFormValid = (email: string) => {\r\n  let result = email\r\n    .toString()\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n  return !result ? true : false;\r\n};\r\n\r\n// 비밀번호 형태 검증\r\nexport const passwordFormValid = (password: string) => {\r\n  let result = password\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\r\n  return !result ? true : false;\r\n};\r\n\r\n// 이메일 검증\r\nexport const emailValidate = async (email: string, overlap: boolean) => {\r\n  try {\r\n    if (emailFormValid(email))\r\n      throw { type: \"email\", msg: EmailError.EMAIL_FORM_ERROR };\r\n    let formdata = createFormData({ email, overlap });\r\n    await auth_service.emailOverlap(formdata);\r\n\r\n    return false;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\n// 닉네임 검정\r\nexport const nicknameValidate = async (nickname: string) => {\r\n  try {\r\n    if (nickname.length < 2 || nickname.length > 12)\r\n      throw { type: \"nickname\", msg: NicknameError.NICKNAME_FORM_ERROR };\r\n    let formdata = createFormData({ nickname });\r\n    await auth_service.nicknameOverlap(formdata);\r\n    return false;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n"],"mappings":"AACA,SAASA,UAAU,EAAiBC,aAAa,QAAQ,eAAe;AAExE,SAASC,cAAc,QAAQ,cAAc;AAC7C,SAASC,YAAY,QAAQ,yBAAyB;;AAEtD;AACA,OAAO,MAAMC,cAAc,GAAIC,KAAa,IAAK;EAC/C,IAAIC,MAAM,GAAGD,KAAK,CACfE,QAAQ,CAAC,CAAC,CACVC,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,wJACF,CAAC;EACH,OAAO,CAACJ,MAAM,GAAG,IAAI,GAAG,KAAK;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMK,iBAAiB,GAAIC,QAAgB,IAAK;EACrD,IAAIN,MAAM,GAAGM,QAAQ,CAClBJ,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,+DAA+D,CAAC;EACzE,OAAO,CAACJ,MAAM,GAAG,IAAI,GAAG,KAAK;AAC/B,CAAC;;AAED;AACA,OAAO,MAAMO,aAAa,GAAG,MAAAA,CAAOR,KAAa,EAAES,OAAgB,KAAK;EACtE,IAAI;IACF,IAAIV,cAAc,CAACC,KAAK,CAAC,EACvB,MAAM;MAAEU,IAAI,EAAE,OAAO;MAAEC,GAAG,EAAEhB,UAAU,CAACiB;IAAiB,CAAC;IAC3D,IAAIC,QAAQ,GAAGhB,cAAc,CAAC;MAAEG,KAAK;MAAES;IAAQ,CAAC,CAAC;IACjD,MAAMX,YAAY,CAACgB,YAAY,CAACD,QAAQ,CAAC;IAEzC,OAAO,KAAK;EACd,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZ,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,QAAgB,IAAK;EAC1D,IAAI;IACF,IAAIA,QAAQ,CAACC,MAAM,GAAG,CAAC,IAAID,QAAQ,CAACC,MAAM,GAAG,EAAE,EAC7C,MAAM;MAAER,IAAI,EAAE,UAAU;MAAEC,GAAG,EAAEf,aAAa,CAACuB;IAAoB,CAAC;IACpE,IAAIN,QAAQ,GAAGhB,cAAc,CAAC;MAAEoB;IAAS,CAAC,CAAC;IAC3C,MAAMnB,YAAY,CAACsB,eAAe,CAACP,QAAQ,CAAC;IAC5C,OAAO,KAAK;EACd,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZ,MAAMA,GAAG;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}