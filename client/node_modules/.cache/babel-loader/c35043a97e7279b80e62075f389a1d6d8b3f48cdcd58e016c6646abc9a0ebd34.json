{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nconst initialState = [];\nconst roomSlice = createSlice({\n  name: \"room\",\n  initialState,\n  // reducer\n  reducers: {\n    inviteRoom: (state, data) => {\n      let room = data.payload;\n      state.push(room);\n    },\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\n    //   let { nickname, online } = data.payload;\n    //   return {\n    //     ...current,\n    //     friends: current.friends.map((val: User) =>\n    //       val.nickname == nickname ? { ...val, online } : val\n    //     ),\n    //   };\n    // },\n    init: current => initialState\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        stream_room\n      } = action.payload.user;\n      if (stream_room && stream_room.length) return stream_room;\n      return state;\n    });\n  }\n});\nexport const {\n  inviteRoom\n} = roomSlice.actions;\nexport default roomSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","roomSlice","name","reducers","inviteRoom","state","data","room","payload","push","init","current","extraReducers","builder","addCase","getUserAction","fulfilled","action","stream_room","user","length","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/reducer/roomReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { Room } from \"../../types/room\";\r\nimport { roomAction } from \"../actions/roomAction\";\r\n\r\nconst initialState: Room[] = [];\r\n\r\nconst roomSlice = createSlice({\r\n  name: \"room\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    inviteRoom: (state: any, data: any) => {\r\n      let room = data.payload;\r\n      state.push(room);\r\n    },\r\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\r\n    //   let { nickname, online } = data.payload;\r\n    //   return {\r\n    //     ...current,\r\n    //     friends: current.friends.map((val: User) =>\r\n    //       val.nickname == nickname ? { ...val, online } : val\r\n    //     ),\r\n    //   };\r\n    // },\r\n    init: (current) => initialState,\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { stream_room } = action.payload.user;\r\n\r\n      if (stream_room && stream_room.length) return stream_room;\r\n      return state;\r\n    });\r\n  },\r\n});\r\n\r\nexport const { inviteRoom } = roomSlice.actions;\r\nexport default roomSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAKA,MAAMC,YAAoB,GAAG,EAAE;AAE/B,MAAMC,SAAS,GAAGH,WAAW,CAAC;EAC5BI,IAAI,EAAE,MAAM;EACZF,YAAY;EAAE;EACdG,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAU,EAAEC,IAAS,KAAK;MACrC,IAAIC,IAAI,GAAGD,IAAI,CAACE,OAAO;MACvBH,KAAK,CAACI,IAAI,CAACF,IAAI,CAAC;IAClB,CAAC;IACD;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAG,IAAI,EAAGC,OAAO,IAAKX;EACrB,CAAC;EAED;EACAY,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACf,UAAU,CAACgB,aAAa,CAACC,SAAS,EAAE,CAACX,KAAK,EAAEY,MAAM,KAAK;MACrE,IAAI;QAAEC;MAAY,CAAC,GAAGD,MAAM,CAACT,OAAO,CAACW,IAAI;MAEzC,IAAID,WAAW,IAAIA,WAAW,CAACE,MAAM,EAAE,OAAOF,WAAW;MACzD,OAAOb,KAAK;IACd,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAED;AAAW,CAAC,GAAGH,SAAS,CAACoB,OAAO;AAC/C,eAAepB,SAAS,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}