{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nconst initialState = {\n  id: 0,\n  nickname: \"\",\n  profile_img: \"\",\n  email: \"\"\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // reducer\n  reducers: {\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\n    //   let { nickname, online } = data.payload;\n    //   return {\n    //     ...current,\n    //     friends: current.friends.map((val: User) =>\n    //       val.nickname == nickname ? { ...val, online } : val\n    //     ),\n    //   };\n    // },\n    // insertReceiver: (current: any, data: PayloadAction<User>) => {\n    //   let { nickname, profile_img, online } = data.payload;\n    //   return { ...current, friends: [...current.friends, data.payload] };\n    // },\n    // userInit: (current: any) => (current = initialState),\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        id,\n        email,\n        nickname,\n        profile_img\n      } = action.payload;\n      state.id = id;\n      state.email = email;\n      state.profile_img = profile_img;\n      state.nickname = nickname;\n    });\n\n    // 친구요청에 대한 결과\n    // builder.addCase(\n    //   userAction.requestFriendHandle.fulfilled,\n    //   (state, action) => {\n    //     let { sender, msg } = action.payload;\n\n    //     state.request_friends = state.request_friends?.filter((val) => {\n    //       if (val.nickname == sender.nickname) state.friends?.push(sender);\n    //       return val.nickname != sender.nickname;\n    //     });\n\n    //     alert(msg);\n    //     return;\n    //   }\n    // );\n  }\n});\nexport const {\n  userInit\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","id","nickname","profile_img","email","userSlice","name","reducers","extraReducers","builder","addCase","getUserAction","fulfilled","state","action","payload","userInit","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/reducer/userReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { Room } from \"../../types/room\";\r\n\r\nconst initialState: User = {\r\n  id: 0,\r\n  nickname: \"\",\r\n  profile_img: \"\",\r\n  email: \"\",\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\r\n    //   let { nickname, online } = data.payload;\r\n    //   return {\r\n    //     ...current,\r\n    //     friends: current.friends.map((val: User) =>\r\n    //       val.nickname == nickname ? { ...val, online } : val\r\n    //     ),\r\n    //   };\r\n    // },\r\n    // insertReceiver: (current: any, data: PayloadAction<User>) => {\r\n    //   let { nickname, profile_img, online } = data.payload;\r\n    //   return { ...current, friends: [...current.friends, data.payload] };\r\n    // },\r\n    // userInit: (current: any) => (current = initialState),\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { id, email, nickname, profile_img } = action.payload;\r\n\r\n      state.id = id;\r\n      state.email = email;\r\n      state.profile_img = profile_img;\r\n      state.nickname = nickname;\r\n    });\r\n\r\n    // 친구요청에 대한 결과\r\n    // builder.addCase(\r\n    //   userAction.requestFriendHandle.fulfilled,\r\n    //   (state, action) => {\r\n    //     let { sender, msg } = action.payload;\r\n\r\n    //     state.request_friends = state.request_friends?.filter((val) => {\r\n    //       if (val.nickname == sender.nickname) state.friends?.push(sender);\r\n    //       return val.nickname != sender.nickname;\r\n    //     });\r\n\r\n    //     alert(msg);\r\n    //     return;\r\n    //   }\r\n    // );\r\n  },\r\n});\r\n\r\nexport const { userInit } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAIA,MAAMC,YAAkB,GAAG;EACzBC,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE,EAAE;EACfC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,SAAS,GAAGP,WAAW,CAAC;EAC5BQ,IAAI,EAAE,MAAM;EACZN,YAAY;EAAE;EACdO,QAAQ,EAAE;IACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA,CACD;EAED;EACAC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACX,UAAU,CAACY,aAAa,CAACC,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrE,IAAI;QAAEb,EAAE;QAAEG,KAAK;QAAEF,QAAQ;QAAEC;MAAY,CAAC,GAAGW,MAAM,CAACC,OAAO;MAEzDF,KAAK,CAACZ,EAAE,GAAGA,EAAE;MACbY,KAAK,CAACT,KAAK,GAAGA,KAAK;MACnBS,KAAK,CAACV,WAAW,GAAGA,WAAW;MAC/BU,KAAK,CAACX,QAAQ,GAAGA,QAAQ;IAC3B,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEc;AAAS,CAAC,GAAGX,SAAS,CAACY,OAAO;AAC7C,eAAeZ,SAAS,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}