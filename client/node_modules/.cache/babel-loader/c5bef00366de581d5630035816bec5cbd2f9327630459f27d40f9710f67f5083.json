{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nconst initialState = {\n  id: 0,\n  nickname: \"\",\n  profile_img: \"\",\n  friends: [],\n  email: \"\",\n  request_friends: []\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // reducer\n  reducers: {},\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        id,\n        email,\n        nickname,\n        profile_img,\n        request_friend_list,\n        friends\n      } = action.payload;\n      state.id = id;\n      state.email = email;\n      state.profile_img = profile_img;\n      state.nickname = nickname;\n      if (request_friend_list && request_friend_list.length) state.request_friends = request_friend_list.map(val => val);\n      if (friends && friends.length) state.friends = friends.map(val => val);\n    });\n    // 친구요청에 대한 결과\n    builder.addCase(userAction.requestFriendHandle.fulfilled, (state, action) => {\n      var _state$request_friend;\n      let {\n        result,\n        sender,\n        msg\n      } = action.payload;\n      state.request_friends = (_state$request_friend = state.request_friends) === null || _state$request_friend === void 0 ? void 0 : _state$request_friend.filter(val => {\n        var _state$friends;\n        if (val.nickname == sender) (_state$friends = state.friends) === null || _state$friends === void 0 ? void 0 : _state$friends.push(val);\n        return val.nickname != sender;\n      });\n      alert(msg);\n      return;\n    });\n    builder.addCase(userAction.friendOnline.fulfilled, (state, action) => {\n      console.log(action.payload);\n    });\n  }\n});\n\n// export const { getUser } = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","id","nickname","profile_img","friends","email","request_friends","userSlice","name","reducers","extraReducers","builder","addCase","getUserAction","fulfilled","state","action","request_friend_list","payload","length","map","val","requestFriendHandle","_state$request_friend","result","sender","msg","filter","_state$friends","push","alert","friendOnline","console","log","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/reducer/userReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { isSwitchStatement } from \"typescript\";\r\n\r\ninterface userReducer {\r\n  // getUser(state: User, info: PayloadAction<User>): void;\r\n  //   createUser(state: User, info: PayloadAction<string>): void;\r\n  //   updateUser: (state: User, info: User) => void;\r\n  //   deleteUser: (state: User, id: string) => void;\r\n}\r\n\r\nconst initialState: User = {\r\n  id: 0,\r\n  nickname: \"\",\r\n  profile_img: \"\",\r\n  friends: [],\r\n  email: \"\",\r\n  request_friends: [],\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState, // reducer\r\n  reducers: {} satisfies userReducer, // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { id, email, nickname, profile_img, request_friend_list, friends } =\r\n        action.payload;\r\n\r\n      state.id = id;\r\n      state.email = email;\r\n      state.profile_img = profile_img;\r\n      state.nickname = nickname;\r\n\r\n      if (request_friend_list && request_friend_list.length)\r\n        state.request_friends = request_friend_list.map((val: User) => val);\r\n      if (friends && friends.length)\r\n        state.friends = friends.map((val: User) => val);\r\n    });\r\n    // 친구요청에 대한 결과\r\n    builder.addCase(\r\n      userAction.requestFriendHandle.fulfilled,\r\n      (state, action) => {\r\n        let { result, sender, msg } = action.payload;\r\n\r\n        state.request_friends = state.request_friends?.filter((val) => {\r\n          if (val.nickname == sender) state.friends?.push(val);\r\n          return val.nickname != sender;\r\n        });\r\n\r\n        alert(msg);\r\n        return;\r\n      }\r\n    );\r\n    builder.addCase(userAction.friendOnline.fulfilled, (state, action) => {\r\n      console.log(action.payload);\r\n    });\r\n  },\r\n});\r\n\r\n// export const { getUser } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAWA,MAAMC,YAAkB,GAAG;EACzBC,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE,EAAE;EACfC,OAAO,EAAE,EAAE;EACXC,KAAK,EAAE,EAAE;EACTC,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,SAAS,GAAGT,WAAW,CAAC;EAC5BU,IAAI,EAAE,MAAM;EACZR,YAAY;EAAE;EACdS,QAAQ,EAAE,CAAC,CAAuB;EAAE;EACpCC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACb,UAAU,CAACc,aAAa,CAACC,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrE,IAAI;QAAEf,EAAE;QAAEI,KAAK;QAAEH,QAAQ;QAAEC,WAAW;QAAEc,mBAAmB;QAAEb;MAAQ,CAAC,GACpEY,MAAM,CAACE,OAAO;MAEhBH,KAAK,CAACd,EAAE,GAAGA,EAAE;MACbc,KAAK,CAACV,KAAK,GAAGA,KAAK;MACnBU,KAAK,CAACZ,WAAW,GAAGA,WAAW;MAC/BY,KAAK,CAACb,QAAQ,GAAGA,QAAQ;MAEzB,IAAIe,mBAAmB,IAAIA,mBAAmB,CAACE,MAAM,EACnDJ,KAAK,CAACT,eAAe,GAAGW,mBAAmB,CAACG,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;MACrE,IAAIjB,OAAO,IAAIA,OAAO,CAACe,MAAM,EAC3BJ,KAAK,CAACX,OAAO,GAAGA,OAAO,CAACgB,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;IACnD,CAAC,CAAC;IACF;IACAV,OAAO,CAACC,OAAO,CACbb,UAAU,CAACuB,mBAAmB,CAACR,SAAS,EACxC,CAACC,KAAK,EAAEC,MAAM,KAAK;MAAA,IAAAO,qBAAA;MACjB,IAAI;QAAEC,MAAM;QAAEC,MAAM;QAAEC;MAAI,CAAC,GAAGV,MAAM,CAACE,OAAO;MAE5CH,KAAK,CAACT,eAAe,IAAAiB,qBAAA,GAAGR,KAAK,CAACT,eAAe,cAAAiB,qBAAA,uBAArBA,qBAAA,CAAuBI,MAAM,CAAEN,GAAG,IAAK;QAAA,IAAAO,cAAA;QAC7D,IAAIP,GAAG,CAACnB,QAAQ,IAAIuB,MAAM,EAAE,CAAAG,cAAA,GAAAb,KAAK,CAACX,OAAO,cAAAwB,cAAA,uBAAbA,cAAA,CAAeC,IAAI,CAACR,GAAG,CAAC;QACpD,OAAOA,GAAG,CAACnB,QAAQ,IAAIuB,MAAM;MAC/B,CAAC,CAAC;MAEFK,KAAK,CAACJ,GAAG,CAAC;MACV;IACF,CACF,CAAC;IACDf,OAAO,CAACC,OAAO,CAACb,UAAU,CAACgC,YAAY,CAACjB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACpEgB,OAAO,CAACC,GAAG,CAACjB,MAAM,CAACE,OAAO,CAAC;IAC7B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA,eAAeX,SAAS,CAAC2B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}