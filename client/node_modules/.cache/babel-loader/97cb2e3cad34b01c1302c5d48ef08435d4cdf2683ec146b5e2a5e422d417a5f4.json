{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashh1\\\\Desktop\\\\project\\\\PlayWithFriends\\\\client\\\\src\\\\page\\\\streamroom.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport \"../css/room/streamRoom.css\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { socketClient } from \"../util/socket\";\nimport { stream_service } from \"../service/streamservice\";\nimport { emitter } from \"../util/event\";\nimport { useSelector } from \"react-redux\";\n\n// type\n\n// component\nimport { Menu } from \"../components/room/menu/menu\";\nimport { RoomMain } from \"../components/room/main/roomMain\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InvitationLi = ({\n  user\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    className: \"invitation_li\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"invitation_profile_box\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: user.profile_img\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"invitation_nickname\",\n        children: user.nickname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"\\uCD08\\uB300\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n\n// 친구 관련 모달\n_c = InvitationLi;\nexport const Invitation = ({\n  user,\n  show,\n  participants\n}) => {\n  var _user$friends;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"invitation_modal\",\n    style: {\n      display: show ? \"flex\" : \"none\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"modal_header\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => emitter.emit(\"modal\", {\n          type\n        }),\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"invitation_list\",\n      children: (_user$friends = user.friends) !== null && _user$friends !== void 0 && _user$friends.length ? user.friends.map(val => /*#__PURE__*/_jsxDEV(InvitationLi, {\n        user: val\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 39\n      }, this)) : \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_c2 = Invitation;\nexport const StreamRoom = () => {\n  _s();\n  let user = useSelector(state => state.user);\n  let {\n    id\n  } = useParams();\n  let navigate = useNavigate();\n\n  // ref\n  let peerConnects = useRef({});\n\n  // state\n  let [room, setRoom] = useState(null); //방 정보\n  let [stream, setStream] = useState(null);\n  let [connects, setConnects] = useState({});\n  let [invitationModal, setInvitationModal] = useState(false);\n\n  // 방 입장/퇴장 관련 --------------------------\n  let joinRoomHandler = who => {\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\n  };\n\n  // room leave 처리\n  let leaveRoomHandler = who => {\n    peerConnects.current[who].pc.close();\n    delete peerConnects.current[who];\n    setConnects(c => {\n      const copy = {\n        ...c\n      };\n      delete copy[who];\n      return copy;\n    });\n  };\n\n  // 비디오/오디오 상태 ----------------------------\n\n  // 상대 화면 on/off\n  let trackHandler = (to, type, state) => {\n    setConnects(c => {\n      let stInfo = c[to];\n      type == \"audio\" ? stInfo.audio = state : stInfo.video = state;\n      return {\n        ...c,\n        [to]: stInfo\n      };\n    });\n  };\n\n  // p2p연결 관련 --------------------------------\n  // connect 연결\n  let peerConnect = async (to, stream) => {\n    let pc = new RTCPeerConnection();\n    const channel = pc.createDataChannel(\"chat\");\n    stream === null || stream === void 0 ? void 0 : stream.getTracks().forEach(track => {\n      pc.addTrack(track, stream);\n    });\n\n    // signaling event\n    pc.onicecandidate = e => {\n      if (e.candidate) socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\n    };\n    pc.ontrack = e => {\n      let kind = e.track.kind;\n      // peerConnects.current[to] = { pc, channel };\n      setConnects(c => {\n        let stream = new MediaStream();\n        let audio = true;\n        let video = true;\n\n        // 만약에 event track이 stream에 존재하지 않으면 추가해줌\n        if (!stream.getTracks().includes(e.track)) stream.addTrack(e.track);\n        // 미디어 kind타입에 활성화 상태 알려줌\n        kind == \"audio\" ? audio = e.track.enabled : video = e.track.enabled;\n        return {\n          ...c,\n          [to]: {\n            pc,\n            channel,\n            stream,\n            video,\n            audio\n          }\n        };\n      });\n    };\n\n    // channel event\n    channel.onmessage = e => {\n      emitter.emit(\"menu chat\", JSON.parse(e.data));\n    };\n\n    // offer 부분\n    let offer = await pc.createOffer();\n    await pc.setLocalDescription(offer);\n    socketClient.emit(\"offer\", user.nickname, to, offer);\n    peerConnects.current[to] = {\n      pc,\n      channel\n    };\n  };\n\n  // 연결 시작\n  let start = async () => {\n    try {\n      var _room$participants;\n      let stream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n      setStream(stream);\n\n      // 트랙을 더해줌\n      if (room) (_room$participants = room.participants) === null || _room$participants === void 0 ? void 0 : _room$participants.map(async val => {\n        if (val.nickname !== user.nickname) {\n          await peerConnect(val.nickname, stream);\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // offer처리\n  let offerHandler = async (from, offer) => {\n    console.log(`offer from ${from}`);\n    if (!peerConnects.current[from]) await peerConnect(from);\n    try {\n      var _peerConnects$current, _peerConnects$current2;\n      await ((_peerConnects$current = peerConnects.current[from].pc) === null || _peerConnects$current === void 0 ? void 0 : _peerConnects$current.setRemoteDescription(new RTCSessionDescription(offer)));\n      if (((_peerConnects$current2 = peerConnects.current[from]) === null || _peerConnects$current2 === void 0 ? void 0 : _peerConnects$current2.pc.signalingState) == \"have-remote-offer\" && user.nickname !== \"\") {\n        var _peerConnects$current3, _peerConnects$current4;\n        const answer = await ((_peerConnects$current3 = peerConnects.current[from]) === null || _peerConnects$current3 === void 0 ? void 0 : _peerConnects$current3.pc.createAnswer());\n        await ((_peerConnects$current4 = peerConnects.current[from]) === null || _peerConnects$current4 === void 0 ? void 0 : _peerConnects$current4.pc.setLocalDescription(answer));\n        socketClient.emit(\"answer\", user.nickname, from, answer);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // answer 처리\n  let answerHandler = async (from, answer) => {\n    try {\n      var _peerConnects$current5, _peerConnects$current6;\n      if (!((_peerConnects$current5 = peerConnects.current[from]) !== null && _peerConnects$current5 !== void 0 && _peerConnects$current5.pc.currentRemoteDescription)) await ((_peerConnects$current6 = peerConnects.current[from]) === null || _peerConnects$current6 === void 0 ? void 0 : _peerConnects$current6.pc.setRemoteDescription(answer));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // candidate처리\n  let candidateHandler = async (from, candidate) => {\n    // console.log(`candidate from ${from}`);\n    if (!peerConnects.current[from]) await peerConnect(from);\n    try {\n      var _peerConnects$current7;\n      if ((_peerConnects$current7 = peerConnects.current[from].pc) !== null && _peerConnects$current7 !== void 0 && _peerConnects$current7.remoteDescription) {\n        var _peerConnects$current8;\n        const iceCandidate = new RTCIceCandidate(candidate);\n        await ((_peerConnects$current8 = peerConnects.current[from]) === null || _peerConnects$current8 === void 0 ? void 0 : _peerConnects$current8.pc.addIceCandidate(iceCandidate));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // useEffect -----------------------------\n  // 시작시 방 정보 얻어옴\n  useEffect(() => {\n    let data = async () => {\n      try {\n        let room = await stream_service.getStreamRoomData(id);\n        setRoom(room.room);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    data();\n  }, []);\n\n  // 룸정보가 오면 start시작\n  useEffect(() => {\n    if (room && user.id) {\n      let participants = room.participants.map(val => val);\n      if (!participants.find(val => val.id === user.id)) {\n        alert(\"참가자가 아닙니다.\");\n        navigate(\"/\");\n        return;\n      }\n      participants.map(val => {\n        if (val.nickname !== user.nickname) {\n          peerConnect(val.nickname);\n        }\n      });\n      start();\n    }\n  }, [room]);\n\n  // 소켓 연결\n  useEffect(() => {\n    socketClient.emit(\"join\", `room${id}`);\n    socketClient.on(\"other join\", joinRoomHandler);\n    socketClient.on(\"offer\", offerHandler); //signaling offer\n    socketClient.on(\"answer\", answerHandler); //signaling answer\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\n    socketClient.on(\"toggle track\", trackHandler);\n    return () => {\n      socketClient.on(\"other join\", joinRoomHandler);\n      socketClient.off(\"offer\", offerHandler);\n      socketClient.off(\"answer\", answerHandler);\n      socketClient.off(\"candidate\", candidateHandler);\n      socketClient.off(\"leave room\", leaveRoomHandler);\n      socketClient.off(\"toggle track\", trackHandler);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page streamRoom_page\",\n    children: [/*#__PURE__*/_jsxDEV(RoomMain, {\n      user: user,\n      stream: stream,\n      connects: connects\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {\n      user: user,\n      connects: connects,\n      participants: room === null || room === void 0 ? void 0 : room.participants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 279,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamRoom, \"fvEYR+GlptzXeuHQP6zifoUIdlw=\", false, function () {\n  return [useSelector, useParams, useNavigate];\n});\n_c3 = StreamRoom;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"InvitationLi\");\n$RefreshReg$(_c2, \"Invitation\");\n$RefreshReg$(_c3, \"StreamRoom\");","map":{"version":3,"names":["useEffect","useRef","useState","useNavigate","useParams","socketClient","stream_service","emitter","useSelector","Menu","RoomMain","jsxDEV","_jsxDEV","InvitationLi","user","className","children","src","profile_img","fileName","_jsxFileName","lineNumber","columnNumber","nickname","_c","Invitation","show","participants","_user$friends","style","display","onClick","emit","type","friends","length","map","val","_c2","StreamRoom","_s","state","id","navigate","peerConnects","room","setRoom","stream","setStream","connects","setConnects","invitationModal","setInvitationModal","joinRoomHandler","who","leaveRoomHandler","current","pc","close","c","copy","trackHandler","to","stInfo","audio","video","peerConnect","RTCPeerConnection","channel","createDataChannel","getTracks","forEach","track","addTrack","onicecandidate","e","candidate","ontrack","kind","MediaStream","includes","enabled","onmessage","JSON","parse","data","offer","createOffer","setLocalDescription","start","_room$participants","navigator","mediaDevices","getUserMedia","err","console","log","offerHandler","from","_peerConnects$current","_peerConnects$current2","setRemoteDescription","RTCSessionDescription","signalingState","_peerConnects$current3","_peerConnects$current4","answer","createAnswer","answerHandler","_peerConnects$current5","_peerConnects$current6","currentRemoteDescription","candidateHandler","_peerConnects$current7","remoteDescription","_peerConnects$current8","iceCandidate","RTCIceCandidate","addIceCandidate","getStreamRoomData","find","alert","on","off","_c3","$RefreshReg$"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/page/streamroom.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport \"../css/room/streamRoom.css\";\r\nimport { Form, useNavigate, useParams } from \"react-router-dom\";\r\nimport { socketClient } from \"../util/socket\";\r\nimport { stream_service } from \"../service/streamservice\";\r\nimport { emitter } from \"../util/event\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../context/store\";\r\n\r\n// type\r\nimport { Room } from \"../types/room\";\r\nimport { User } from \"../types/user\";\r\nimport { PeerConnects } from \"../types/room\";\r\n\r\n// component\r\nimport { Menu } from \"../components/room/menu/menu\";\r\nimport { RoomMain } from \"../components/room/main/roomMain\";\r\n\r\ninterface InvitationProps {\r\n  user: User;\r\n  show: boolean;\r\n  participants: User[];\r\n}\r\n\r\nconst InvitationLi = ({ user }: { [user: string]: User }) => {\r\n  return (\r\n    <li className=\"invitation_li\">\r\n      {/* 유저 정보 */}\r\n      <div>\r\n        <span className=\"invitation_profile_box\">\r\n          <img src={user.profile_img} />\r\n        </span>\r\n        <span className=\"invitation_nickname\">{user.nickname}</span>\r\n      </div>\r\n      {/* 초대버튼 */}\r\n      <button>초대</button>\r\n    </li>\r\n  );\r\n};\r\n\r\n// 친구 관련 모달\r\nexport const Invitation = ({ user, show, participants }: InvitationProps) => {\r\n  return (\r\n    <div\r\n      className=\"invitation_modal\"\r\n      style={{ display: show ? \"flex\" : \"none\" }}\r\n    >\r\n      <header className=\"modal_header\">\r\n        <button onClick={() => emitter.emit(\"modal\", { type })}>X</button>\r\n      </header>\r\n\r\n      <ul className=\"invitation_list\">\r\n        {user.friends?.length\r\n          ? user.friends.map((val) => <InvitationLi user={val} />)\r\n          : \"\"}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const StreamRoom = () => {\r\n  let user = useSelector((state: RootState) => state.user);\r\n  let { id } = useParams();\r\n  let navigate = useNavigate();\r\n\r\n  // ref\r\n  let peerConnects = useRef<{\r\n    [nickname: string]: { pc: RTCPeerConnection; channel: RTCDataChannel };\r\n  }>({});\r\n\r\n  // state\r\n  let [room, setRoom] = useState<Room | null>(null); //방 정보\r\n  let [stream, setStream] = useState<MediaStream | null>(null);\r\n  let [connects, setConnects] = useState<PeerConnects>({});\r\n  let [invitationModal, setInvitationModal] = useState<boolean>(false);\r\n\r\n  // 방 입장/퇴장 관련 --------------------------\r\n  let joinRoomHandler = (who: string) => {\r\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\r\n  };\r\n\r\n  // room leave 처리\r\n  let leaveRoomHandler = (who: string) => {\r\n    peerConnects.current[who].pc.close();\r\n    delete peerConnects.current[who];\r\n    setConnects((c) => {\r\n      const copy = { ...c };\r\n      delete copy[who];\r\n      return copy;\r\n    });\r\n  };\r\n\r\n  // 비디오/오디오 상태 ----------------------------\r\n\r\n  // 상대 화면 on/off\r\n  let trackHandler = (to: string, type: \"audio\" | \"video\", state: boolean) => {\r\n    setConnects((c) => {\r\n      let stInfo = c[to];\r\n\r\n      type == \"audio\" ? (stInfo.audio = state) : (stInfo.video = state);\r\n\r\n      return { ...c, [to]: stInfo };\r\n    });\r\n  };\r\n\r\n  // p2p연결 관련 --------------------------------\r\n  // connect 연결\r\n  let peerConnect = async (to: string, stream?: MediaStream) => {\r\n    let pc = new RTCPeerConnection();\r\n    const channel = pc.createDataChannel(\"chat\");\r\n\r\n    stream?.getTracks().forEach((track) => {\r\n      pc.addTrack(track, stream);\r\n    });\r\n\r\n    // signaling event\r\n    pc.onicecandidate = (e) => {\r\n      if (e.candidate)\r\n        socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\r\n    };\r\n\r\n    pc.ontrack = (e) => {\r\n      let kind = e.track.kind;\r\n      // peerConnects.current[to] = { pc, channel };\r\n      setConnects((c) => {\r\n        let stream = new MediaStream();\r\n        let audio = true;\r\n        let video = true;\r\n\r\n        // 만약에 event track이 stream에 존재하지 않으면 추가해줌\r\n        if (!stream.getTracks().includes(e.track)) stream.addTrack(e.track);\r\n        // 미디어 kind타입에 활성화 상태 알려줌\r\n        kind == \"audio\" ? (audio = e.track.enabled) : (video = e.track.enabled);\r\n\r\n        return {\r\n          ...c,\r\n          [to]: { pc, channel, stream, video, audio },\r\n        };\r\n      });\r\n    };\r\n\r\n    // channel event\r\n    channel.onmessage = (e) => {\r\n      emitter.emit(\"menu chat\", JSON.parse(e.data));\r\n    };\r\n\r\n    // offer 부분\r\n    let offer = await pc.createOffer();\r\n    await pc.setLocalDescription(offer!);\r\n    socketClient.emit(\"offer\", user.nickname, to, offer);\r\n\r\n    peerConnects.current[to] = { pc, channel };\r\n  };\r\n\r\n  // 연결 시작\r\n  let start = async () => {\r\n    try {\r\n      let stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      });\r\n      setStream(stream);\r\n\r\n      // 트랙을 더해줌\r\n      if (room)\r\n        room.participants?.map(async (val: any) => {\r\n          if (val.nickname !== user.nickname) {\r\n            await peerConnect(val.nickname, stream);\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // offer처리\r\n  let offerHandler = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    console.log(`offer from ${from}`);\r\n    if (!peerConnects.current[from]) await peerConnect(from);\r\n    try {\r\n      await peerConnects.current[from].pc?.setRemoteDescription(\r\n        new RTCSessionDescription(offer)\r\n      );\r\n\r\n      if (\r\n        peerConnects.current[from]?.pc.signalingState == \"have-remote-offer\" &&\r\n        user.nickname !== \"\"\r\n      ) {\r\n        const answer = await peerConnects.current[from]?.pc.createAnswer();\r\n        await peerConnects.current[from]?.pc.setLocalDescription(answer!);\r\n        socketClient.emit(\"answer\", user.nickname, from, answer);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // answer 처리\r\n  let answerHandler = async (\r\n    from: string,\r\n    answer: RTCSessionDescriptionInit\r\n  ) => {\r\n    try {\r\n      if (!peerConnects.current[from]?.pc.currentRemoteDescription)\r\n        await peerConnects.current[from]?.pc.setRemoteDescription(answer!);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // candidate처리\r\n  let candidateHandler = async (from: string, candidate: RTCIceCandidate) => {\r\n    // console.log(`candidate from ${from}`);\r\n    if (!peerConnects.current[from]) await peerConnect(from);\r\n    try {\r\n      if (peerConnects.current[from].pc?.remoteDescription) {\r\n        const iceCandidate = new RTCIceCandidate(candidate);\r\n        await peerConnects.current[from]?.pc.addIceCandidate(iceCandidate);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // useEffect -----------------------------\r\n  // 시작시 방 정보 얻어옴\r\n  useEffect(() => {\r\n    let data = async () => {\r\n      try {\r\n        let room = await stream_service.getStreamRoomData(id!);\r\n        setRoom(room.room);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    data();\r\n  }, []);\r\n\r\n  // 룸정보가 오면 start시작\r\n  useEffect(() => {\r\n    if (room && user.id) {\r\n      let participants = (room.participants as User[]).map((val) => val);\r\n      if (!participants.find((val) => val.id === user.id)) {\r\n        alert(\"참가자가 아닙니다.\");\r\n        navigate(\"/\");\r\n        return;\r\n      }\r\n      participants.map((val: any) => {\r\n        if (val.nickname !== user.nickname) {\r\n          peerConnect(val.nickname);\r\n        }\r\n      });\r\n      start();\r\n    }\r\n  }, [room]);\r\n\r\n  // 소켓 연결\r\n  useEffect(() => {\r\n    socketClient.emit(\"join\", `room${id}`);\r\n\r\n    socketClient.on(\"other join\", joinRoomHandler);\r\n    socketClient.on(\"offer\", offerHandler); //signaling offer\r\n    socketClient.on(\"answer\", answerHandler); //signaling answer\r\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\r\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\r\n    socketClient.on(\"toggle track\", trackHandler);\r\n\r\n    return () => {\r\n      socketClient.on(\"other join\", joinRoomHandler);\r\n      socketClient.off(\"offer\", offerHandler);\r\n      socketClient.off(\"answer\", answerHandler);\r\n      socketClient.off(\"candidate\", candidateHandler);\r\n      socketClient.off(\"leave room\", leaveRoomHandler);\r\n      socketClient.off(\"toggle track\", trackHandler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"page streamRoom_page\">\r\n      {/* main */}\r\n      <RoomMain user={user} stream={stream} connects={connects} />\r\n\r\n      {/* modal */}\r\n\r\n      {/* menu */}\r\n      <Menu user={user} connects={connects} participants={room?.participants} />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}