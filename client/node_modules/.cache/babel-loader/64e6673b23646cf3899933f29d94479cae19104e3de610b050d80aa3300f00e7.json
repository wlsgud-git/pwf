{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashh1\\\\Desktop\\\\project\\\\PlayWithFriends\\\\client\\\\src\\\\page\\\\streamroom.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport \"../css/streamRoom.css\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { socketClient } from \"../util/socket\";\nimport { stream_service } from \"../service/streamservice\";\nimport { useSelector } from \"react-redux\";\n\n// type\n\n// component\n\nimport { Menu } from \"../components/room/menu/menu\";\nimport { RoomMain } from \"../components/room/main/roomMain\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const StreamRoom = () => {\n  _s();\n  let user = useSelector(state => state.user);\n  let {\n    id\n  } = useParams();\n  let navigate = useNavigate();\n  let roomId = `room${id}`;\n\n  // ref\n  let localRef = useRef(null);\n  let localStreamRef = useRef(null);\n  let peerConnects = useRef({});\n  let dataChannelsRef = useRef({});\n\n  // state\n  let [connectList, setConnectList] = useState({});\n  let [room, setRoom] = useState({});\n  let [menu, setMenu] = useState({\n    state: false,\n    type: \"participants\"\n  }); //메뉴\n\n  // 방 입장/퇴장 관련 --------------------------\n  let joinRoomHandler = who => {\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\n  };\n\n  // room leave 처리\n  let leaveRoomHandler = who => {\n    delete peerConnects.current[who];\n    // setConnectList((c) => c.filter((val) => val.from !== who));\n  };\n\n  // 방을 떠남\n  let leaveRoom = () => {\n    if (user.nickname !== \"\") {\n      socketClient.emit(\"leave room\", user.nickname, roomId);\n      navigate(\"/\");\n    }\n  };\n\n  // 비디오/오디오 상태 ----------------------------\n  // 화면 on/off\n\n  // 상대 화면 on/off\n  let trackHandler = (to, type, state) => {\n    setConnectList(c => {\n      let stInfo = c[to];\n      type == \"audio\" ? stInfo.audio = state : stInfo.video = state;\n      return {\n        ...c,\n        [to]: stInfo\n      };\n    });\n  };\n\n  // p2p연결 관련 --------------------------------\n  // connect 연결\n  let peerConnect = async (to, stream) => {\n    let pc = new RTCPeerConnection();\n    const channel = pc.createDataChannel(\"chat\");\n    stream === null || stream === void 0 ? void 0 : stream.getTracks().forEach(track => {\n      pc.addTrack(track, stream);\n    });\n    pc.onicecandidate = e => {\n      if (e.candidate) socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\n    };\n    pc.ontrack = e => {\n      let kind = e.track.kind;\n      setConnectList(c => {\n        let stream = c[to];\n        if (!stream.stream) stream.stream = new MediaStream();\n        if (!stream.stream.getTracks().includes(e.track)) stream.stream.addTrack(e.track);\n        kind == \"audio\" ? stream.audio = e.track.enabled : stream.video = e.track.enabled;\n        return {\n          ...c,\n          [to]: stream\n        };\n      });\n    };\n    channel.onmessage = e => {\n      console.log(`send to ${to}`, e);\n    };\n    channel.onopen = () => {\n      console.log(`DataChannel open with ${to}`);\n    };\n    let offer = await pc.createOffer();\n    await pc.setLocalDescription(offer);\n    socketClient.emit(\"offer\", user.nickname, to, offer);\n    peerConnects.current[to] = pc;\n    dataChannelsRef.current[to] = channel;\n  };\n\n  // 연결 시작\n  let start = async () => {\n    try {\n      var _room$participants;\n      let stream = await navigator.mediaDevices.getUserMedia({\n        video: false,\n        audio: false\n      });\n      localRef.current.srcObject = stream;\n      localStreamRef.current = stream;\n\n      // 트랙을 더해줌\n      (_room$participants = room.participants) === null || _room$participants === void 0 ? void 0 : _room$participants.map(async val => {\n        if (val.nickname !== user.nickname) await peerConnect(val.nickname, stream);\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // offer처리\n  let offerHandler = async (from, offer) => {\n    try {\n      var _peerConnects$current, _peerConnects$current2;\n      if (!peerConnects.current[from]) peerConnect(from);\n      await ((_peerConnects$current = peerConnects.current[from]) === null || _peerConnects$current === void 0 ? void 0 : _peerConnects$current.setRemoteDescription(new RTCSessionDescription(offer)));\n      if (((_peerConnects$current2 = peerConnects.current[from]) === null || _peerConnects$current2 === void 0 ? void 0 : _peerConnects$current2.signalingState) == \"have-remote-offer\" && user.nickname !== \"\") {\n        var _peerConnects$current3, _peerConnects$current4;\n        const answer = await ((_peerConnects$current3 = peerConnects.current[from]) === null || _peerConnects$current3 === void 0 ? void 0 : _peerConnects$current3.createAnswer());\n        await ((_peerConnects$current4 = peerConnects.current[from]) === null || _peerConnects$current4 === void 0 ? void 0 : _peerConnects$current4.setLocalDescription(answer));\n        socketClient.emit(\"answer\", user.nickname, from, answer);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // answer 처리\n  let answerHandler = async (from, answer) => {\n    try {\n      var _peerConnects$current5, _peerConnects$current6;\n      if (!((_peerConnects$current5 = peerConnects.current[from]) !== null && _peerConnects$current5 !== void 0 && _peerConnects$current5.currentRemoteDescription)) await ((_peerConnects$current6 = peerConnects.current[from]) === null || _peerConnects$current6 === void 0 ? void 0 : _peerConnects$current6.setRemoteDescription(answer));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // candidate처리\n  let candidateHandler = async (from, candidate) => {\n    var _peerConnects$current7;\n    const iceCandidate = new RTCIceCandidate(candidate);\n    await ((_peerConnects$current7 = peerConnects.current[from]) === null || _peerConnects$current7 === void 0 ? void 0 : _peerConnects$current7.addIceCandidate(iceCandidate));\n  };\n\n  // useEffect -----------------------------\n  // 시작시 방 정보 얻어옴\n  useEffect(() => {\n    let data = async () => {\n      try {\n        let room = await stream_service.getStreamRoomData(id);\n        setRoom(room.room);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    data();\n  }, []);\n\n  // 룸정보가 오면 start시작\n  useEffect(() => {\n    var _room$participants2;\n    if ((_room$participants2 = room.participants) !== null && _room$participants2 !== void 0 && _room$participants2.length) {\n      var _room$participants3;\n      (_room$participants3 = room.participants) === null || _room$participants3 === void 0 ? void 0 : _room$participants3.map(val => {\n        if (val.nickname !== user.nickname) {\n          peerConnect(val.nickname);\n          setConnectList(c => ({\n            ...c,\n            [val.nickname]: {\n              stream: new MediaStream()\n            }\n          }));\n        }\n      });\n    }\n    start();\n  }, [room]);\n\n  // 소켓 연결\n  useEffect(() => {\n    socketClient.emit(\"join\", `room${id}`);\n    socketClient.on(\"other join\", joinRoomHandler);\n    socketClient.on(\"offer\", offerHandler); //signaling offer\n    socketClient.on(\"answer\", answerHandler); //signaling answer\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\n    socketClient.on(\"toggle track\", trackHandler);\n    return () => {\n      socketClient.on(\"other join\", joinRoomHandler);\n      socketClient.off(\"offer\", offerHandler);\n      socketClient.off(\"answer\", answerHandler);\n      socketClient.off(\"candidate\", candidateHandler);\n      socketClient.off(\"leave room\", leaveRoomHandler);\n      socketClient.off(\"toggle track\", trackHandler);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page streamRoom_page\",\n    children: [/*#__PURE__*/_jsxDEV(RoomMain, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 244,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamRoom, \"jgtATgYI4zu5qYYkWl+Zv7ye5ik=\", false, function () {\n  return [useSelector, useParams, useNavigate];\n});\n_c = StreamRoom;\nvar _c;\n$RefreshReg$(_c, \"StreamRoom\");","map":{"version":3,"names":["useEffect","useRef","useState","useNavigate","useParams","socketClient","stream_service","useSelector","Menu","RoomMain","jsxDEV","_jsxDEV","StreamRoom","_s","user","state","id","navigate","roomId","localRef","localStreamRef","peerConnects","dataChannelsRef","connectList","setConnectList","room","setRoom","menu","setMenu","type","joinRoomHandler","who","leaveRoomHandler","current","leaveRoom","nickname","emit","trackHandler","to","c","stInfo","audio","video","peerConnect","stream","pc","RTCPeerConnection","channel","createDataChannel","getTracks","forEach","track","addTrack","onicecandidate","e","candidate","ontrack","kind","MediaStream","includes","enabled","onmessage","console","log","onopen","offer","createOffer","setLocalDescription","start","_room$participants","navigator","mediaDevices","getUserMedia","srcObject","participants","map","val","err","offerHandler","from","_peerConnects$current","_peerConnects$current2","setRemoteDescription","RTCSessionDescription","signalingState","_peerConnects$current3","_peerConnects$current4","answer","createAnswer","answerHandler","_peerConnects$current5","_peerConnects$current6","currentRemoteDescription","candidateHandler","_peerConnects$current7","iceCandidate","RTCIceCandidate","addIceCandidate","data","getStreamRoomData","_room$participants2","length","_room$participants3","on","off","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/page/streamroom.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport \"../css/streamRoom.css\";\r\nimport { Form, useNavigate, useParams } from \"react-router-dom\";\r\nimport { socketClient } from \"../util/socket\";\r\nimport { stream_service } from \"../service/streamservice\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../context/store\";\r\n\r\n// type\r\nimport { Room } from \"../types/room\";\r\nimport { User } from \"../types/user\";\r\nimport { StreamInfomation } from \"../types/room\";\r\n\r\n// component\r\nimport { Chat } from \"../components/room/menu/chat\";\r\nimport { Participants } from \"../components/room/menu/participants\";\r\nimport { Menu } from \"../components/room/menu/menu\";\r\nimport { RoomMain } from \"../components/room/main/roomMain\";\r\n\r\ninterface UserStream {\r\n  [from: string]: StreamInfomation;\r\n}\r\n\r\nexport const StreamRoom = () => {\r\n  let user = useSelector((state: RootState) => state.user);\r\n  let { id } = useParams();\r\n  let navigate = useNavigate();\r\n\r\n  let roomId = `room${id}`;\r\n\r\n  // ref\r\n  let localRef = useRef<HTMLVideoElement | null>(null);\r\n  let localStreamRef = useRef<MediaStream | null>(null);\r\n  let peerConnects = useRef<{ [nickname: string]: RTCPeerConnection }>({});\r\n  let dataChannelsRef = useRef<{ [nickname: string]: RTCDataChannel }>({});\r\n\r\n  // state\r\n  let [connectList, setConnectList] = useState<UserStream>({});\r\n  let [room, setRoom] = useState<Room>({});\r\n  let [menu, setMenu] = useState<{\r\n    state: boolean;\r\n    type: \"participants\" | \"chat\";\r\n  }>({ state: false, type: \"participants\" }); //메뉴\r\n\r\n  // 방 입장/퇴장 관련 --------------------------\r\n  let joinRoomHandler = (who: string) => {\r\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\r\n  };\r\n\r\n  // room leave 처리\r\n  let leaveRoomHandler = (who: string) => {\r\n    delete peerConnects.current[who];\r\n    // setConnectList((c) => c.filter((val) => val.from !== who));\r\n  };\r\n\r\n  // 방을 떠남\r\n  let leaveRoom = () => {\r\n    if (user.nickname !== \"\") {\r\n      socketClient.emit(\"leave room\", user.nickname, roomId);\r\n      navigate(\"/\");\r\n    }\r\n  };\r\n\r\n  // 비디오/오디오 상태 ----------------------------\r\n  // 화면 on/off\r\n\r\n  // 상대 화면 on/off\r\n  let trackHandler = (to: string, type: \"audio\" | \"video\", state: boolean) => {\r\n    setConnectList((c) => {\r\n      let stInfo = c[to];\r\n\r\n      type == \"audio\" ? (stInfo.audio = state) : (stInfo.video = state);\r\n\r\n      return { ...c, [to]: stInfo };\r\n    });\r\n  };\r\n\r\n  // p2p연결 관련 --------------------------------\r\n  // connect 연결\r\n  let peerConnect = async (to: string, stream?: MediaStream) => {\r\n    let pc = new RTCPeerConnection();\r\n    const channel = pc.createDataChannel(\"chat\");\r\n\r\n    stream?.getTracks().forEach((track) => {\r\n      pc.addTrack(track, stream);\r\n    });\r\n\r\n    pc.onicecandidate = (e) => {\r\n      if (e.candidate)\r\n        socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\r\n    };\r\n\r\n    pc.ontrack = (e) => {\r\n      let kind = e.track.kind;\r\n      setConnectList((c) => {\r\n        let stream = c[to];\r\n\r\n        if (!stream.stream) stream.stream = new MediaStream();\r\n\r\n        if (!stream.stream.getTracks().includes(e.track))\r\n          stream.stream.addTrack(e.track);\r\n\r\n        kind == \"audio\"\r\n          ? (stream.audio = e.track.enabled)\r\n          : (stream.video = e.track.enabled);\r\n\r\n        return {\r\n          ...c,\r\n          [to]: stream,\r\n        };\r\n      });\r\n    };\r\n\r\n    channel.onmessage = (e) => {\r\n      console.log(`send to ${to}`, e);\r\n    };\r\n\r\n    channel.onopen = () => {\r\n      console.log(`DataChannel open with ${to}`);\r\n    };\r\n\r\n    let offer = await pc.createOffer();\r\n    await pc.setLocalDescription(offer!);\r\n    socketClient.emit(\"offer\", user.nickname, to, offer);\r\n\r\n    peerConnects.current[to] = pc;\r\n    dataChannelsRef.current[to] = channel;\r\n  };\r\n\r\n  // 연결 시작\r\n  let start = async () => {\r\n    try {\r\n      let stream = await navigator.mediaDevices.getUserMedia({\r\n        video: false,\r\n        audio: false,\r\n      });\r\n      localRef.current!.srcObject = stream;\r\n      localStreamRef.current = stream;\r\n\r\n      // 트랙을 더해줌\r\n      room.participants?.map(async (val: any) => {\r\n        if (val.nickname !== user.nickname)\r\n          await peerConnect(val.nickname, stream);\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // offer처리\r\n  let offerHandler = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      if (!peerConnects.current[from]) peerConnect(from);\r\n\r\n      await peerConnects.current[from]?.setRemoteDescription(\r\n        new RTCSessionDescription(offer)\r\n      );\r\n\r\n      if (\r\n        peerConnects.current[from]?.signalingState == \"have-remote-offer\" &&\r\n        user.nickname !== \"\"\r\n      ) {\r\n        const answer = await peerConnects.current[from]?.createAnswer();\r\n        await peerConnects.current[from]?.setLocalDescription(answer!);\r\n        socketClient.emit(\"answer\", user.nickname, from, answer);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // answer 처리\r\n  let answerHandler = async (\r\n    from: string,\r\n    answer: RTCSessionDescriptionInit\r\n  ) => {\r\n    try {\r\n      if (!peerConnects.current[from]?.currentRemoteDescription)\r\n        await peerConnects.current[from]?.setRemoteDescription(answer!);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // candidate처리\r\n  let candidateHandler = async (from: string, candidate: RTCIceCandidate) => {\r\n    const iceCandidate = new RTCIceCandidate(candidate);\r\n    await peerConnects.current[from]?.addIceCandidate(iceCandidate);\r\n  };\r\n\r\n  // useEffect -----------------------------\r\n  // 시작시 방 정보 얻어옴\r\n  useEffect(() => {\r\n    let data = async () => {\r\n      try {\r\n        let room = await stream_service.getStreamRoomData(id!);\r\n        setRoom(room.room);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    data();\r\n  }, []);\r\n\r\n  // 룸정보가 오면 start시작\r\n  useEffect(() => {\r\n    if (room.participants?.length) {\r\n      room.participants?.map((val: any) => {\r\n        if (val.nickname !== user.nickname) {\r\n          peerConnect(val.nickname);\r\n          setConnectList((c) => ({\r\n            ...c,\r\n            [val.nickname]: { stream: new MediaStream() },\r\n          }));\r\n        }\r\n      });\r\n    }\r\n    start();\r\n  }, [room]);\r\n\r\n  // 소켓 연결\r\n  useEffect(() => {\r\n    socketClient.emit(\"join\", `room${id}`);\r\n\r\n    socketClient.on(\"other join\", joinRoomHandler);\r\n    socketClient.on(\"offer\", offerHandler); //signaling offer\r\n    socketClient.on(\"answer\", answerHandler); //signaling answer\r\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\r\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\r\n    socketClient.on(\"toggle track\", trackHandler);\r\n\r\n    return () => {\r\n      socketClient.on(\"other join\", joinRoomHandler);\r\n      socketClient.off(\"offer\", offerHandler);\r\n      socketClient.off(\"answer\", answerHandler);\r\n      socketClient.off(\"candidate\", candidateHandler);\r\n      socketClient.off(\"leave room\", leaveRoomHandler);\r\n      socketClient.off(\"toggle track\", trackHandler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"page streamRoom_page\">\r\n      {/* main */}\r\n      <RoomMain />\r\n\r\n      {/* menu */}\r\n      <Menu />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,OAAO,uBAAuB;AAC9B,SAAeC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AAC/D,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,cAAc,QAAQ,0BAA0B;AAEzD,SAASC,WAAW,QAAQ,aAAa;;AAGzC;;AAKA;;AAGA,SAASC,IAAI,QAAQ,8BAA8B;AACnD,SAASC,QAAQ,QAAQ,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAM5D,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,IAAIC,IAAI,GAAGP,WAAW,CAAEQ,KAAgB,IAAKA,KAAK,CAACD,IAAI,CAAC;EACxD,IAAI;IAAEE;EAAG,CAAC,GAAGZ,SAAS,CAAC,CAAC;EACxB,IAAIa,QAAQ,GAAGd,WAAW,CAAC,CAAC;EAE5B,IAAIe,MAAM,GAAG,OAAOF,EAAE,EAAE;;EAExB;EACA,IAAIG,QAAQ,GAAGlB,MAAM,CAA0B,IAAI,CAAC;EACpD,IAAImB,cAAc,GAAGnB,MAAM,CAAqB,IAAI,CAAC;EACrD,IAAIoB,YAAY,GAAGpB,MAAM,CAA4C,CAAC,CAAC,CAAC;EACxE,IAAIqB,eAAe,GAAGrB,MAAM,CAAyC,CAAC,CAAC,CAAC;;EAExE;EACA,IAAI,CAACsB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAa,CAAC,CAAC,CAAC;EAC5D,IAAI,CAACuB,IAAI,EAAEC,OAAO,CAAC,GAAGxB,QAAQ,CAAO,CAAC,CAAC,CAAC;EACxC,IAAI,CAACyB,IAAI,EAAEC,OAAO,CAAC,GAAG1B,QAAQ,CAG3B;IAAEa,KAAK,EAAE,KAAK;IAAEc,IAAI,EAAE;EAAe,CAAC,CAAC,CAAC,CAAC;;EAE5C;EACA,IAAIC,eAAe,GAAIC,GAAW,IAAK;IACrC;EAAA,CACD;;EAED;EACA,IAAIC,gBAAgB,GAAID,GAAW,IAAK;IACtC,OAAOV,YAAY,CAACY,OAAO,CAACF,GAAG,CAAC;IAChC;EACF,CAAC;;EAED;EACA,IAAIG,SAAS,GAAGA,CAAA,KAAM;IACpB,IAAIpB,IAAI,CAACqB,QAAQ,KAAK,EAAE,EAAE;MACxB9B,YAAY,CAAC+B,IAAI,CAAC,YAAY,EAAEtB,IAAI,CAACqB,QAAQ,EAAEjB,MAAM,CAAC;MACtDD,QAAQ,CAAC,GAAG,CAAC;IACf;EACF,CAAC;;EAED;EACA;;EAEA;EACA,IAAIoB,YAAY,GAAGA,CAACC,EAAU,EAAET,IAAuB,EAAEd,KAAc,KAAK;IAC1ES,cAAc,CAAEe,CAAC,IAAK;MACpB,IAAIC,MAAM,GAAGD,CAAC,CAACD,EAAE,CAAC;MAElBT,IAAI,IAAI,OAAO,GAAIW,MAAM,CAACC,KAAK,GAAG1B,KAAK,GAAKyB,MAAM,CAACE,KAAK,GAAG3B,KAAM;MAEjE,OAAO;QAAE,GAAGwB,CAAC;QAAE,CAACD,EAAE,GAAGE;MAAO,CAAC;IAC/B,CAAC,CAAC;EACJ,CAAC;;EAED;EACA;EACA,IAAIG,WAAW,GAAG,MAAAA,CAAOL,EAAU,EAAEM,MAAoB,KAAK;IAC5D,IAAIC,EAAE,GAAG,IAAIC,iBAAiB,CAAC,CAAC;IAChC,MAAMC,OAAO,GAAGF,EAAE,CAACG,iBAAiB,CAAC,MAAM,CAAC;IAE5CJ,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEK,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAK;MACrCN,EAAE,CAACO,QAAQ,CAACD,KAAK,EAAEP,MAAM,CAAC;IAC5B,CAAC,CAAC;IAEFC,EAAE,CAACQ,cAAc,GAAIC,CAAC,IAAK;MACzB,IAAIA,CAAC,CAACC,SAAS,EACblD,YAAY,CAAC+B,IAAI,CAAC,WAAW,EAAEtB,IAAI,CAACqB,QAAQ,EAAEG,EAAE,EAAEgB,CAAC,CAACC,SAAS,CAAC;IAClE,CAAC;IAEDV,EAAE,CAACW,OAAO,GAAIF,CAAC,IAAK;MAClB,IAAIG,IAAI,GAAGH,CAAC,CAACH,KAAK,CAACM,IAAI;MACvBjC,cAAc,CAAEe,CAAC,IAAK;QACpB,IAAIK,MAAM,GAAGL,CAAC,CAACD,EAAE,CAAC;QAElB,IAAI,CAACM,MAAM,CAACA,MAAM,EAAEA,MAAM,CAACA,MAAM,GAAG,IAAIc,WAAW,CAAC,CAAC;QAErD,IAAI,CAACd,MAAM,CAACA,MAAM,CAACK,SAAS,CAAC,CAAC,CAACU,QAAQ,CAACL,CAAC,CAACH,KAAK,CAAC,EAC9CP,MAAM,CAACA,MAAM,CAACQ,QAAQ,CAACE,CAAC,CAACH,KAAK,CAAC;QAEjCM,IAAI,IAAI,OAAO,GACVb,MAAM,CAACH,KAAK,GAAGa,CAAC,CAACH,KAAK,CAACS,OAAO,GAC9BhB,MAAM,CAACF,KAAK,GAAGY,CAAC,CAACH,KAAK,CAACS,OAAQ;QAEpC,OAAO;UACL,GAAGrB,CAAC;UACJ,CAACD,EAAE,GAAGM;QACR,CAAC;MACH,CAAC,CAAC;IACJ,CAAC;IAEDG,OAAO,CAACc,SAAS,GAAIP,CAAC,IAAK;MACzBQ,OAAO,CAACC,GAAG,CAAC,WAAWzB,EAAE,EAAE,EAAEgB,CAAC,CAAC;IACjC,CAAC;IAEDP,OAAO,CAACiB,MAAM,GAAG,MAAM;MACrBF,OAAO,CAACC,GAAG,CAAC,yBAAyBzB,EAAE,EAAE,CAAC;IAC5C,CAAC;IAED,IAAI2B,KAAK,GAAG,MAAMpB,EAAE,CAACqB,WAAW,CAAC,CAAC;IAClC,MAAMrB,EAAE,CAACsB,mBAAmB,CAACF,KAAM,CAAC;IACpC5D,YAAY,CAAC+B,IAAI,CAAC,OAAO,EAAEtB,IAAI,CAACqB,QAAQ,EAAEG,EAAE,EAAE2B,KAAK,CAAC;IAEpD5C,YAAY,CAACY,OAAO,CAACK,EAAE,CAAC,GAAGO,EAAE;IAC7BvB,eAAe,CAACW,OAAO,CAACK,EAAE,CAAC,GAAGS,OAAO;EACvC,CAAC;;EAED;EACA,IAAIqB,KAAK,GAAG,MAAAA,CAAA,KAAY;IACtB,IAAI;MAAA,IAAAC,kBAAA;MACF,IAAIzB,MAAM,GAAG,MAAM0B,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACrD9B,KAAK,EAAE,KAAK;QACZD,KAAK,EAAE;MACT,CAAC,CAAC;MACFtB,QAAQ,CAACc,OAAO,CAAEwC,SAAS,GAAG7B,MAAM;MACpCxB,cAAc,CAACa,OAAO,GAAGW,MAAM;;MAE/B;MACA,CAAAyB,kBAAA,GAAA5C,IAAI,CAACiD,YAAY,cAAAL,kBAAA,uBAAjBA,kBAAA,CAAmBM,GAAG,CAAC,MAAOC,GAAQ,IAAK;QACzC,IAAIA,GAAG,CAACzC,QAAQ,KAAKrB,IAAI,CAACqB,QAAQ,EAChC,MAAMQ,WAAW,CAACiC,GAAG,CAACzC,QAAQ,EAAES,MAAM,CAAC;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOiC,GAAG,EAAE;MACZf,OAAO,CAACC,GAAG,CAACc,GAAG,CAAC;IAClB;EACF,CAAC;;EAED;EACA,IAAIC,YAAY,GAAG,MAAAA,CAAOC,IAAY,EAAEd,KAAgC,KAAK;IAC3E,IAAI;MAAA,IAAAe,qBAAA,EAAAC,sBAAA;MACF,IAAI,CAAC5D,YAAY,CAACY,OAAO,CAAC8C,IAAI,CAAC,EAAEpC,WAAW,CAACoC,IAAI,CAAC;MAElD,QAAAC,qBAAA,GAAM3D,YAAY,CAACY,OAAO,CAAC8C,IAAI,CAAC,cAAAC,qBAAA,uBAA1BA,qBAAA,CAA4BE,oBAAoB,CACpD,IAAIC,qBAAqB,CAAClB,KAAK,CACjC,CAAC;MAED,IACE,EAAAgB,sBAAA,GAAA5D,YAAY,CAACY,OAAO,CAAC8C,IAAI,CAAC,cAAAE,sBAAA,uBAA1BA,sBAAA,CAA4BG,cAAc,KAAI,mBAAmB,IACjEtE,IAAI,CAACqB,QAAQ,KAAK,EAAE,EACpB;QAAA,IAAAkD,sBAAA,EAAAC,sBAAA;QACA,MAAMC,MAAM,GAAG,QAAAF,sBAAA,GAAMhE,YAAY,CAACY,OAAO,CAAC8C,IAAI,CAAC,cAAAM,sBAAA,uBAA1BA,sBAAA,CAA4BG,YAAY,CAAC,CAAC;QAC/D,QAAAF,sBAAA,GAAMjE,YAAY,CAACY,OAAO,CAAC8C,IAAI,CAAC,cAAAO,sBAAA,uBAA1BA,sBAAA,CAA4BnB,mBAAmB,CAACoB,MAAO,CAAC;QAC9DlF,YAAY,CAAC+B,IAAI,CAAC,QAAQ,EAAEtB,IAAI,CAACqB,QAAQ,EAAE4C,IAAI,EAAEQ,MAAM,CAAC;MAC1D;IACF,CAAC,CAAC,OAAOV,GAAG,EAAE;MACZf,OAAO,CAACC,GAAG,CAACc,GAAG,CAAC;IAClB;EACF,CAAC;;EAED;EACA,IAAIY,aAAa,GAAG,MAAAA,CAClBV,IAAY,EACZQ,MAAiC,KAC9B;IACH,IAAI;MAAA,IAAAG,sBAAA,EAAAC,sBAAA;MACF,IAAI,GAAAD,sBAAA,GAACrE,YAAY,CAACY,OAAO,CAAC8C,IAAI,CAAC,cAAAW,sBAAA,eAA1BA,sBAAA,CAA4BE,wBAAwB,GACvD,QAAAD,sBAAA,GAAMtE,YAAY,CAACY,OAAO,CAAC8C,IAAI,CAAC,cAAAY,sBAAA,uBAA1BA,sBAAA,CAA4BT,oBAAoB,CAACK,MAAO,CAAC;IACnE,CAAC,CAAC,OAAOV,GAAG,EAAE;MACZf,OAAO,CAACC,GAAG,CAACc,GAAG,CAAC;IAClB;EACF,CAAC;;EAED;EACA,IAAIgB,gBAAgB,GAAG,MAAAA,CAAOd,IAAY,EAAExB,SAA0B,KAAK;IAAA,IAAAuC,sBAAA;IACzE,MAAMC,YAAY,GAAG,IAAIC,eAAe,CAACzC,SAAS,CAAC;IACnD,QAAAuC,sBAAA,GAAMzE,YAAY,CAACY,OAAO,CAAC8C,IAAI,CAAC,cAAAe,sBAAA,uBAA1BA,sBAAA,CAA4BG,eAAe,CAACF,YAAY,CAAC;EACjE,CAAC;;EAED;EACA;EACA/F,SAAS,CAAC,MAAM;IACd,IAAIkG,IAAI,GAAG,MAAAA,CAAA,KAAY;MACrB,IAAI;QACF,IAAIzE,IAAI,GAAG,MAAMnB,cAAc,CAAC6F,iBAAiB,CAACnF,EAAG,CAAC;QACtDU,OAAO,CAACD,IAAI,CAACA,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOoD,GAAG,EAAE;QACZf,OAAO,CAACC,GAAG,CAACc,GAAG,CAAC;MAClB;IACF,CAAC;IACDqB,IAAI,CAAC,CAAC;EACR,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAlG,SAAS,CAAC,MAAM;IAAA,IAAAoG,mBAAA;IACd,KAAAA,mBAAA,GAAI3E,IAAI,CAACiD,YAAY,cAAA0B,mBAAA,eAAjBA,mBAAA,CAAmBC,MAAM,EAAE;MAAA,IAAAC,mBAAA;MAC7B,CAAAA,mBAAA,GAAA7E,IAAI,CAACiD,YAAY,cAAA4B,mBAAA,uBAAjBA,mBAAA,CAAmB3B,GAAG,CAAEC,GAAQ,IAAK;QACnC,IAAIA,GAAG,CAACzC,QAAQ,KAAKrB,IAAI,CAACqB,QAAQ,EAAE;UAClCQ,WAAW,CAACiC,GAAG,CAACzC,QAAQ,CAAC;UACzBX,cAAc,CAAEe,CAAC,KAAM;YACrB,GAAGA,CAAC;YACJ,CAACqC,GAAG,CAACzC,QAAQ,GAAG;cAAES,MAAM,EAAE,IAAIc,WAAW,CAAC;YAAE;UAC9C,CAAC,CAAC,CAAC;QACL;MACF,CAAC,CAAC;IACJ;IACAU,KAAK,CAAC,CAAC;EACT,CAAC,EAAE,CAAC3C,IAAI,CAAC,CAAC;;EAEV;EACAzB,SAAS,CAAC,MAAM;IACdK,YAAY,CAAC+B,IAAI,CAAC,MAAM,EAAE,OAAOpB,EAAE,EAAE,CAAC;IAEtCX,YAAY,CAACkG,EAAE,CAAC,YAAY,EAAEzE,eAAe,CAAC;IAC9CzB,YAAY,CAACkG,EAAE,CAAC,OAAO,EAAEzB,YAAY,CAAC,CAAC,CAAC;IACxCzE,YAAY,CAACkG,EAAE,CAAC,QAAQ,EAAEd,aAAa,CAAC,CAAC,CAAC;IAC1CpF,YAAY,CAACkG,EAAE,CAAC,WAAW,EAAEV,gBAAgB,CAAC,CAAC,CAAC;IAChDxF,YAAY,CAACkG,EAAE,CAAC,YAAY,EAAEvE,gBAAgB,CAAC,CAAC,CAAC;IACjD3B,YAAY,CAACkG,EAAE,CAAC,cAAc,EAAElE,YAAY,CAAC;IAE7C,OAAO,MAAM;MACXhC,YAAY,CAACkG,EAAE,CAAC,YAAY,EAAEzE,eAAe,CAAC;MAC9CzB,YAAY,CAACmG,GAAG,CAAC,OAAO,EAAE1B,YAAY,CAAC;MACvCzE,YAAY,CAACmG,GAAG,CAAC,QAAQ,EAAEf,aAAa,CAAC;MACzCpF,YAAY,CAACmG,GAAG,CAAC,WAAW,EAAEX,gBAAgB,CAAC;MAC/CxF,YAAY,CAACmG,GAAG,CAAC,YAAY,EAAExE,gBAAgB,CAAC;MAChD3B,YAAY,CAACmG,GAAG,CAAC,cAAc,EAAEnE,YAAY,CAAC;IAChD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE1B,OAAA;IAAK8F,SAAS,EAAC,sBAAsB;IAAAC,QAAA,gBAEnC/F,OAAA,CAACF,QAAQ;MAAAkG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGZnG,OAAA,CAACH,IAAI;MAAAmG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAACjG,EAAA,CAnOWD,UAAU;EAAA,QACVL,WAAW,EACTH,SAAS,EACPD,WAAW;AAAA;AAAA4G,EAAA,GAHfnG,UAAU;AAAA,IAAAmG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}