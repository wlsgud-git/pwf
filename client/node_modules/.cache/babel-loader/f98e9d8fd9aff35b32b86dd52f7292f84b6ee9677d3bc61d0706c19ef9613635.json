{"ast":null,"code":"import axios from \"axios\";\n// import { config } from \"\";\n\nexport class HttpClient {\n  constructor() {\n    this.baseURL = void 0;\n    this.client = void 0;\n    this.baseURL = process.env.REACT_APP_BASEURL;\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      withCredentials: true\n    });\n  }\n  async axiosFetch(url, options) {\n    let {\n      body,\n      method,\n      headers\n    } = options;\n\n    // 요청에 보낼 정보들\n    let req = {\n      url,\n      method,\n      data: body,\n      headers: {\n        ...headers\n      }\n    };\n    try {\n      let res = await this.client(req);\n      return res.data;\n    } catch (err) {\n      if (axios.isAxiosError(err)) throw err;else throw new Error(\"알 수 없는 에러\");\n    }\n  }\n}","map":{"version":3,"names":["axios","HttpClient","constructor","baseURL","client","process","env","REACT_APP_BASEURL","create","headers","withCredentials","axiosFetch","url","options","body","method","req","data","res","err","isAxiosError","Error"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/network/http.ts"],"sourcesContent":["import axios, { Axios, AxiosInstance } from \"axios\";\r\n\r\nimport { HttpRequest, HttpResponse } from \"../types/http\";\r\n// import { config } from \"\";\r\n\r\nexport class HttpClient {\r\n  baseURL: string | undefined;\r\n  client: AxiosInstance;\r\n  constructor() {\r\n    this.baseURL = process.env.REACT_APP_BASEURL;\r\n    this.client = axios.create({\r\n      baseURL: this.baseURL,\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      withCredentials: true,\r\n    });\r\n  }\r\n\r\n  async axiosFetch<T>(url: string, options: HttpRequest): Promise<any> {\r\n    let { body, method, headers } = options;\r\n\r\n    // 요청에 보낼 정보들\r\n    let req = {\r\n      url,\r\n      method,\r\n      data: body,\r\n      headers: {\r\n        ...headers,\r\n      },\r\n    };\r\n\r\n    try {\r\n      let res = await this.client(req);\r\n      return res.data;\r\n    } catch (err) {\r\n      if (axios.isAxiosError(err)) throw err;\r\n      else throw new Error(\"알 수 없는 에러\");\r\n    }\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAgC,OAAO;AAGnD;;AAEA,OAAO,MAAMC,UAAU,CAAC;EAGtBC,WAAWA,CAAA,EAAG;IAAA,KAFdC,OAAO;IAAA,KACPC,MAAM;IAEJ,IAAI,CAACD,OAAO,GAAGE,OAAO,CAACC,GAAG,CAACC,iBAAiB;IAC5C,IAAI,CAACH,MAAM,GAAGJ,KAAK,CAACQ,MAAM,CAAC;MACzBL,OAAO,EAAE,IAAI,CAACA,OAAO;MACrBM,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,eAAe,EAAE;IACnB,CAAC,CAAC;EACJ;EAEA,MAAMC,UAAUA,CAAIC,GAAW,EAAEC,OAAoB,EAAgB;IACnE,IAAI;MAAEC,IAAI;MAAEC,MAAM;MAAEN;IAAQ,CAAC,GAAGI,OAAO;;IAEvC;IACA,IAAIG,GAAG,GAAG;MACRJ,GAAG;MACHG,MAAM;MACNE,IAAI,EAAEH,IAAI;MACVL,OAAO,EAAE;QACP,GAAGA;MACL;IACF,CAAC;IAED,IAAI;MACF,IAAIS,GAAG,GAAG,MAAM,IAAI,CAACd,MAAM,CAACY,GAAG,CAAC;MAChC,OAAOE,GAAG,CAACD,IAAI;IACjB,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZ,IAAInB,KAAK,CAACoB,YAAY,CAACD,GAAG,CAAC,EAAE,MAAMA,GAAG,CAAC,KAClC,MAAM,IAAIE,KAAK,CAAC,WAAW,CAAC;IACnC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}