{"ast":null,"code":"export const emailValidate = email => {\n  return email.toString().trim().toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\nexport const userAuthValidation = (email, password) => {\n  let check_email = email.toString().trim().toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n  if (!check_email) return {\n    state: false,\n    type: \"email\"\n  };\n  let check_password = password.trim().toLowerCase().match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\n  if (!check_password) return {\n    state: false,\n    type: \"password\"\n  };\n  return {\n    state: true\n  };\n};","map":{"version":3,"names":["emailValidate","email","toString","trim","toLowerCase","match","userAuthValidation","password","check_email","state","type","check_password"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/util/validate.ts"],"sourcesContent":["interface AuthResponse {\r\n  state: boolean;\r\n  type?: string;\r\n}\r\n\r\nexport const emailValidate = (email: string) => {\r\n  return email\r\n    .toString()\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport const userAuthValidation = (\r\n  email: string,\r\n  password: string\r\n): AuthResponse => {\r\n  let check_email = email\r\n    .toString()\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n\r\n  if (!check_email) return { state: false, type: \"email\" };\r\n\r\n  let check_password = password\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\r\n\r\n  if (!check_password) return { state: false, type: \"password\" };\r\n  return { state: true };\r\n};\r\n"],"mappings":"AAKA,OAAO,MAAMA,aAAa,GAAIC,KAAa,IAAK;EAC9C,OAAOA,KAAK,CACTC,QAAQ,CAAC,CAAC,CACVC,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,wJACF,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAChCL,KAAa,EACbM,QAAgB,KACC;EACjB,IAAIC,WAAW,GAAGP,KAAK,CACpBC,QAAQ,CAAC,CAAC,CACVC,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,wJACF,CAAC;EAEH,IAAI,CAACG,WAAW,EAAE,OAAO;IAAEC,KAAK,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAQ,CAAC;EAExD,IAAIC,cAAc,GAAGJ,QAAQ,CAC1BJ,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,+DAA+D,CAAC;EAEzE,IAAI,CAACM,cAAc,EAAE,OAAO;IAAEF,KAAK,EAAE,KAAK;IAAEC,IAAI,EAAE;EAAW,CAAC;EAC9D,OAAO;IAAED,KAAK,EAAE;EAAK,CAAC;AACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}