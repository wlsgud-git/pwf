{"ast":null,"code":"import { SignupError } from \"../types/auth\";\nimport { user_service } from \"../service/userservice\";\nimport { createFormData } from \"../util/form\";\nimport { errorHandling } from \"../error/error\";\nexport const emailFormValid = email => {\n  return email.toString().trim().toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n};\nexport const passwordFormValid = password => {\n  return password.trim().toLowerCase().match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\n};\n\n// 이메일 인가\nexport const emailValidate = async (email, set_email) => {\n  try {\n    if (!emailFormValid(email)) throw {\n      type: \"email\",\n      msg: SignupError.EMAIL\n    };\n    let formdata = createFormData({\n      type: \"email\",\n      value: email\n    });\n    let res = await user_service.OverlapCheck(formdata);\n    set_email(c => ({\n      ...c,\n      error: false\n    }));\n  } catch (err) {\n    let {\n      type,\n      msg\n    } = errorHandling(err);\n    set_email(c => ({\n      ...c,\n      error: true,\n      error_msg: msg\n    }));\n  }\n};\nexport const nicknameValidate = async (email, set_nickname) => {\n  try {\n    let formdata = createFormData({\n      type: \"nickname\",\n      value: email\n    });\n    let res = await user_service.OverlapCheck(formdata);\n    set_nickname(c => ({\n      ...c,\n      error: false\n    }));\n  } catch (err) {\n    let {\n      type,\n      msg\n    } = errorHandling(err);\n    set_nickname(c => ({\n      ...c,\n      error: true,\n      error_msg: msg\n    }));\n  }\n};\n\n// 비밀번호 인가\nexport const passwordFormValidate = (password, set_password) => {\n  if (!passwordFormValid(password)) set_password(c => ({\n    ...c,\n    error: !result ? true : false,\n    error_msg: !result ? SignupError.PASSWORD : \"\"\n  }));\n};","map":{"version":3,"names":["SignupError","user_service","createFormData","errorHandling","emailFormValid","email","toString","trim","toLowerCase","match","passwordFormValid","password","emailValidate","set_email","type","msg","EMAIL","formdata","value","res","OverlapCheck","c","error","err","error_msg","nicknameValidate","set_nickname","passwordFormValidate","set_password","result","PASSWORD"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/validation/auth.ts"],"sourcesContent":["import { Dispatch } from \"react\";\r\nimport { SignupError } from \"../types/auth\";\r\nimport { user_service } from \"../service/userservice\";\r\nimport { createFormData } from \"../util/form\";\r\nimport { errorHandling } from \"../error/error\";\r\n\r\nimport { SignupInputProps } from \"../types/auth\";\r\nimport { StateDispatch } from \"../types/event\";\r\n\r\nexport const emailFormValid = (email: string) => {\r\n  return email\r\n    .toString()\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport const passwordFormValid = (password: string) => {\r\n  return password\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\r\n};\r\n\r\n// 이메일 인가\r\nexport const emailValidate = async (\r\n  email: string,\r\n  set_email: StateDispatch<SignupInputProps>\r\n) => {\r\n  try {\r\n    if (!emailFormValid(email)) throw { type: \"email\", msg: SignupError.EMAIL };\r\n    let formdata = createFormData({ type: \"email\", value: email });\r\n    let res = await user_service.OverlapCheck(formdata);\r\n    set_email((c) => ({ ...c, error: false }));\r\n  } catch (err) {\r\n    let { type, msg } = errorHandling(err);\r\n    set_email((c) => ({ ...c, error: true, error_msg: msg }));\r\n  }\r\n};\r\n\r\nexport const nicknameValidate = async (\r\n  email: string,\r\n  set_nickname: StateDispatch<SignupInputProps>\r\n) => {\r\n  try {\r\n    let formdata = createFormData({ type: \"nickname\", value: email });\r\n    let res = await user_service.OverlapCheck(formdata);\r\n    set_nickname((c) => ({ ...c, error: false }));\r\n  } catch (err) {\r\n    let { type, msg } = errorHandling(err);\r\n    set_nickname((c) => ({ ...c, error: true, error_msg: msg }));\r\n  }\r\n};\r\n\r\n// 비밀번호 인가\r\nexport const passwordFormValidate = (\r\n  password: string,\r\n  set_password: StateDispatch<SignupInputProps>\r\n) => {\r\n  if (!passwordFormValid(password))\r\n    set_password((c) => ({\r\n      ...c,\r\n      error: !result ? true : false,\r\n      error_msg: !result ? SignupError.PASSWORD : \"\",\r\n    }));\r\n};\r\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,cAAc;AAC7C,SAASC,aAAa,QAAQ,gBAAgB;AAK9C,OAAO,MAAMC,cAAc,GAAIC,KAAa,IAAK;EAC/C,OAAOA,KAAK,CACTC,QAAQ,CAAC,CAAC,CACVC,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,wJACF,CAAC;AACL,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAIC,QAAgB,IAAK;EACrD,OAAOA,QAAQ,CACZJ,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,+DAA+D,CAAC;AAC3E,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAG,MAAAA,CAC3BP,KAAa,EACbQ,SAA0C,KACvC;EACH,IAAI;IACF,IAAI,CAACT,cAAc,CAACC,KAAK,CAAC,EAAE,MAAM;MAAES,IAAI,EAAE,OAAO;MAAEC,GAAG,EAAEf,WAAW,CAACgB;IAAM,CAAC;IAC3E,IAAIC,QAAQ,GAAGf,cAAc,CAAC;MAAEY,IAAI,EAAE,OAAO;MAAEI,KAAK,EAAEb;IAAM,CAAC,CAAC;IAC9D,IAAIc,GAAG,GAAG,MAAMlB,YAAY,CAACmB,YAAY,CAACH,QAAQ,CAAC;IACnDJ,SAAS,CAAEQ,CAAC,KAAM;MAAE,GAAGA,CAAC;MAAEC,KAAK,EAAE;IAAM,CAAC,CAAC,CAAC;EAC5C,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,IAAI;MAAET,IAAI;MAAEC;IAAI,CAAC,GAAGZ,aAAa,CAACoB,GAAG,CAAC;IACtCV,SAAS,CAAEQ,CAAC,KAAM;MAAE,GAAGA,CAAC;MAAEC,KAAK,EAAE,IAAI;MAAEE,SAAS,EAAET;IAAI,CAAC,CAAC,CAAC;EAC3D;AACF,CAAC;AAED,OAAO,MAAMU,gBAAgB,GAAG,MAAAA,CAC9BpB,KAAa,EACbqB,YAA6C,KAC1C;EACH,IAAI;IACF,IAAIT,QAAQ,GAAGf,cAAc,CAAC;MAAEY,IAAI,EAAE,UAAU;MAAEI,KAAK,EAAEb;IAAM,CAAC,CAAC;IACjE,IAAIc,GAAG,GAAG,MAAMlB,YAAY,CAACmB,YAAY,CAACH,QAAQ,CAAC;IACnDS,YAAY,CAAEL,CAAC,KAAM;MAAE,GAAGA,CAAC;MAAEC,KAAK,EAAE;IAAM,CAAC,CAAC,CAAC;EAC/C,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,IAAI;MAAET,IAAI;MAAEC;IAAI,CAAC,GAAGZ,aAAa,CAACoB,GAAG,CAAC;IACtCG,YAAY,CAAEL,CAAC,KAAM;MAAE,GAAGA,CAAC;MAAEC,KAAK,EAAE,IAAI;MAAEE,SAAS,EAAET;IAAI,CAAC,CAAC,CAAC;EAC9D;AACF,CAAC;;AAED;AACA,OAAO,MAAMY,oBAAoB,GAAGA,CAClChB,QAAgB,EAChBiB,YAA6C,KAC1C;EACH,IAAI,CAAClB,iBAAiB,CAACC,QAAQ,CAAC,EAC9BiB,YAAY,CAAEP,CAAC,KAAM;IACnB,GAAGA,CAAC;IACJC,KAAK,EAAE,CAACO,MAAM,GAAG,IAAI,GAAG,KAAK;IAC7BL,SAAS,EAAE,CAACK,MAAM,GAAG7B,WAAW,CAAC8B,QAAQ,GAAG;EAC9C,CAAC,CAAC,CAAC;AACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}