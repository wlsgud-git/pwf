{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashh1\\\\Desktop\\\\project\\\\PlayWithFriends\\\\client\\\\src\\\\components\\\\room\\\\roomMain.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { socketClient } from \"../../util/socket\";\nimport { emitter } from \"../../util/event\";\n\n// css\nimport \"../../css/room/roomMain.css\";\n\n// type\n\n// import { PeerConnects } from \"../../types/room\";\nimport { FriendStream } from \"./friendStream\";\nimport { Invitation } from \"../modal/invitation\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RoomMain = ({\n  user,\n  stream,\n  connects,\n  participants\n}) => {\n  _s();\n  let {\n    id\n  } = useParams();\n  let roomId = `room${id}`;\n  let navigate = useNavigate();\n  let localRef = useRef(null);\n  let localStreamRef = useRef(null);\n  let shareStreamRef = useRef(null);\n  let [audio, setAudio] = useState(true);\n  let [video, setVideo] = useState(true);\n  let [otherShare, setOtherShare] = useState({\n    state: false,\n    nickname: \"\"\n  });\n  let [shareStream, setShareStream] = useState(null);\n  // 모달\n  let [showInvitation, setShowInvitation] = useState(false);\n  let [mediaModal, setMediaModal] = useState(false);\n  let openModal = type => {\n    type == \"invitation\" ? setShowInvitation(true) : setMediaModal(true);\n    emitter.emit(\"modal\", {\n      type: \"invitation\",\n      open: true\n    });\n  };\n\n  // 다른 사용자 트랙 변경\n  let trackChange = stream => {\n    Object.entries(connects).forEach(([from, info]) => {\n      let sender = info.pc.getSenders().find(s => s.track.kind == \"video\");\n      if (sender) sender.replaceTrack(stream);\n    });\n  };\n\n  // 화면 공유 관련 ----------------------------------------\n  // 화면 공유 과정\n  let changeProcess = (streamTrack, stream, state) => {\n    state ? socketClient.emit(\"share screen\", roomId, user.nickname) : socketClient.emit(\"share screen off\", roomId);\n    setShareStream(stream);\n    trackChange(streamTrack);\n    setOtherShare(c => ({\n      ...c,\n      state,\n      nickname: user.nickname\n    }));\n  };\n\n  //내 화면 공유 시작\n  let ShareStart = async () => {\n    if (otherShare.state) {\n      alert(\"다른 이가 화면공유 중입니다\");\n      return;\n    }\n    try {\n      let s_stream = await navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n      let streamTrack = s_stream.getVideoTracks()[0];\n      changeProcess(streamTrack, s_stream, true);\n      streamTrack.onended = () => {\n        changeProcess(stream === null || stream === void 0 ? void 0 : stream.getVideoTracks()[0], null, false);\n      };\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // 다른 사용자가 화면 공유를 시작함\n  let otherScreenShare = from => {\n    setOtherShare(c => ({\n      ...c,\n      state: true,\n      nickname: from\n    }));\n  };\n\n  // 다른 사용자가 화면 공유를 종료함\n  let otherSCreenShareOFf = () => {\n    setShareStream(null);\n    setOtherShare(c => ({\n      ...c,\n      state: false,\n      nickname: \"\"\n    }));\n  };\n\n  // 방 나감 관련 ----------------------------------------\n  let leaveRoom = () => {\n    if (user.nickname !== \"\") {\n      socketClient.emit(\"leave room\", user.nickname, roomId);\n      navigate(\"/\");\n    }\n  };\n\n  // useEffect ---------------\n\n  // 스트림 ref 설정\n  useEffect(() => {\n    if (stream) {\n      localRef.current.srcObject = stream;\n      localStreamRef.current = stream;\n    }\n  }, [stream]);\n\n  // 화면공유 소켓 초기화\n  useEffect(() => {\n    socketClient.on(\"share screen\", otherScreenShare);\n    socketClient.on(\"share screen off\", otherSCreenShareOFf);\n    return () => {\n      socketClient.off(\"share screen\", otherScreenShare);\n      socketClient.on(\"share screen off\", otherSCreenShareOFf);\n    };\n  }, []);\n\n  // 상대가 화면 공유 시작시 상대방의 비디오 트랙을 shareSTream으로 설정\n  useEffect(() => {\n    let con = Object.entries(connects);\n    if (con.length && otherShare.state && otherShare.nickname !== \"\") {\n      let shareInfo = con.find(([from, info]) => from === otherShare.nickname);\n      if (shareInfo) {\n        let info = shareInfo[1];\n        info.pc.getReceivers().forEach(receive => {\n          setShareStream(new MediaStream([receive.track]));\n        });\n      }\n    }\n  }, [connects, otherShare.nickname]);\n\n  // 공유 스트림이 변경되면 공유 ref.srcObject 변경\n  useEffect(() => {\n    if (shareStream && shareStreamRef.current) {\n      shareStreamRef.current.srcObject = shareStream;\n    }\n  }, [shareStream]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pwf-streamRoom_container\",\n    children: [/*#__PURE__*/_jsxDEV(Invitation, {\n      user: user,\n      show: showInvitation,\n      setShow: setShowInvitation,\n      participants: participants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pwf-screen_container\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        className: otherShare.state ? \"share\" : \"user_screen_lists\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"user_video_box\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localRef,\n            autoPlay: true,\n            playsInline: true,\n            className: \"user_video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user_info_box\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: `fa-solid fa-microphone-lines${audio ? \"\" : \"-slash\"}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: /*#__PURE__*/_jsxDEV(\"i\", {\n                  className: `fa-solid fa-video${video ? \"\" : \"-slash\"}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: user.nickname\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), Object.entries(connects).map(([from, stream]) => /*#__PURE__*/_jsxDEV(FriendStream, {\n          from: from,\n          stream: stream\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"share_screen_container\",\n        style: {\n          display: otherShare.state ? \"flex\" : \"none\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: shareStreamRef,\n          autoPlay: true,\n          playsInline: true,\n          className: \"share_video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"share_user_nickname\",\n          children: otherShare.nickname\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 169,\n    columnNumber: 5\n  }, this);\n};\n_s(RoomMain, \"OilX9oxE/UybAysknWPLoen8UbE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = RoomMain;\nvar _c;\n$RefreshReg$(_c, \"RoomMain\");","map":{"version":3,"names":["useEffect","useRef","useState","useNavigate","useParams","socketClient","emitter","FriendStream","Invitation","jsxDEV","_jsxDEV","RoomMain","user","stream","connects","participants","_s","id","roomId","navigate","localRef","localStreamRef","shareStreamRef","audio","setAudio","video","setVideo","otherShare","setOtherShare","state","nickname","shareStream","setShareStream","showInvitation","setShowInvitation","mediaModal","setMediaModal","openModal","type","emit","open","trackChange","Object","entries","forEach","from","info","sender","pc","getSenders","find","s","track","kind","replaceTrack","changeProcess","streamTrack","c","ShareStart","alert","s_stream","navigator","mediaDevices","getDisplayMedia","getVideoTracks","onended","err","console","log","otherScreenShare","otherSCreenShareOFf","leaveRoom","current","srcObject","on","off","con","length","shareInfo","getReceivers","receive","MediaStream","className","children","show","setShow","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","map","style","display","_c","$RefreshReg$"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/components/room/roomMain.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport { socketClient } from \"../../util/socket\";\r\nimport { emitter } from \"../../util/event\";\r\n\r\n// css\r\nimport \"../../css/room/roomMain.css\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { Room } from \"../../types/room\";\r\n// import { PeerConnects } from \"../../types/room\";\r\nimport { FriendStream } from \"./friendStream\";\r\n\r\nimport { Invitation } from \"../modal/invitation\";\r\nimport { MyMedia } from \"../modal/myMedia\";\r\n\r\ninterface RoomMainProps {\r\n  user: User;\r\n  stream: MediaStream | null;\r\n  connects: object;\r\n  participants: Room[\"participants\"];\r\n}\r\n\r\nexport const RoomMain = ({\r\n  user,\r\n  stream,\r\n  connects,\r\n  participants,\r\n}: RoomMainProps) => {\r\n  let { id } = useParams();\r\n  let roomId = `room${id}`;\r\n  let navigate = useNavigate();\r\n\r\n  let localRef = useRef<HTMLVideoElement | null>(null);\r\n  let localStreamRef = useRef<MediaStream | null>(null);\r\n\r\n  let shareStreamRef = useRef<HTMLVideoElement | null>(null);\r\n\r\n  let [audio, setAudio] = useState<boolean>(true);\r\n  let [video, setVideo] = useState<boolean>(true);\r\n\r\n  let [otherShare, setOtherShare] = useState<{\r\n    state: boolean;\r\n    nickname: string;\r\n  }>({ state: false, nickname: \"\" });\r\n\r\n  let [shareStream, setShareStream] = useState<MediaStream | null>(null);\r\n  // 모달\r\n  let [showInvitation, setShowInvitation] = useState<boolean>(false);\r\n  let [mediaModal, setMediaModal] = useState<boolean>(false);\r\n\r\n  let openModal = (type: \"invitation\" | \"media\") => {\r\n    type == \"invitation\" ? setShowInvitation(true) : setMediaModal(true);\r\n    emitter.emit(\"modal\", { type: \"invitation\", open: true });\r\n  };\r\n\r\n  // 다른 사용자 트랙 변경\r\n  let trackChange = (stream: any) => {\r\n    Object.entries(connects).forEach(([from, info]) => {\r\n      let sender = info.pc\r\n        .getSenders()\r\n        .find((s: any) => s.track.kind == \"video\");\r\n      if (sender) sender.replaceTrack(stream);\r\n    });\r\n  };\r\n\r\n  // 화면 공유 관련 ----------------------------------------\r\n  // 화면 공유 과정\r\n  let changeProcess = (\r\n    streamTrack: MediaStreamTrack | undefined,\r\n    stream: MediaStream | null,\r\n    state: boolean\r\n  ) => {\r\n    state\r\n      ? socketClient.emit(\"share screen\", roomId, user.nickname)\r\n      : socketClient.emit(\"share screen off\", roomId);\r\n\r\n    setShareStream(stream);\r\n    trackChange(streamTrack);\r\n    setOtherShare((c) => ({ ...c, state, nickname: user.nickname! }));\r\n  };\r\n\r\n  //내 화면 공유 시작\r\n  let ShareStart = async () => {\r\n    if (otherShare.state) {\r\n      alert(\"다른 이가 화면공유 중입니다\");\r\n      return;\r\n    }\r\n    try {\r\n      let s_stream = await navigator.mediaDevices.getDisplayMedia({\r\n        video: true,\r\n      });\r\n      let streamTrack = s_stream.getVideoTracks()[0];\r\n\r\n      changeProcess(streamTrack, s_stream, true);\r\n\r\n      streamTrack.onended = () => {\r\n        changeProcess(stream?.getVideoTracks()[0], null, false);\r\n      };\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // 다른 사용자가 화면 공유를 시작함\r\n  let otherScreenShare = (from: string) => {\r\n    setOtherShare((c) => ({ ...c, state: true, nickname: from }));\r\n  };\r\n\r\n  // 다른 사용자가 화면 공유를 종료함\r\n  let otherSCreenShareOFf = () => {\r\n    setShareStream(null);\r\n    setOtherShare((c) => ({ ...c, state: false, nickname: \"\" }));\r\n  };\r\n\r\n  // 방 나감 관련 ----------------------------------------\r\n  let leaveRoom = () => {\r\n    if (user.nickname !== \"\") {\r\n      socketClient.emit(\"leave room\", user.nickname, roomId);\r\n      navigate(\"/\");\r\n    }\r\n  };\r\n\r\n  // useEffect ---------------\r\n\r\n  // 스트림 ref 설정\r\n  useEffect(() => {\r\n    if (stream) {\r\n      localRef.current!.srcObject = stream;\r\n      localStreamRef.current = stream;\r\n    }\r\n  }, [stream]);\r\n\r\n  // 화면공유 소켓 초기화\r\n  useEffect(() => {\r\n    socketClient.on(\"share screen\", otherScreenShare);\r\n    socketClient.on(\"share screen off\", otherSCreenShareOFf);\r\n\r\n    return () => {\r\n      socketClient.off(\"share screen\", otherScreenShare);\r\n      socketClient.on(\"share screen off\", otherSCreenShareOFf);\r\n    };\r\n  }, []);\r\n\r\n  // 상대가 화면 공유 시작시 상대방의 비디오 트랙을 shareSTream으로 설정\r\n  useEffect(() => {\r\n    let con = Object.entries(connects);\r\n    if (con.length && otherShare.state && otherShare.nickname !== \"\") {\r\n      let shareInfo = con.find(([from, info]) => from === otherShare.nickname);\r\n      if (shareInfo) {\r\n        let info = shareInfo[1];\r\n        info.pc.getReceivers().forEach((receive: any) => {\r\n          setShareStream(new MediaStream([receive.track]));\r\n        });\r\n      }\r\n    }\r\n  }, [connects, otherShare.nickname]);\r\n\r\n  // 공유 스트림이 변경되면 공유 ref.srcObject 변경\r\n  useEffect(() => {\r\n    if (shareStream && shareStreamRef.current) {\r\n      shareStreamRef.current.srcObject = shareStream;\r\n    }\r\n  }, [shareStream]);\r\n\r\n  return (\r\n    <div className=\"pwf-streamRoom_container\">\r\n      {/* modal */}\r\n      <Invitation\r\n        user={user}\r\n        show={showInvitation}\r\n        setShow={setShowInvitation}\r\n        participants={participants}\r\n      />\r\n      {/* <MyMedia media={} /> */}\r\n      {/* 화면창 */}\r\n      <div className=\"pwf-screen_container\">\r\n        {/* p2p 연결화면들 */}\r\n        <ul className={otherShare.state ? \"share\" : \"user_screen_lists\"}>\r\n          {/* 내 화면 */}\r\n          <div className=\"user_video_box\">\r\n            {/* 유저 비디오 */}\r\n            <video\r\n              ref={localRef}\r\n              autoPlay\r\n              playsInline\r\n              className=\"user_video\"\r\n            ></video>\r\n            {/* 유저 정보 */}\r\n            <div className=\"user_info_box\">\r\n              <div>\r\n                <span>\r\n                  <i\r\n                    className={`fa-solid fa-microphone-lines${\r\n                      audio ? \"\" : \"-slash\"\r\n                    }`}\r\n                  ></i>\r\n                </span>\r\n                <span>\r\n                  <i\r\n                    className={`fa-solid fa-video${video ? \"\" : \"-slash\"}`}\r\n                  ></i>\r\n                </span>\r\n              </div>\r\n              <span>{user.nickname}</span>\r\n            </div>\r\n          </div>\r\n          {/* 다른 참가자 스트리밍 */}\r\n          {Object.entries(connects).map(([from, stream]) => (\r\n            <FriendStream from={from} stream={stream} />\r\n          ))}\r\n        </ul>\r\n        {/* 화면 공유시 공유창 */}\r\n        <div\r\n          className=\"share_screen_container\"\r\n          style={{ display: otherShare.state ? \"flex\" : \"none\" }}\r\n        >\r\n          <video\r\n            ref={shareStreamRef}\r\n            autoPlay\r\n            playsInline\r\n            className=\"share_video\"\r\n          ></video>\r\n          <span className=\"share_user_nickname\">{otherShare.nickname}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}