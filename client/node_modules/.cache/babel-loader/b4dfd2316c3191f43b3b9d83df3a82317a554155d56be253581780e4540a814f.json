{"ast":null,"code":"// import { getUser } from \"../reducer/userSlice\";\nimport{userService}from\"../../service/userservice\";// import { AppDispatch } from \"\";\nimport{createAsyncThunk}from\"@reduxjs/toolkit\";// types\n// import { UserAction, UserActionTypes } from \"../../types/user\";\nclass UserAction extends userService{constructor(){super(...arguments);this.requestFriendHandle=createAsyncThunk(\"request/friend\",async data=>{try{let res=await this.handleRequestFriend(data);return await res;}catch(error){alert(error);}});this.getUserAction=createAsyncThunk(\"user/fetchUser\",async()=>{try{let res=await this.getUser();return await res;}catch(error){window.location.href=\"/login\";}});}//   modifyList = (id, fullname) => {\n//     return async (dispatch, getState) => {\n//       let state = getState();\n//       let { check } = state.fileList;\n//       if (id in check) dispatch(updateList({ id, fullname }));\n//     };\n//   };\n//   deleteFileList = (id, fullname) => {\n//     return async (dispatch, getState) => {\n//       let state = getState();\n//       let list = state.fileList.list;\n//       let new_id;\n//       let ft = fullname.join(\"/\");\n//       if (!list.filter((val) => val.fullname.join(\"/\") === ft).length) return;\n//       if (list.length >= 2) new_id = list[list[0].id == id ? 1 : 0].id;\n//       else new_id = 0;\n//       try {\n//         const res = await dictService.deleteFileList(id);\n//         dispatch(deleteList(id));\n//         dispatch(changeId({ id: new_id, type: false }));\n//       } catch (err) {\n//         console.log(err);\n//       }\n//     };\n//   };\n}export let userAction=new UserAction();","map":{"version":3,"names":["userService","createAsyncThunk","UserAction","constructor","arguments","requestFriendHandle","data","res","handleRequestFriend","error","alert","getUserAction","getUser","window","location","href","userAction"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/actions/userAction.ts"],"sourcesContent":["// import { getUser } from \"../reducer/userSlice\";\r\nimport { userService } from \"../../service/userservice\";\r\n// import { AppDispatch } from \"\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// types\r\n// import { UserAction, UserActionTypes } from \"../../types/user\";\r\nimport { User } from \"../../types/user\";\r\nimport { errorHandling } from \"../../error/error\";\r\nimport { HttpResponse } from \"../../types/http\";\r\n\r\nclass UserAction extends userService {\r\n  requestFriendHandle = createAsyncThunk(\r\n    \"request/friend\",\r\n    async (data: FormData): Promise<any> => {\r\n      try {\r\n        let res = await this.handleRequestFriend(data);\r\n        return await res!;\r\n      } catch (error) {\r\n        alert(error);\r\n      }\r\n    }\r\n  );\r\n  getUserAction = createAsyncThunk(\"user/fetchUser\", async (): Promise<any> => {\r\n    try {\r\n      let res = await this.getUser();\r\n      return await res!;\r\n    } catch (error) {\r\n      window.location.href = \"/login\";\r\n    }\r\n  });\r\n  //   modifyList = (id, fullname) => {\r\n  //     return async (dispatch, getState) => {\r\n  //       let state = getState();\r\n  //       let { check } = state.fileList;\r\n  //       if (id in check) dispatch(updateList({ id, fullname }));\r\n  //     };\r\n  //   };\r\n  //   deleteFileList = (id, fullname) => {\r\n  //     return async (dispatch, getState) => {\r\n  //       let state = getState();\r\n  //       let list = state.fileList.list;\r\n  //       let new_id;\r\n  //       let ft = fullname.join(\"/\");\r\n  //       if (!list.filter((val) => val.fullname.join(\"/\") === ft).length) return;\r\n  //       if (list.length >= 2) new_id = list[list[0].id == id ? 1 : 0].id;\r\n  //       else new_id = 0;\r\n  //       try {\r\n  //         const res = await dictService.deleteFileList(id);\r\n  //         dispatch(deleteList(id));\r\n  //         dispatch(changeId({ id: new_id, type: false }));\r\n  //       } catch (err) {\r\n  //         console.log(err);\r\n  //       }\r\n  //     };\r\n  //   };\r\n}\r\n\r\nexport let userAction = new UserAction();\r\n"],"mappings":"AAAA;AACA,OAASA,WAAW,KAAQ,2BAA2B,CACvD;AACA,OAASC,gBAAgB,KAAQ,kBAAkB,CAInD;AACA;AAKA,KAAM,CAAAC,UAAU,QAAS,CAAAF,WAAY,CAAAG,YAAA,WAAAC,SAAA,OACnCC,mBAAmB,CAAGJ,gBAAgB,CACpC,gBAAgB,CAChB,KAAO,CAAAK,IAAc,EAAmB,CACtC,GAAI,CACF,GAAI,CAAAC,GAAG,CAAG,KAAM,KAAI,CAACC,mBAAmB,CAACF,IAAI,CAAC,CAC9C,MAAO,MAAM,CAAAC,GAAI,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdC,KAAK,CAACD,KAAK,CAAC,CACd,CACF,CACF,CAAC,MACDE,aAAa,CAAGV,gBAAgB,CAAC,gBAAgB,CAAE,SAA0B,CAC3E,GAAI,CACF,GAAI,CAAAM,GAAG,CAAG,KAAM,KAAI,CAACK,OAAO,CAAC,CAAC,CAC9B,MAAO,MAAM,CAAAL,GAAI,CACnB,CAAE,MAAOE,KAAK,CAAE,CACdI,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CACjC,CACF,CAAC,CAAC,EACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF,CAEA,MAAO,IAAI,CAAAC,UAAU,CAAG,GAAI,CAAAd,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}