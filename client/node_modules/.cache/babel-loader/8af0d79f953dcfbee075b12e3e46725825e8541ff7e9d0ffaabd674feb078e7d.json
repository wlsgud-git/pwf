{"ast":null,"code":"import { HttpClient } from \"../network/http\";\nclass userService extends HttpClient {\n  async testing(data) {\n    try {\n      return await this.axiosFetch(\"/test\", {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n  async OverlapCheck(data) {\n    try {\n      return await this.axiosFetch(\"/overlap_check\", {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n  // 인증코드 재전송\n  async resendAuthcode(data) {\n    try {\n      return await this.axiosFetch(\"/resend_authcode\", {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // 유저정보 보내기\n  async sendUserInfo(data) {\n    try {\n      return await this.axiosFetch(`/user_info`, {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n}\nexport const user_service = new userService();","map":{"version":3,"names":["HttpClient","userService","testing","data","axiosFetch","method","body","err","OverlapCheck","resendAuthcode","sendUserInfo","user_service"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/service/userservice.ts"],"sourcesContent":["import { HttpClient } from \"../network/http\";\r\n\r\nimport { User } from \"../types/user\";\r\n\r\nclass userService extends HttpClient {\r\n  async testing(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<string>(\"/test\", {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  async OverlapCheck(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<boolean>(\"/overlap_check\", {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n  // 인증코드 재전송\r\n  async resendAuthcode(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<boolean>(\"/resend_authcode\", {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // 유저정보 보내기\r\n  async sendUserInfo(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<void>(`/user_info`, {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nexport const user_service = new userService();\r\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,iBAAiB;AAI5C,MAAMC,WAAW,SAASD,UAAU,CAAC;EACnC,MAAME,OAAOA,CAACC,IAAc,EAAE;IAC5B,IAAI;MACF,OAAO,MAAM,IAAI,CAACC,UAAU,CAAS,OAAO,EAAE;QAC5CC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZ,MAAMA,GAAG;IACX;EACF;EAEA,MAAMC,YAAYA,CAACL,IAAc,EAAE;IACjC,IAAI;MACF,OAAO,MAAM,IAAI,CAACC,UAAU,CAAU,gBAAgB,EAAE;QACtDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZ,MAAMA,GAAG;IACX;EACF;EACA;EACA,MAAME,cAAcA,CAACN,IAAc,EAAE;IACnC,IAAI;MACF,OAAO,MAAM,IAAI,CAACC,UAAU,CAAU,kBAAkB,EAAE;QACxDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZ,MAAMA,GAAG;IACX;EACF;;EAEA;EACA,MAAMG,YAAYA,CAACP,IAAc,EAAE;IACjC,IAAI;MACF,OAAO,MAAM,IAAI,CAACC,UAAU,CAAO,YAAY,EAAE;QAC/CC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEH;MACR,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOI,GAAG,EAAE;MACZ,MAAMA,GAAG;IACX;EACF;AACF;AAEA,OAAO,MAAMI,YAAY,GAAG,IAAIV,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}