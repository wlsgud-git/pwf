{"ast":null,"code":"import{SignupError}from\"../types/auth\";import{user_service}from\"../service/userservice\";import{createFormData}from\"../util/form\";import{errorHandling}from\"../error/error\";export const emailFormValid=email=>{return email.toString().trim().toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);};export const passwordFormValid=password=>{return password.trim().toLowerCase().match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);};// 이메일 인가\nexport const emailValidate=async(email,set_email)=>{try{if(!emailFormValid(email))throw{type:\"email\",msg:SignupError.EMAIL};let formdata=createFormData({type:\"email\",value:email});let res=await user_service.OverlapCheck(formdata);set_email(c=>({...c,error:false}));}catch(err){let{type,msg}=errorHandling(err);set_email(c=>({...c,error:true,error_msg:msg}));}};export const nicknameValidate=async(email,set_nickname)=>{try{let formdata=createFormData({type:\"nickname\",value:email});let res=await user_service.OverlapCheck(formdata);set_nickname(c=>({...c,error:false}));}catch(err){let{type,msg}=errorHandling(err);set_nickname(c=>({...c,error:true,error_msg:msg}));}};// 비밀번호 인가\nexport const passwordValidate=(password,set_password)=>{let result=passwordFormValid(password);if(!result)set_password(c=>({...c,error:!result?true:false,error_msg:!result?SignupError.PASSWORD:\"\"}));};","map":{"version":3,"names":["SignupError","user_service","createFormData","errorHandling","emailFormValid","email","toString","trim","toLowerCase","match","passwordFormValid","password","emailValidate","set_email","type","msg","EMAIL","formdata","value","res","OverlapCheck","c","error","err","error_msg","nicknameValidate","set_nickname","passwordValidate","set_password","result","PASSWORD"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/validation/auth.ts"],"sourcesContent":["import { Dispatch } from \"react\";\r\nimport { SignupError } from \"../types/auth\";\r\nimport { user_service } from \"../service/userservice\";\r\nimport { createFormData } from \"../util/form\";\r\nimport { errorHandling } from \"../error/error\";\r\n\r\nimport { SignupInputProps } from \"../types/auth\";\r\nimport { StateDispatch } from \"../types/event\";\r\n\r\nexport const emailFormValid = (email: string) => {\r\n  return email\r\n    .toString()\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n};\r\n\r\nexport const passwordFormValid = (password: string) => {\r\n  return password\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\r\n};\r\n\r\n// 이메일 인가\r\nexport const emailValidate = async (\r\n  email: string,\r\n  set_email: StateDispatch<SignupInputProps>\r\n) => {\r\n  try {\r\n    if (!emailFormValid(email)) throw { type: \"email\", msg: SignupError.EMAIL };\r\n    let formdata = createFormData({ type: \"email\", value: email });\r\n    let res = await user_service.OverlapCheck(formdata);\r\n    set_email((c) => ({ ...c, error: false }));\r\n  } catch (err) {\r\n    let { type, msg } = errorHandling(err);\r\n    set_email((c) => ({ ...c, error: true, error_msg: msg }));\r\n  }\r\n};\r\n\r\nexport const nicknameValidate = async (\r\n  email: string,\r\n  set_nickname: StateDispatch<SignupInputProps>\r\n) => {\r\n  try {\r\n    let formdata = createFormData({ type: \"nickname\", value: email });\r\n    let res = await user_service.OverlapCheck(formdata);\r\n    set_nickname((c) => ({ ...c, error: false }));\r\n  } catch (err) {\r\n    let { type, msg } = errorHandling(err);\r\n    set_nickname((c) => ({ ...c, error: true, error_msg: msg }));\r\n  }\r\n};\r\n\r\n// 비밀번호 인가\r\nexport const passwordValidate = (\r\n  password: string,\r\n  set_password: StateDispatch<SignupInputProps>\r\n) => {\r\n  let result = passwordFormValid(password);\r\n  if (!result)\r\n    set_password((c) => ({\r\n      ...c,\r\n      error: !result ? true : false,\r\n      error_msg: !result ? SignupError.PASSWORD : \"\",\r\n    }));\r\n};\r\n"],"mappings":"AACA,OAASA,WAAW,KAAQ,eAAe,CAC3C,OAASC,YAAY,KAAQ,wBAAwB,CACrD,OAASC,cAAc,KAAQ,cAAc,CAC7C,OAASC,aAAa,KAAQ,gBAAgB,CAK9C,MAAO,MAAM,CAAAC,cAAc,CAAIC,KAAa,EAAK,CAC/C,MAAO,CAAAA,KAAK,CACTC,QAAQ,CAAC,CAAC,CACVC,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,wJACF,CAAC,CACL,CAAC,CAED,MAAO,MAAM,CAAAC,iBAAiB,CAAIC,QAAgB,EAAK,CACrD,MAAO,CAAAA,QAAQ,CACZJ,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,+DAA+D,CAAC,CAC3E,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,aAAa,CAAG,KAAAA,CAC3BP,KAAa,CACbQ,SAA0C,GACvC,CACH,GAAI,CACF,GAAI,CAACT,cAAc,CAACC,KAAK,CAAC,CAAE,KAAM,CAAES,IAAI,CAAE,OAAO,CAAEC,GAAG,CAAEf,WAAW,CAACgB,KAAM,CAAC,CAC3E,GAAI,CAAAC,QAAQ,CAAGf,cAAc,CAAC,CAAEY,IAAI,CAAE,OAAO,CAAEI,KAAK,CAAEb,KAAM,CAAC,CAAC,CAC9D,GAAI,CAAAc,GAAG,CAAG,KAAM,CAAAlB,YAAY,CAACmB,YAAY,CAACH,QAAQ,CAAC,CACnDJ,SAAS,CAAEQ,CAAC,GAAM,CAAE,GAAGA,CAAC,CAAEC,KAAK,CAAE,KAAM,CAAC,CAAC,CAAC,CAC5C,CAAE,MAAOC,GAAG,CAAE,CACZ,GAAI,CAAET,IAAI,CAAEC,GAAI,CAAC,CAAGZ,aAAa,CAACoB,GAAG,CAAC,CACtCV,SAAS,CAAEQ,CAAC,GAAM,CAAE,GAAGA,CAAC,CAAEC,KAAK,CAAE,IAAI,CAAEE,SAAS,CAAET,GAAI,CAAC,CAAC,CAAC,CAC3D,CACF,CAAC,CAED,MAAO,MAAM,CAAAU,gBAAgB,CAAG,KAAAA,CAC9BpB,KAAa,CACbqB,YAA6C,GAC1C,CACH,GAAI,CACF,GAAI,CAAAT,QAAQ,CAAGf,cAAc,CAAC,CAAEY,IAAI,CAAE,UAAU,CAAEI,KAAK,CAAEb,KAAM,CAAC,CAAC,CACjE,GAAI,CAAAc,GAAG,CAAG,KAAM,CAAAlB,YAAY,CAACmB,YAAY,CAACH,QAAQ,CAAC,CACnDS,YAAY,CAAEL,CAAC,GAAM,CAAE,GAAGA,CAAC,CAAEC,KAAK,CAAE,KAAM,CAAC,CAAC,CAAC,CAC/C,CAAE,MAAOC,GAAG,CAAE,CACZ,GAAI,CAAET,IAAI,CAAEC,GAAI,CAAC,CAAGZ,aAAa,CAACoB,GAAG,CAAC,CACtCG,YAAY,CAAEL,CAAC,GAAM,CAAE,GAAGA,CAAC,CAAEC,KAAK,CAAE,IAAI,CAAEE,SAAS,CAAET,GAAI,CAAC,CAAC,CAAC,CAC9D,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAY,gBAAgB,CAAGA,CAC9BhB,QAAgB,CAChBiB,YAA6C,GAC1C,CACH,GAAI,CAAAC,MAAM,CAAGnB,iBAAiB,CAACC,QAAQ,CAAC,CACxC,GAAI,CAACkB,MAAM,CACTD,YAAY,CAAEP,CAAC,GAAM,CACnB,GAAGA,CAAC,CACJC,KAAK,CAAE,CAACO,MAAM,CAAG,IAAI,CAAG,KAAK,CAC7BL,SAAS,CAAE,CAACK,MAAM,CAAG7B,WAAW,CAAC8B,QAAQ,CAAG,EAC9C,CAAC,CAAC,CAAC,CACP,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}