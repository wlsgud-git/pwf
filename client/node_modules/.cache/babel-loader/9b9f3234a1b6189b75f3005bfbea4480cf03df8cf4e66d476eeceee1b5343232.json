{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashh1\\\\Desktop\\\\project\\\\PlayWithFriends\\\\client\\\\src\\\\page\\\\streamroom.tsx\",\n  _s = $RefreshSig$();\nimport \"../css/room/streamRoom.css\";\nimport \"../css/room/menu.css\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { socketClient } from \"../util/socket\";\nimport { stream_service } from \"../service/stream.service\";\nimport { emitter } from \"../util/event\";\nimport { useSelector } from \"react-redux\";\n\n// type\n\n// component\n\nimport { RoomMain } from \"../components/room/roomMain\";\nimport { getMyMedia, getStream } from \"../util/stream\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MediaModal = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 10\n  }, this);\n};\n_c = MediaModal;\nexport const StreamRoom = () => {\n  _s();\n  let user = useSelector(state => state.user);\n  let {\n    id\n  } = useParams();\n  let navigate = useNavigate();\n\n  // ref\n  let peerConnects = useRef({});\n\n  // state\n  let [room, setRoom] = useState(null); //방 정보\n  let [stream, setStream] = useState(null);\n  let [connects, setConnects] = useState({});\n  let [invitationModal, setInvitationModal] = useState(false);\n  let [Medias, setMedias] = useState({\n    video: [],\n    audio: []\n  });\n\n  // 방 입장/퇴장 관련 --------------------------\n  let joinRoomHandler = who => {\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\n  };\n\n  // room leave 처리\n  let leaveRoomHandler = who => {\n    peerConnects.current[who].pc.close();\n    delete peerConnects.current[who];\n    setConnects(c => {\n      const copy = {\n        ...c\n      };\n      delete copy[who];\n      return copy;\n    });\n  };\n\n  // 비디오/오디오 상태 ----------------------------\n\n  // 상대 화면 on/off\n  let trackHandler = (to, type, state) => {\n    setConnects(c => {\n      let stInfo = c[to];\n      type == \"audio\" ? stInfo.audio = state : stInfo.video = state;\n      return {\n        ...c,\n        [to]: stInfo\n      };\n    });\n  };\n\n  // p2p연결 관련 --------------------------------\n  // connect 연결\n  let peerConnect = async (to, stream) => {\n    let pc = new RTCPeerConnection();\n    const channel = pc.createDataChannel(\"chat\");\n    stream === null || stream === void 0 ? void 0 : stream.getTracks().forEach(track => {\n      pc.addTrack(track, stream);\n    });\n\n    // signaling event\n    pc.onicecandidate = e => {\n      if (e.candidate) socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\n    };\n    pc.ontrack = e => {\n      let kind = e.track.kind;\n      // peerConnects.current[to] = { pc, channel };\n      setConnects(c => {\n        let stream = new MediaStream();\n        let audio = true;\n        let video = true;\n\n        // 만약에 event track이 stream에 존재하지 않으면 추가해줌\n        if (!stream.getTracks().includes(e.track)) stream.addTrack(e.track);\n        // 미디어 kind타입에 활성화 상태 알려줌\n        kind == \"audio\" ? audio = e.track.enabled : video = e.track.enabled;\n        return {\n          ...c,\n          [to]: {\n            pc,\n            channel,\n            stream,\n            video,\n            audio\n          }\n        };\n      });\n    };\n\n    // channel event\n    channel.onmessage = e => {\n      emitter.emit(\"menu chat\", JSON.parse(e.data));\n    };\n\n    // offer 부분\n    let offer = await pc.createOffer();\n    await pc.setLocalDescription(offer);\n    socketClient.emit(\"offer\", user.nickname, to, offer);\n    peerConnects.current[to] = {\n      pc,\n      channel\n    };\n  };\n\n  // 연결 시작\n  let start = async () => {\n    try {\n      var _room$participants;\n      let stream = await getStream();\n      let devices = await getMyMedia();\n      setStream(stream);\n\n      // let videos = devices.filter((track) => track.kind === \"videoinput\");\n      // let audios = devices.filter((track) => track.kind === \"audioinput\");\n\n      // cameras.forEach((camera) => console.log(camera));\n\n      // 트랙을 더해줌\n      if (room) (_room$participants = room.participants) === null || _room$participants === void 0 ? void 0 : _room$participants.map(async val => {\n        if (val.nickname !== user.nickname) {\n          await peerConnect(val.nickname, stream);\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // offer처리\n  let offerHandler = async (from, offer) => {\n    console.log(`offer from ${from}`);\n    if (!peerConnects.current[from]) await peerConnect(from);\n    try {\n      var _peerConnects$current, _peerConnects$current2;\n      await ((_peerConnects$current = peerConnects.current[from].pc) === null || _peerConnects$current === void 0 ? void 0 : _peerConnects$current.setRemoteDescription(new RTCSessionDescription(offer)));\n      if (((_peerConnects$current2 = peerConnects.current[from]) === null || _peerConnects$current2 === void 0 ? void 0 : _peerConnects$current2.pc.signalingState) == \"have-remote-offer\" && user.nickname !== \"\") {\n        var _peerConnects$current3, _peerConnects$current4;\n        const answer = await ((_peerConnects$current3 = peerConnects.current[from]) === null || _peerConnects$current3 === void 0 ? void 0 : _peerConnects$current3.pc.createAnswer());\n        await ((_peerConnects$current4 = peerConnects.current[from]) === null || _peerConnects$current4 === void 0 ? void 0 : _peerConnects$current4.pc.setLocalDescription(answer));\n        socketClient.emit(\"answer\", user.nickname, from, answer);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // answer 처리\n  let answerHandler = async (from, answer) => {\n    try {\n      var _peerConnects$current5, _peerConnects$current6;\n      if (!((_peerConnects$current5 = peerConnects.current[from]) !== null && _peerConnects$current5 !== void 0 && _peerConnects$current5.pc.currentRemoteDescription)) await ((_peerConnects$current6 = peerConnects.current[from]) === null || _peerConnects$current6 === void 0 ? void 0 : _peerConnects$current6.pc.setRemoteDescription(answer));\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // candidate처리\n  let candidateHandler = async (from, candidate) => {\n    // console.log(`candidate from ${from}`);\n    if (!peerConnects.current[from]) await peerConnect(from);\n    try {\n      var _peerConnects$current7;\n      if ((_peerConnects$current7 = peerConnects.current[from].pc) !== null && _peerConnects$current7 !== void 0 && _peerConnects$current7.remoteDescription) {\n        var _peerConnects$current8;\n        const iceCandidate = new RTCIceCandidate(candidate);\n        await ((_peerConnects$current8 = peerConnects.current[from]) === null || _peerConnects$current8 === void 0 ? void 0 : _peerConnects$current8.pc.addIceCandidate(iceCandidate));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  // useEffect -------------------------------\n\n  // 시작시 방 정보 얻어옴\n  useEffect(() => {\n    let data = async () => {\n      try {\n        let room = await stream_service.getStreamRoomData(id);\n        setRoom(room.room);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    data();\n  }, []);\n\n  // 룸정보가 오면 start시작\n  useEffect(() => {\n    if (room && user.id) {\n      let participants = room.participants.map(val => val);\n      // 참가자가 아니라면 시작화면으로\n      if (!participants.find(val => val.id === user.id)) {\n        alert(\"참가자가 아닙니다.\");\n        navigate(\"/\");\n        return;\n      }\n      participants.map(val => {\n        if (val.nickname !== user.nickname) {\n          peerConnect(val.nickname);\n        }\n      });\n      start();\n    }\n  }, [room]);\n\n  // 소켓 연결\n  useEffect(() => {\n    socketClient.emit(\"join\", `room${id}`);\n    socketClient.on(\"other join\", joinRoomHandler);\n    socketClient.on(\"offer\", offerHandler); //signaling offer\n    socketClient.on(\"answer\", answerHandler); //signaling answer\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\n    socketClient.on(\"toggle track\", trackHandler);\n    return () => {\n      socketClient.on(\"other join\", joinRoomHandler);\n      socketClient.off(\"offer\", offerHandler);\n      socketClient.off(\"answer\", answerHandler);\n      socketClient.off(\"candidate\", candidateHandler);\n      socketClient.off(\"leave room\", leaveRoomHandler);\n      socketClient.off(\"toggle track\", trackHandler);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"page streamRoom_page\",\n    children: /*#__PURE__*/_jsxDEV(RoomMain, {\n      user: user,\n      stream: stream,\n      connects: connects,\n      participants: room === null || room === void 0 ? void 0 : room.participants\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 254,\n    columnNumber: 5\n  }, this);\n};\n_s(StreamRoom, \"yxbe8QIabkDkFLDyYEAsP8F6FmU=\", false, function () {\n  return [useSelector, useParams, useNavigate];\n});\n_c2 = StreamRoom;\nvar _c, _c2;\n$RefreshReg$(_c, \"MediaModal\");\n$RefreshReg$(_c2, \"StreamRoom\");","map":{"version":3,"names":["useEffect","useRef","useState","useNavigate","useParams","socketClient","stream_service","emitter","useSelector","RoomMain","getMyMedia","getStream","jsxDEV","_jsxDEV","MediaModal","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","StreamRoom","_s","user","state","id","navigate","peerConnects","room","setRoom","stream","setStream","connects","setConnects","invitationModal","setInvitationModal","Medias","setMedias","video","audio","joinRoomHandler","who","leaveRoomHandler","current","pc","close","c","copy","trackHandler","to","type","stInfo","peerConnect","RTCPeerConnection","channel","createDataChannel","getTracks","forEach","track","addTrack","onicecandidate","e","candidate","emit","nickname","ontrack","kind","MediaStream","includes","enabled","onmessage","JSON","parse","data","offer","createOffer","setLocalDescription","start","_room$participants","devices","participants","map","val","err","console","log","offerHandler","from","_peerConnects$current","_peerConnects$current2","setRemoteDescription","RTCSessionDescription","signalingState","_peerConnects$current3","_peerConnects$current4","answer","createAnswer","answerHandler","_peerConnects$current5","_peerConnects$current6","currentRemoteDescription","candidateHandler","_peerConnects$current7","remoteDescription","_peerConnects$current8","iceCandidate","RTCIceCandidate","addIceCandidate","getStreamRoomData","find","alert","on","off","children","_c2","$RefreshReg$"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/page/streamroom.tsx"],"sourcesContent":["import \"../css/room/streamRoom.css\";\r\nimport \"../css/room/menu.css\";\r\n\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport { Form, useNavigate, useParams } from \"react-router-dom\";\r\nimport { socketClient } from \"../util/socket\";\r\nimport { stream_service } from \"../service/stream.service\";\r\nimport { emitter } from \"../util/event\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../context/store\";\r\n\r\n// type\r\nimport { Room } from \"../types/room\";\r\nimport { User } from \"../types/user\";\r\nimport { PeerConnects } from \"../types/room\";\r\n\r\n// component\r\nimport { Menu } from \"../components/room/menu\";\r\nimport { RoomMain } from \"../components/room/roomMain\";\r\nimport { getMyMedia, getStream } from \"../util/stream\";\r\n\r\nexport const MediaModal = () => {\r\n  return <div className=\"\"></div>;\r\n};\r\n\r\nexport const StreamRoom = () => {\r\n  let user = useSelector((state: RootState) => state.user);\r\n  let { id } = useParams();\r\n  let navigate = useNavigate();\r\n\r\n  // ref\r\n  let peerConnects = useRef<{\r\n    [nickname: string]: { pc: RTCPeerConnection; channel: RTCDataChannel };\r\n  }>({});\r\n\r\n  // state\r\n  let [room, setRoom] = useState<Room | null>(null); //방 정보\r\n  let [stream, setStream] = useState<MediaStream | null>(null);\r\n  let [connects, setConnects] = useState<PeerConnects>({});\r\n  let [invitationModal, setInvitationModal] = useState<boolean>(false);\r\n  let [Medias, setMedias] = useState<{\r\n    video: MediaStream[];\r\n    audio: MediaStream[];\r\n  }>({ video: [], audio: [] });\r\n\r\n  // 방 입장/퇴장 관련 --------------------------\r\n  let joinRoomHandler = (who: string) => {\r\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\r\n  };\r\n\r\n  // room leave 처리\r\n  let leaveRoomHandler = (who: string) => {\r\n    peerConnects.current[who].pc.close();\r\n    delete peerConnects.current[who];\r\n    setConnects((c) => {\r\n      const copy = { ...c };\r\n      delete copy[who];\r\n      return copy;\r\n    });\r\n  };\r\n\r\n  // 비디오/오디오 상태 ----------------------------\r\n\r\n  // 상대 화면 on/off\r\n  let trackHandler = (to: string, type: \"audio\" | \"video\", state: boolean) => {\r\n    setConnects((c) => {\r\n      let stInfo = c[to];\r\n\r\n      type == \"audio\" ? (stInfo.audio = state) : (stInfo.video = state);\r\n\r\n      return { ...c, [to]: stInfo };\r\n    });\r\n  };\r\n\r\n  // p2p연결 관련 --------------------------------\r\n  // connect 연결\r\n  let peerConnect = async (to: string, stream?: MediaStream) => {\r\n    let pc = new RTCPeerConnection();\r\n    const channel = pc.createDataChannel(\"chat\");\r\n\r\n    stream?.getTracks().forEach((track) => {\r\n      pc.addTrack(track, stream);\r\n    });\r\n\r\n    // signaling event\r\n    pc.onicecandidate = (e) => {\r\n      if (e.candidate)\r\n        socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\r\n    };\r\n\r\n    pc.ontrack = (e) => {\r\n      let kind = e.track.kind;\r\n      // peerConnects.current[to] = { pc, channel };\r\n      setConnects((c) => {\r\n        let stream = new MediaStream();\r\n        let audio = true;\r\n        let video = true;\r\n\r\n        // 만약에 event track이 stream에 존재하지 않으면 추가해줌\r\n        if (!stream.getTracks().includes(e.track)) stream.addTrack(e.track);\r\n        // 미디어 kind타입에 활성화 상태 알려줌\r\n        kind == \"audio\" ? (audio = e.track.enabled) : (video = e.track.enabled);\r\n\r\n        return {\r\n          ...c,\r\n          [to]: { pc, channel, stream, video, audio },\r\n        };\r\n      });\r\n    };\r\n\r\n    // channel event\r\n    channel.onmessage = (e) => {\r\n      emitter.emit(\"menu chat\", JSON.parse(e.data));\r\n    };\r\n\r\n    // offer 부분\r\n    let offer = await pc.createOffer();\r\n    await pc.setLocalDescription(offer!);\r\n    socketClient.emit(\"offer\", user.nickname, to, offer);\r\n\r\n    peerConnects.current[to] = { pc, channel };\r\n  };\r\n\r\n  // 연결 시작\r\n  let start = async () => {\r\n    try {\r\n      let stream = await getStream();\r\n      let devices = await getMyMedia();\r\n\r\n      setStream(stream!);\r\n\r\n      // let videos = devices.filter((track) => track.kind === \"videoinput\");\r\n      // let audios = devices.filter((track) => track.kind === \"audioinput\");\r\n\r\n      // cameras.forEach((camera) => console.log(camera));\r\n\r\n      // 트랙을 더해줌\r\n      if (room)\r\n        room.participants?.map(async (val: any) => {\r\n          if (val.nickname !== user.nickname) {\r\n            await peerConnect(val.nickname, stream);\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // offer처리\r\n  let offerHandler = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    console.log(`offer from ${from}`);\r\n    if (!peerConnects.current[from]) await peerConnect(from);\r\n    try {\r\n      await peerConnects.current[from].pc?.setRemoteDescription(\r\n        new RTCSessionDescription(offer)\r\n      );\r\n\r\n      if (\r\n        peerConnects.current[from]?.pc.signalingState == \"have-remote-offer\" &&\r\n        user.nickname !== \"\"\r\n      ) {\r\n        const answer = await peerConnects.current[from]?.pc.createAnswer();\r\n        await peerConnects.current[from]?.pc.setLocalDescription(answer!);\r\n        socketClient.emit(\"answer\", user.nickname, from, answer);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // answer 처리\r\n  let answerHandler = async (\r\n    from: string,\r\n    answer: RTCSessionDescriptionInit\r\n  ) => {\r\n    try {\r\n      if (!peerConnects.current[from]?.pc.currentRemoteDescription)\r\n        await peerConnects.current[from]?.pc.setRemoteDescription(answer!);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // candidate처리\r\n  let candidateHandler = async (from: string, candidate: RTCIceCandidate) => {\r\n    // console.log(`candidate from ${from}`);\r\n    if (!peerConnects.current[from]) await peerConnect(from);\r\n    try {\r\n      if (peerConnects.current[from].pc?.remoteDescription) {\r\n        const iceCandidate = new RTCIceCandidate(candidate);\r\n        await peerConnects.current[from]?.pc.addIceCandidate(iceCandidate);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // useEffect -------------------------------\r\n\r\n  // 시작시 방 정보 얻어옴\r\n  useEffect(() => {\r\n    let data = async () => {\r\n      try {\r\n        let room = await stream_service.getStreamRoomData(id!);\r\n        setRoom(room.room);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    data();\r\n  }, []);\r\n\r\n  // 룸정보가 오면 start시작\r\n  useEffect(() => {\r\n    if (room && user.id) {\r\n      let participants = (room.participants as User[]).map((val) => val);\r\n      // 참가자가 아니라면 시작화면으로\r\n      if (!participants.find((val) => val.id === user.id)) {\r\n        alert(\"참가자가 아닙니다.\");\r\n        navigate(\"/\");\r\n        return;\r\n      }\r\n      participants.map((val: any) => {\r\n        if (val.nickname !== user.nickname) {\r\n          peerConnect(val.nickname);\r\n        }\r\n      });\r\n      start();\r\n    }\r\n  }, [room]);\r\n\r\n  // 소켓 연결\r\n  useEffect(() => {\r\n    socketClient.emit(\"join\", `room${id}`);\r\n\r\n    socketClient.on(\"other join\", joinRoomHandler);\r\n    socketClient.on(\"offer\", offerHandler); //signaling offer\r\n    socketClient.on(\"answer\", answerHandler); //signaling answer\r\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\r\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\r\n    socketClient.on(\"toggle track\", trackHandler);\r\n\r\n    return () => {\r\n      socketClient.on(\"other join\", joinRoomHandler);\r\n      socketClient.off(\"offer\", offerHandler);\r\n      socketClient.off(\"answer\", answerHandler);\r\n      socketClient.off(\"candidate\", candidateHandler);\r\n      socketClient.off(\"leave room\", leaveRoomHandler);\r\n      socketClient.off(\"toggle track\", trackHandler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"page streamRoom_page\">\r\n      {/* main */}\r\n      <RoomMain\r\n        user={user}\r\n        stream={stream}\r\n        connects={connects}\r\n        participants={room?.participants}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}