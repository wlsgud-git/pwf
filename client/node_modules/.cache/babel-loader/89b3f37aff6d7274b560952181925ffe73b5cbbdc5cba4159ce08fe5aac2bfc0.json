{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nconst initialState = {\n  id: 0,\n  nickname: \"\",\n  profile_img: \"\",\n  friends: [],\n  email: \"\",\n  request_friends: []\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // reducer\n  reducers: {\n    onlineUpdate: data => {\n      return {\n        ...state,\n        list: [...data.payload.list],\n        check: data.payload.check\n      };\n    }\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        id,\n        email,\n        nickname,\n        profile_img,\n        request_friend_list,\n        friends\n      } = action.payload;\n      state.id = id;\n      state.email = email;\n      state.profile_img = profile_img;\n      state.nickname = nickname;\n      if (request_friend_list && request_friend_list.length) state.request_friends = request_friend_list.map(val => val);\n      if (friends && friends.length) state.friends = friends.map(val => val);\n    });\n\n    // 친구요청에 대한 결과\n    builder.addCase(userAction.requestFriendHandle.fulfilled, (state, action) => {\n      var _state$request_friend;\n      let {\n        result,\n        sender,\n        msg\n      } = action.payload;\n      state.request_friends = (_state$request_friend = state.request_friends) === null || _state$request_friend === void 0 ? void 0 : _state$request_friend.filter(val => {\n        var _state$friends;\n        if (val.nickname == sender) (_state$friends = state.friends) === null || _state$friends === void 0 ? void 0 : _state$friends.push(val);\n        return val.nickname != sender;\n      });\n      alert(msg);\n      return;\n    });\n  }\n});\nexport const {\n  onlineUpdate\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","id","nickname","profile_img","friends","email","request_friends","userSlice","name","reducers","onlineUpdate","data","state","list","payload","check","extraReducers","builder","addCase","getUserAction","fulfilled","action","request_friend_list","length","map","val","requestFriendHandle","_state$request_friend","result","sender","msg","filter","_state$friends","push","alert","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/reducer/userReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { isSwitchStatement } from \"typescript\";\r\n\r\ninterface userReducer {\r\n  // getUser(state: User, info: PayloadAction<User>): void;\r\n  //   createUser(state: User, info: PayloadAction<string>): void;\r\n  //   updateUser: (state: User, info: User) => void;\r\n  //   deleteUser: (state: User, id: string) => void;\r\n}\r\n\r\nconst initialState: User = {\r\n  id: 0,\r\n  nickname: \"\",\r\n  profile_img: \"\",\r\n  friends: [],\r\n  email: \"\",\r\n  request_friends: [],\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    onlineUpdate: (data: any) => {\r\n      return {\r\n        ...state,\r\n        list: [...data.payload.list],\r\n        check: data.payload.check,\r\n      };\r\n    },\r\n  } satisfies userReducer, // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { id, email, nickname, profile_img, request_friend_list, friends } =\r\n        action.payload;\r\n\r\n      state.id = id;\r\n      state.email = email;\r\n      state.profile_img = profile_img;\r\n      state.nickname = nickname;\r\n\r\n      if (request_friend_list && request_friend_list.length)\r\n        state.request_friends = request_friend_list.map((val: User) => val);\r\n      if (friends && friends.length)\r\n        state.friends = friends.map((val: User) => val);\r\n    });\r\n\r\n    // 친구요청에 대한 결과\r\n    builder.addCase(\r\n      userAction.requestFriendHandle.fulfilled,\r\n      (state, action) => {\r\n        let { result, sender, msg } = action.payload;\r\n\r\n        state.request_friends = state.request_friends?.filter((val) => {\r\n          if (val.nickname == sender) state.friends?.push(val);\r\n          return val.nickname != sender;\r\n        });\r\n\r\n        alert(msg);\r\n        return;\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nexport const { onlineUpdate } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAWA,MAAMC,YAAkB,GAAG;EACzBC,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE,EAAE;EACfC,OAAO,EAAE,EAAE;EACXC,KAAK,EAAE,EAAE;EACTC,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,SAAS,GAAGT,WAAW,CAAC;EAC5BU,IAAI,EAAE,MAAM;EACZR,YAAY;EAAE;EACdS,QAAQ,EAAE;IACRC,YAAY,EAAGC,IAAS,IAAK;MAC3B,OAAO;QACL,GAAGC,KAAK;QACRC,IAAI,EAAE,CAAC,GAAGF,IAAI,CAACG,OAAO,CAACD,IAAI,CAAC;QAC5BE,KAAK,EAAEJ,IAAI,CAACG,OAAO,CAACC;MACtB,CAAC;IACH;EACF,CAAuB;EAAE;EACzBC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACnB,UAAU,CAACoB,aAAa,CAACC,SAAS,EAAE,CAACR,KAAK,EAAES,MAAM,KAAK;MACrE,IAAI;QAAEpB,EAAE;QAAEI,KAAK;QAAEH,QAAQ;QAAEC,WAAW;QAAEmB,mBAAmB;QAAElB;MAAQ,CAAC,GACpEiB,MAAM,CAACP,OAAO;MAEhBF,KAAK,CAACX,EAAE,GAAGA,EAAE;MACbW,KAAK,CAACP,KAAK,GAAGA,KAAK;MACnBO,KAAK,CAACT,WAAW,GAAGA,WAAW;MAC/BS,KAAK,CAACV,QAAQ,GAAGA,QAAQ;MAEzB,IAAIoB,mBAAmB,IAAIA,mBAAmB,CAACC,MAAM,EACnDX,KAAK,CAACN,eAAe,GAAGgB,mBAAmB,CAACE,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;MACrE,IAAIrB,OAAO,IAAIA,OAAO,CAACmB,MAAM,EAC3BX,KAAK,CAACR,OAAO,GAAGA,OAAO,CAACoB,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;IACnD,CAAC,CAAC;;IAEF;IACAR,OAAO,CAACC,OAAO,CACbnB,UAAU,CAAC2B,mBAAmB,CAACN,SAAS,EACxC,CAACR,KAAK,EAAES,MAAM,KAAK;MAAA,IAAAM,qBAAA;MACjB,IAAI;QAAEC,MAAM;QAAEC,MAAM;QAAEC;MAAI,CAAC,GAAGT,MAAM,CAACP,OAAO;MAE5CF,KAAK,CAACN,eAAe,IAAAqB,qBAAA,GAAGf,KAAK,CAACN,eAAe,cAAAqB,qBAAA,uBAArBA,qBAAA,CAAuBI,MAAM,CAAEN,GAAG,IAAK;QAAA,IAAAO,cAAA;QAC7D,IAAIP,GAAG,CAACvB,QAAQ,IAAI2B,MAAM,EAAE,CAAAG,cAAA,GAAApB,KAAK,CAACR,OAAO,cAAA4B,cAAA,uBAAbA,cAAA,CAAeC,IAAI,CAACR,GAAG,CAAC;QACpD,OAAOA,GAAG,CAACvB,QAAQ,IAAI2B,MAAM;MAC/B,CAAC,CAAC;MAEFK,KAAK,CAACJ,GAAG,CAAC;MACV;IACF,CACF,CAAC;EACH;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEpB;AAAa,CAAC,GAAGH,SAAS,CAAC4B,OAAO;AACjD,eAAe5B,SAAS,CAAC6B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}