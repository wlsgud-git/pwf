{"ast":null,"code":"import { Room, createLocalTracks } from \"livekit-client\";\n\n// 방 연결\nexport let connectRoom = async token => {\n  try {\n    const room = await new Room();\n    await room.connect(\"http://localhost:7880\", token);\n    return room;\n  } catch (err) {\n    throw err;\n  }\n};\n\n// 유저 스트림 가져오기\nexport let getStream = async (audio, video) => {\n  try {\n    const tracks = await createLocalTracks({\n      audio,\n      video\n    });\n    return tracks;\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport let getMediaStream = tracks => new MediaStream(tracks.map(track => track.mediaStreamTrack));\n\n// 내 관련 미디어 가져오기\nexport let getMyMedia = async () => {\n  try {\n    let devices = await navigator.mediaDevices.enumerateDevices();\n    return devices;\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n// 화면 공유 미디어 가져오기\nexport let getShareMedia = async () => {\n  try {\n    let devices = await navigator.mediaDevices.enumerateDevices();\n    return devices;\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"names":["Room","createLocalTracks","connectRoom","token","room","connect","err","getStream","audio","video","tracks","console","log","getMediaStream","MediaStream","map","track","mediaStreamTrack","getMyMedia","devices","navigator","mediaDevices","enumerateDevices","getShareMedia"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/util/stream.ts"],"sourcesContent":["import {\r\n  Track,\r\n  Room,\r\n  RemoteParticipant,\r\n  RemoteTrackPublication,\r\n  createLocalTracks,\r\n  LocalVideoTrack,\r\n  LocalTrack,\r\n  LocalAudioTrack,\r\n} from \"livekit-client\";\r\n\r\n// 방 연결\r\nexport let connectRoom = async (token: string) => {\r\n  try {\r\n    const room = await new Room();\r\n    await room.connect(\"http://localhost:7880\", token);\r\n    return room;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n\r\n// 유저 스트림 가져오기\r\nexport let getStream = async (audio: boolean, video: boolean) => {\r\n  try {\r\n    const tracks = await createLocalTracks({ audio, video });\r\n    return tracks;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nexport let getMediaStream = (tracks: LocalTrack<Track.Kind>[]) =>\r\n  new MediaStream(tracks.map((track) => track.mediaStreamTrack));\r\n\r\n// 내 관련 미디어 가져오기\r\nexport let getMyMedia = async () => {\r\n  try {\r\n    let devices = await navigator.mediaDevices.enumerateDevices();\r\n    return devices;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\n// 화면 공유 미디어 가져오기\r\nexport let getShareMedia = async () => {\r\n  try {\r\n    let devices = await navigator.mediaDevices.enumerateDevices();\r\n    return devices;\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAEEA,IAAI,EAGJC,iBAAiB,QAIZ,gBAAgB;;AAEvB;AACA,OAAO,IAAIC,WAAW,GAAG,MAAOC,KAAa,IAAK;EAChD,IAAI;IACF,MAAMC,IAAI,GAAG,MAAM,IAAIJ,IAAI,CAAC,CAAC;IAC7B,MAAMI,IAAI,CAACC,OAAO,CAAC,uBAAuB,EAAEF,KAAK,CAAC;IAClD,OAAOC,IAAI;EACb,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZ,MAAMA,GAAG;EACX;AACF,CAAC;;AAED;AACA,OAAO,IAAIC,SAAS,GAAG,MAAAA,CAAOC,KAAc,EAAEC,KAAc,KAAK;EAC/D,IAAI;IACF,MAAMC,MAAM,GAAG,MAAMT,iBAAiB,CAAC;MAAEO,KAAK;MAAEC;IAAM,CAAC,CAAC;IACxD,OAAOC,MAAM;EACf,CAAC,CAAC,OAAOJ,GAAG,EAAE;IACZK,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;EAClB;AACF,CAAC;AAED,OAAO,IAAIO,cAAc,GAAIH,MAAgC,IAC3D,IAAII,WAAW,CAACJ,MAAM,CAACK,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACC,gBAAgB,CAAC,CAAC;;AAEhE;AACA,OAAO,IAAIC,UAAU,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IACF,IAAIC,OAAO,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,gBAAgB,CAAC,CAAC;IAC7D,OAAOH,OAAO;EAChB,CAAC,CAAC,OAAOb,GAAG,EAAE;IACZK,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;EAClB;AACF,CAAC;;AAED;AACA,OAAO,IAAIiB,aAAa,GAAG,MAAAA,CAAA,KAAY;EACrC,IAAI;IACF,IAAIJ,OAAO,GAAG,MAAMC,SAAS,CAACC,YAAY,CAACC,gBAAgB,CAAC,CAAC;IAC7D,OAAOH,OAAO;EAChB,CAAC,CAAC,OAAOb,GAAG,EAAE;IACZK,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;EAClB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}