{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nconst initialState = {\n  id: 0,\n  nickname: \"\",\n  profile_img: \"\",\n  friends: [],\n  email: \"\",\n  request_friends: []\n  //   profile_img: \"\",\n  //   my_friends: [],\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // reducer\n  reducers: {},\n  // actions\n  extraReducers: builder => {\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        id,\n        email,\n        nickname,\n        profile_img,\n        reqest_friends\n      } = action.payload;\n      state.id = id;\n      state.email = email;\n      state.profile_img = profile_img;\n      state.nickname = nickname;\n      console.log(\"친구 요청:\", reqest_friends);\n      if (reqest_friends && reqest_friends.length) state.request_friends = reqest_friends.map(val => val);\n    });\n  }\n});\n\n// export const { getUser } = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","id","nickname","profile_img","friends","email","request_friends","userSlice","name","reducers","extraReducers","builder","addCase","getUserAction","fulfilled","state","action","reqest_friends","payload","console","log","length","map","val","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/reducer/userReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { isSwitchStatement } from \"typescript\";\r\n\r\ninterface userReducer {\r\n  // getUser(state: User, info: PayloadAction<User>): void;\r\n  //   createUser(state: User, info: PayloadAction<string>): void;\r\n  //   updateUser: (state: User, info: User) => void;\r\n  //   deleteUser: (state: User, id: string) => void;\r\n}\r\n\r\nconst initialState: User = {\r\n  id: 0,\r\n  nickname: \"\",\r\n  profile_img: \"\",\r\n  friends: [],\r\n  email: \"\",\r\n  request_friends: [],\r\n  //   profile_img: \"\",\r\n  //   my_friends: [],\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState, // reducer\r\n  reducers: {} satisfies userReducer, // actions\r\n  extraReducers: (builder) => {\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { id, email, nickname, profile_img, reqest_friends } = action.payload;\r\n\r\n      state.id = id;\r\n      state.email = email;\r\n      state.profile_img = profile_img;\r\n      state.nickname = nickname;\r\n      console.log(\"친구 요청:\", reqest_friends);\r\n      if (reqest_friends && reqest_friends.length)\r\n        state.request_friends = reqest_friends.map((val: User) => val);\r\n    });\r\n  },\r\n});\r\n\r\n// export const { getUser } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAWA,MAAMC,YAAkB,GAAG;EACzBC,EAAE,EAAE,CAAC;EACLC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAE,EAAE;EACfC,OAAO,EAAE,EAAE;EACXC,KAAK,EAAE,EAAE;EACTC,eAAe,EAAE;EACjB;EACA;AACF,CAAC;AAED,MAAMC,SAAS,GAAGT,WAAW,CAAC;EAC5BU,IAAI,EAAE,MAAM;EACZR,YAAY;EAAE;EACdS,QAAQ,EAAE,CAAC,CAAuB;EAAE;EACpCC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CAACC,OAAO,CAACb,UAAU,CAACc,aAAa,CAACC,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MACrE,IAAI;QAAEf,EAAE;QAAEI,KAAK;QAAEH,QAAQ;QAAEC,WAAW;QAAEc;MAAe,CAAC,GAAGD,MAAM,CAACE,OAAO;MAEzEH,KAAK,CAACd,EAAE,GAAGA,EAAE;MACbc,KAAK,CAACV,KAAK,GAAGA,KAAK;MACnBU,KAAK,CAACZ,WAAW,GAAGA,WAAW;MAC/BY,KAAK,CAACb,QAAQ,GAAGA,QAAQ;MACzBiB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEH,cAAc,CAAC;MACrC,IAAIA,cAAc,IAAIA,cAAc,CAACI,MAAM,EACzCN,KAAK,CAACT,eAAe,GAAGW,cAAc,CAACK,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;IAClE,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA,eAAehB,SAAS,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}