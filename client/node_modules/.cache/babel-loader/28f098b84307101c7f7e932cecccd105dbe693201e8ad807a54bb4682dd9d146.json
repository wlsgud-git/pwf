{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nimport { friendAction } from \"../actions/friendAction\";\nconst initialState = {\n  request_friends: {},\n  friends: {}\n};\nconst friendSlice = createSlice({\n  name: \"friend\",\n  initialState,\n  // reducer\n  reducers: {\n    friendRequest: (state, data) => {\n      state.request_friends.push(data.payload.from);\n    },\n    friendReqeustHandle: (state, data) => {\n      state.friends[data.payload.id] = data.payload;\n    },\n    init: current => current = initialState\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        request_friends,\n        friends\n      } = action.payload.user;\n      if (request_friends && request_friends.length) state.request_friends = request_friends.map(val => val);\n      if (friends && friends.length) friends.map(val => state.friends[val.id] = val);\n    });\n\n    // 친구요청에 대한 결과\n    builder.addCase(friendAction.requestFriendHandle.fulfilled, (state, action) => {\n      let {\n        sender,\n        response\n      } = action.payload;\n      state.request_friends = state.request_friends.filter(val => {\n        // if (val.nickname == sender.nickname && response)\n        //   state.friends?[sender.id] = sender\n        return val.nickname != sender.nickname;\n      });\n    });\n  }\n});\nexport const {\n  friendRequest,\n  friendReqeustHandle\n} = friendSlice.actions;\nexport default friendSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","friendAction","initialState","request_friends","friends","friendSlice","name","reducers","friendRequest","state","data","push","payload","from","friendReqeustHandle","id","init","current","extraReducers","builder","addCase","getUserAction","fulfilled","action","user","length","map","val","requestFriendHandle","sender","response","filter","nickname","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/reducer/friendReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { friendAction } from \"../actions/friendAction\";\r\n\r\ninterface FriendProps {\r\n  request_friends: { [id: number]: User };\r\n  friends: { [id: number]: User };\r\n}\r\n\r\nconst initialState = {\r\n  request_friends: {},\r\n  friends: {},\r\n};\r\n\r\nconst friendSlice = createSlice({\r\n  name: \"friend\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    friendRequest: (state: any, data: any) => {\r\n      state.request_friends.push(data.payload.from);\r\n    },\r\n\r\n    friendReqeustHandle: (state: any, data: any) => {\r\n      state.friends[data.payload.id] = data.payload;\r\n    },\r\n    init: (current) => (current = initialState),\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { request_friends, friends } = action.payload.user;\r\n\r\n      if (request_friends && request_friends.length)\r\n        state.request_friends = request_friends.map((val: User) => val);\r\n      if (friends && friends.length)\r\n        friends.map((val: User) => (state.friends![val.id!] = val));\r\n    });\r\n\r\n    // 친구요청에 대한 결과\r\n    builder.addCase(\r\n      friendAction.requestFriendHandle.fulfilled,\r\n      (state, action) => {\r\n        let { sender, response } = action.payload;\r\n        state.request_friends = state.request_friends!.filter((val) => {\r\n          // if (val.nickname == sender.nickname && response)\r\n          //   state.friends?[sender.id] = sender\r\n          return val.nickname != sender.nickname;\r\n        });\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nexport const { friendRequest, friendReqeustHandle } = friendSlice.actions;\r\nexport default friendSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAEA,SAASC,YAAY,QAAQ,yBAAyB;AAOtD,MAAMC,YAAY,GAAG;EACnBC,eAAe,EAAE,CAAC,CAAC;EACnBC,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,MAAMC,WAAW,GAAGN,WAAW,CAAC;EAC9BO,IAAI,EAAE,QAAQ;EACdJ,YAAY;EAAE;EACdK,QAAQ,EAAE;IACRC,aAAa,EAAEA,CAACC,KAAU,EAAEC,IAAS,KAAK;MACxCD,KAAK,CAACN,eAAe,CAACQ,IAAI,CAACD,IAAI,CAACE,OAAO,CAACC,IAAI,CAAC;IAC/C,CAAC;IAEDC,mBAAmB,EAAEA,CAACL,KAAU,EAAEC,IAAS,KAAK;MAC9CD,KAAK,CAACL,OAAO,CAACM,IAAI,CAACE,OAAO,CAACG,EAAE,CAAC,GAAGL,IAAI,CAACE,OAAO;IAC/C,CAAC;IACDI,IAAI,EAAGC,OAAO,IAAMA,OAAO,GAAGf;EAChC,CAAC;EAED;EACAgB,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACpB,UAAU,CAACqB,aAAa,CAACC,SAAS,EAAE,CAACb,KAAK,EAAEc,MAAM,KAAK;MACrE,IAAI;QAAEpB,eAAe;QAAEC;MAAQ,CAAC,GAAGmB,MAAM,CAACX,OAAO,CAACY,IAAI;MAEtD,IAAIrB,eAAe,IAAIA,eAAe,CAACsB,MAAM,EAC3ChB,KAAK,CAACN,eAAe,GAAGA,eAAe,CAACuB,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;MACjE,IAAIvB,OAAO,IAAIA,OAAO,CAACqB,MAAM,EAC3BrB,OAAO,CAACsB,GAAG,CAAEC,GAAS,IAAMlB,KAAK,CAACL,OAAO,CAAEuB,GAAG,CAACZ,EAAE,CAAE,GAAGY,GAAI,CAAC;IAC/D,CAAC,CAAC;;IAEF;IACAR,OAAO,CAACC,OAAO,CACbnB,YAAY,CAAC2B,mBAAmB,CAACN,SAAS,EAC1C,CAACb,KAAK,EAAEc,MAAM,KAAK;MACjB,IAAI;QAAEM,MAAM;QAAEC;MAAS,CAAC,GAAGP,MAAM,CAACX,OAAO;MACzCH,KAAK,CAACN,eAAe,GAAGM,KAAK,CAACN,eAAe,CAAE4B,MAAM,CAAEJ,GAAG,IAAK;QAC7D;QACA;QACA,OAAOA,GAAG,CAACK,QAAQ,IAAIH,MAAM,CAACG,QAAQ;MACxC,CAAC,CAAC;IACJ,CACF,CAAC;EACH;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAExB,aAAa;EAAEM;AAAoB,CAAC,GAAGT,WAAW,CAAC4B,OAAO;AACzE,eAAe5B,WAAW,CAAC6B,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}