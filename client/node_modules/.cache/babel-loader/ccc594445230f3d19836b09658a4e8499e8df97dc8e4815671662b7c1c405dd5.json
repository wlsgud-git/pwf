{"ast":null,"code":"// import { getUser } from \"../reducer/userSlice\";\nimport { userService } from \"../../service/userservice\";\n// import { AppDispatch } from \"\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { useNavigate } from \"react-router-dom\";\n\n// types\n// import { UserAction, UserActionTypes } from \"../../types/user\";\n\nclass UserAction extends userService {\n  constructor(...args) {\n    var _s = $RefreshSig$();\n    super(...args);\n    this.getUserAction = _s(createAsyncThunk(\"user/fetchUser\", _s(async () => {\n      _s();\n      try {\n        let res = await this.getUser();\n        return await res;\n      } catch (error) {\n        let navigate = useNavigate();\n        throw error;\n      }\n    }, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n      return [useNavigate];\n    })), \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n      return [useNavigate];\n    });\n  } //   modifyList = (id, fullname) => {\n  //     return async (dispatch, getState) => {\n  //       let state = getState();\n  //       let { check } = state.fileList;\n  //       if (id in check) dispatch(updateList({ id, fullname }));\n  //     };\n  //   };\n  //   deleteFileList = (id, fullname) => {\n  //     return async (dispatch, getState) => {\n  //       let state = getState();\n  //       let list = state.fileList.list;\n  //       let new_id;\n  //       let ft = fullname.join(\"/\");\n  //       if (!list.filter((val) => val.fullname.join(\"/\") === ft).length) return;\n  //       if (list.length >= 2) new_id = list[list[0].id == id ? 1 : 0].id;\n  //       else new_id = 0;\n  //       try {\n  //         const res = await dictService.deleteFileList(id);\n  //         dispatch(deleteList(id));\n  //         dispatch(changeId({ id: new_id, type: false }));\n  //       } catch (err) {\n  //         console.log(err);\n  //       }\n  //     };\n  //   };\n}\nexport let userAction = new UserAction();","map":{"version":3,"names":["userService","createAsyncThunk","useNavigate","UserAction","constructor","args","_s","$RefreshSig$","getUserAction","res","getUser","error","navigate","userAction"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/actions/userAction.ts"],"sourcesContent":["// import { getUser } from \"../reducer/userSlice\";\r\nimport { userService } from \"../../service/userservice\";\r\n// import { AppDispatch } from \"\";\r\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\r\n\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\n// types\r\n// import { UserAction, UserActionTypes } from \"../../types/user\";\r\nimport { User } from \"../../types/user\";\r\n\r\nclass UserAction extends userService {\r\n  getUserAction = createAsyncThunk(\"user/fetchUser\", async (): Promise<any> => {\r\n    try {\r\n      let res = await this.getUser();\r\n      return await res!;\r\n    } catch (error) {\r\n      let navigate = useNavigate();\r\n      throw error;\r\n    }\r\n  });\r\n  //   modifyList = (id, fullname) => {\r\n  //     return async (dispatch, getState) => {\r\n  //       let state = getState();\r\n  //       let { check } = state.fileList;\r\n  //       if (id in check) dispatch(updateList({ id, fullname }));\r\n  //     };\r\n  //   };\r\n  //   deleteFileList = (id, fullname) => {\r\n  //     return async (dispatch, getState) => {\r\n  //       let state = getState();\r\n  //       let list = state.fileList.list;\r\n  //       let new_id;\r\n  //       let ft = fullname.join(\"/\");\r\n  //       if (!list.filter((val) => val.fullname.join(\"/\") === ft).length) return;\r\n  //       if (list.length >= 2) new_id = list[list[0].id == id ? 1 : 0].id;\r\n  //       else new_id = 0;\r\n  //       try {\r\n  //         const res = await dictService.deleteFileList(id);\r\n  //         dispatch(deleteList(id));\r\n  //         dispatch(changeId({ id: new_id, type: false }));\r\n  //       } catch (err) {\r\n  //         console.log(err);\r\n  //       }\r\n  //     };\r\n  //   };\r\n}\r\n\r\nexport let userAction = new UserAction();\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,2BAA2B;AACvD;AACA,SAASC,gBAAgB,QAAQ,kBAAkB;AAEnD,SAASC,WAAW,QAAQ,kBAAkB;;AAE9C;AACA;;AAGA,MAAMC,UAAU,SAASH,WAAW,CAAC;EAAAI,YAAA,GAAAC,IAAA;IAAA,IAAAC,EAAA,GAAAC,YAAA;IAAA,SAAAF,IAAA;IAAA,KACnCG,aAAa,GAAAF,EAAA,CAAGL,gBAAgB,CAAC,gBAAgB,EAAAK,EAAA,CAAE,YAA0B;MAAAA,EAAA;MAC3E,IAAI;QACF,IAAIG,GAAG,GAAG,MAAM,IAAI,CAACC,OAAO,CAAC,CAAC;QAC9B,OAAO,MAAMD,GAAI;MACnB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACd,IAAIC,QAAQ,GAAGV,WAAW,CAAC,CAAC;QAC5B,MAAMS,KAAK;MACb;IACF,CAAC;MAAA,QAHkBT,WAAW;IAAA,EAG7B,CAAC;MAAA,QAHiBA,WAAW;IAAA;EAAA,EAI9B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF;AAEA,OAAO,IAAIW,UAAU,GAAG,IAAIV,UAAU,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}