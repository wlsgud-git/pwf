{"ast":null,"code":"// library\nimport{createSlice}from\"@reduxjs/toolkit\";import{userAction}from\"../actions/userAction\";// type\nconst initialState={id:0,nickname:\"\",profile_img:\"\",friends:[],email:\"\",request_friends:[]};const userSlice=createSlice({name:\"user\",initialState,// reducer\nreducers:{},// actions\nextraReducers:builder=>{// 세션으로 유저 정보 가져오기\nbuilder.addCase(userAction.getUserAction.fulfilled,(state,action)=>{let{id,email,nickname,profile_img,request_friend_list,friends}=action.payload;state.id=id;state.email=email;state.profile_img=profile_img;state.nickname=nickname;if(request_friend_list&&request_friend_list.length)state.request_friends=request_friend_list.map(val=>val);if(friends&&friends.length)state.friends=friends.map(val=>val);});// 친구요청에 대한 결과\nbuilder.addCase(userAction.requestFriendHandle.fulfilled,(state,action)=>{var _state$request_friend;let{result,sender,msg}=action.payload;state.request_friends=(_state$request_friend=state.request_friends)===null||_state$request_friend===void 0?void 0:_state$request_friend.filter(val=>{var _state$friends;if(val.nickname==sender)(_state$friends=state.friends)===null||_state$friends===void 0?void 0:_state$friends.push(val);return val.nickname!=sender;});alert(msg);return;});}});// export const { getUser } = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","id","nickname","profile_img","friends","email","request_friends","userSlice","name","reducers","extraReducers","builder","addCase","getUserAction","fulfilled","state","action","request_friend_list","payload","length","map","val","requestFriendHandle","_state$request_friend","result","sender","msg","filter","_state$friends","push","alert","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/reducer/userReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\nimport { isSwitchStatement } from \"typescript\";\r\n\r\ninterface userReducer {\r\n  // getUser(state: User, info: PayloadAction<User>): void;\r\n  //   createUser(state: User, info: PayloadAction<string>): void;\r\n  //   updateUser: (state: User, info: User) => void;\r\n  //   deleteUser: (state: User, id: string) => void;\r\n}\r\n\r\nconst initialState: User = {\r\n  id: 0,\r\n  nickname: \"\",\r\n  profile_img: \"\",\r\n  friends: [],\r\n  email: \"\",\r\n  request_friends: [],\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState, // reducer\r\n  reducers: {} satisfies userReducer, // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { id, email, nickname, profile_img, request_friend_list, friends } =\r\n        action.payload;\r\n\r\n      state.id = id;\r\n      state.email = email;\r\n      state.profile_img = profile_img;\r\n      state.nickname = nickname;\r\n\r\n      if (request_friend_list && request_friend_list.length)\r\n        state.request_friends = request_friend_list.map((val: User) => val);\r\n      if (friends && friends.length)\r\n        state.friends = friends.map((val: User) => val);\r\n    });\r\n    // 친구요청에 대한 결과\r\n    builder.addCase(\r\n      userAction.requestFriendHandle.fulfilled,\r\n      (state, action) => {\r\n        let { result, sender, msg } = action.payload;\r\n\r\n        state.request_friends = state.request_friends?.filter((val) => {\r\n          if (val.nickname == sender) state.friends?.push(val);\r\n          return val.nickname != sender;\r\n        });\r\n\r\n        alert(msg);\r\n        return;\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\n// export const { getUser } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA;AACA,OAASA,WAAW,KAAuB,kBAAkB,CAE7D,OAASC,UAAU,KAAQ,uBAAuB,CAElD;AAWA,KAAM,CAAAC,YAAkB,CAAG,CACzBC,EAAE,CAAE,CAAC,CACLC,QAAQ,CAAE,EAAE,CACZC,WAAW,CAAE,EAAE,CACfC,OAAO,CAAE,EAAE,CACXC,KAAK,CAAE,EAAE,CACTC,eAAe,CAAE,EACnB,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGT,WAAW,CAAC,CAC5BU,IAAI,CAAE,MAAM,CACZR,YAAY,CAAE;AACdS,QAAQ,CAAE,CAAC,CAAuB,CAAE;AACpCC,aAAa,CAAGC,OAAO,EAAK,CAC1B;AACAA,OAAO,CAACC,OAAO,CAACb,UAAU,CAACc,aAAa,CAACC,SAAS,CAAE,CAACC,KAAK,CAAEC,MAAM,GAAK,CACrE,GAAI,CAAEf,EAAE,CAAEI,KAAK,CAAEH,QAAQ,CAAEC,WAAW,CAAEc,mBAAmB,CAAEb,OAAQ,CAAC,CACpEY,MAAM,CAACE,OAAO,CAEhBH,KAAK,CAACd,EAAE,CAAGA,EAAE,CACbc,KAAK,CAACV,KAAK,CAAGA,KAAK,CACnBU,KAAK,CAACZ,WAAW,CAAGA,WAAW,CAC/BY,KAAK,CAACb,QAAQ,CAAGA,QAAQ,CAEzB,GAAIe,mBAAmB,EAAIA,mBAAmB,CAACE,MAAM,CACnDJ,KAAK,CAACT,eAAe,CAAGW,mBAAmB,CAACG,GAAG,CAAEC,GAAS,EAAKA,GAAG,CAAC,CACrE,GAAIjB,OAAO,EAAIA,OAAO,CAACe,MAAM,CAC3BJ,KAAK,CAACX,OAAO,CAAGA,OAAO,CAACgB,GAAG,CAAEC,GAAS,EAAKA,GAAG,CAAC,CACnD,CAAC,CAAC,CACF;AACAV,OAAO,CAACC,OAAO,CACbb,UAAU,CAACuB,mBAAmB,CAACR,SAAS,CACxC,CAACC,KAAK,CAAEC,MAAM,GAAK,KAAAO,qBAAA,CACjB,GAAI,CAAEC,MAAM,CAAEC,MAAM,CAAEC,GAAI,CAAC,CAAGV,MAAM,CAACE,OAAO,CAE5CH,KAAK,CAACT,eAAe,EAAAiB,qBAAA,CAAGR,KAAK,CAACT,eAAe,UAAAiB,qBAAA,iBAArBA,qBAAA,CAAuBI,MAAM,CAAEN,GAAG,EAAK,KAAAO,cAAA,CAC7D,GAAIP,GAAG,CAACnB,QAAQ,EAAIuB,MAAM,CAAE,CAAAG,cAAA,CAAAb,KAAK,CAACX,OAAO,UAAAwB,cAAA,iBAAbA,cAAA,CAAeC,IAAI,CAACR,GAAG,CAAC,CACpD,MAAO,CAAAA,GAAG,CAACnB,QAAQ,EAAIuB,MAAM,CAC/B,CAAC,CAAC,CAEFK,KAAK,CAACJ,GAAG,CAAC,CACV,OACF,CACF,CAAC,CACH,CACF,CAAC,CAAC,CAEF;AACA,cAAe,CAAAnB,SAAS,CAACwB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}