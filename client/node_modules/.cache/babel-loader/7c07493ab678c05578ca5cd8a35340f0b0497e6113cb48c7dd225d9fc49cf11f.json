{"ast":null,"code":"// library\nimport{createSlice}from\"@reduxjs/toolkit\";import{userAction}from\"../actions/userAction\";// type\nconst initialState={id:0,nickname:\"\",profile_img:\"\",friends:[],email:\"\",request_friends:[]};const userSlice=createSlice({name:\"user\",initialState,// reducer\nreducers:{onlineUpdate:(current,data)=>{let{nickname,online}=data.payload;return{...current,friends:current.friends.map(val=>val.nickname==nickname?{...val,online}:val)};},insertReceiver:(current,data)=>{let{nickname,profile_img,online}=data.payload;return{...current,friends:[...current.friends,data.payload]};}},// actions\nextraReducers:builder=>{// 세션으로 유저 정보 가져오기\nbuilder.addCase(userAction.getUserAction.fulfilled,(state,action)=>{let{id,email,nickname,profile_img,request_friend_list,friends}=action.payload;state.id=id;state.email=email;state.profile_img=profile_img;state.nickname=nickname;if(request_friend_list&&request_friend_list.length)state.request_friends=request_friend_list.map(val=>val);if(friends&&friends.length)state.friends=friends.map(val=>val);});// 친구요청에 대한 결과\nbuilder.addCase(userAction.requestFriendHandle.fulfilled,(state,action)=>{var _state$request_friend;let{sender,msg}=action.payload;state.request_friends=(_state$request_friend=state.request_friends)===null||_state$request_friend===void 0?void 0:_state$request_friend.filter(val=>{var _state$friends;if(val.nickname==sender.nickname)(_state$friends=state.friends)===null||_state$friends===void 0?void 0:_state$friends.push(sender);return val.nickname!=sender.nickname;});alert(msg);return;});}});export const{onlineUpdate,insertReceiver}=userSlice.actions;export default userSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","id","nickname","profile_img","friends","email","request_friends","userSlice","name","reducers","onlineUpdate","current","data","online","payload","map","val","insertReceiver","extraReducers","builder","addCase","getUserAction","fulfilled","state","action","request_friend_list","length","requestFriendHandle","_state$request_friend","sender","msg","filter","_state$friends","push","alert","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/reducer/userReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { FriendOnlineStatus, User } from \"../../types/user\";\r\nimport { isSwitchStatement } from \"typescript\";\r\n\r\ninterface userReducer {\r\n  // getUser(state: User, info: PayloadAction<User>): void;\r\n  //   createUser(state: User, info: PayloadAction<string>): void;\r\n  //   updateUser: (state: User, info: User) => void;\r\n  //   deleteUser: (state: User, id: string) => void;\r\n}\r\n\r\nconst initialState: User = {\r\n  id: 0,\r\n  nickname: \"\",\r\n  profile_img: \"\",\r\n  friends: [],\r\n  email: \"\",\r\n  request_friends: [],\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    onlineUpdate: (current: any, data: PayloadAction<User>) => {\r\n      let { nickname, online } = data.payload;\r\n      return {\r\n        ...current,\r\n        friends: current.friends.map((val: User) =>\r\n          val.nickname == nickname ? { ...val, online } : val\r\n        ),\r\n      };\r\n    },\r\n\r\n    insertReceiver: (current: any, data: PayloadAction<User>) => {\r\n      let { nickname, profile_img, online } = data.payload;\r\n\r\n      return { ...current, friends: [...current.friends, data.payload] };\r\n    },\r\n  }, // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { id, email, nickname, profile_img, request_friend_list, friends } =\r\n        action.payload;\r\n\r\n      state.id = id;\r\n      state.email = email;\r\n      state.profile_img = profile_img;\r\n      state.nickname = nickname;\r\n\r\n      if (request_friend_list && request_friend_list.length)\r\n        state.request_friends = request_friend_list.map((val: User) => val);\r\n      if (friends && friends.length)\r\n        state.friends = friends.map((val: User) => val);\r\n    });\r\n\r\n    // 친구요청에 대한 결과\r\n    builder.addCase(\r\n      userAction.requestFriendHandle.fulfilled,\r\n      (state, action) => {\r\n        let { sender, msg } = action.payload;\r\n\r\n        state.request_friends = state.request_friends?.filter((val) => {\r\n          if (val.nickname == sender.nickname) state.friends?.push(sender);\r\n          return val.nickname != sender.nickname;\r\n        });\r\n\r\n        alert(msg);\r\n        return;\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nexport const { onlineUpdate, insertReceiver } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}