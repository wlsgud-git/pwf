{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nconst initialState = {\n  request_friends: [],\n  friends: []\n};\nconst friendSlice = createSlice({\n  name: \"friend\",\n  initialState,\n  // reducer\n  reducers: {\n    friendRequest: (state, data) => console.log(data.payload),\n    // state.request_friends.push(data.payload.from),\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\n    //   let { nickname, online } = data.payload;\n    //   return {\n    //     ...current,\n    //     friends: current.friends.map((val: User) =>\n    //       val.nickname == nickname ? { ...val, online } : val\n    //     ),\n    //   };\n    // },\n    // insertReceiver: (current: any, data: PayloadAction<User>) => {\n    //   let { nickname, profile_img, online } = data.payload;\n    //   return { ...current, friends: [...current.friends, data.payload] };\n    // },\n    init: current => current = initialState\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        request_friends,\n        friends\n      } = action.payload.user;\n      if (request_friends && request_friends.length) state.request_friends = request_friends.map(val => val);\n      if (friends && friends.length) state.friends = friends.map(val => val);\n    });\n\n    // 친구요청에 대한 결과\n    // builder.addCase(\n    //   userAction.requestFriendHandle.fulfilled,\n    //   (state, action) => {\n    //     let { sender, msg } = action.payload;\n\n    //     state.request_friends = state.request_friends?.filter((val) => {\n    //       if (val.nickname == sender.nickname) state.friends?.push(sender);\n    //       return val.nickname != sender.nickname;\n    //     });\n\n    //     alert(msg);\n    //     return;\n    //   }\n    // );\n  }\n});\nexport const {\n  friendRequest\n} = friendSlice.actions;\nexport default friendSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","initialState","request_friends","friends","friendSlice","name","reducers","friendRequest","state","data","console","log","payload","init","current","extraReducers","builder","addCase","getUserAction","fulfilled","action","user","length","map","val","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/redux/reducer/friendReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { User } from \"../../types/user\";\r\n\r\nconst initialState: User = {\r\n  request_friends: [],\r\n  friends: [],\r\n};\r\n\r\nconst friendSlice = createSlice({\r\n  name: \"friend\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    friendRequest: (state: any, data: any) => console.log(data.payload),\r\n    // state.request_friends.push(data.payload.from),\r\n    // onlineUpdate: (current: any, data: PayloadAction<User>) => {\r\n    //   let { nickname, online } = data.payload;\r\n    //   return {\r\n    //     ...current,\r\n    //     friends: current.friends.map((val: User) =>\r\n    //       val.nickname == nickname ? { ...val, online } : val\r\n    //     ),\r\n    //   };\r\n    // },\r\n    // insertReceiver: (current: any, data: PayloadAction<User>) => {\r\n    //   let { nickname, profile_img, online } = data.payload;\r\n    //   return { ...current, friends: [...current.friends, data.payload] };\r\n    // },\r\n    init: (current) => (current = initialState),\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let { request_friends, friends } = action.payload.user;\r\n\r\n      if (request_friends && request_friends.length)\r\n        state.request_friends = request_friends.map((val: User) => val);\r\n      if (friends && friends.length)\r\n        state.friends = friends.map((val: User) => val);\r\n    });\r\n\r\n    // 친구요청에 대한 결과\r\n    // builder.addCase(\r\n    //   userAction.requestFriendHandle.fulfilled,\r\n    //   (state, action) => {\r\n    //     let { sender, msg } = action.payload;\r\n\r\n    //     state.request_friends = state.request_friends?.filter((val) => {\r\n    //       if (val.nickname == sender.nickname) state.friends?.push(sender);\r\n    //       return val.nickname != sender.nickname;\r\n    //     });\r\n\r\n    //     alert(msg);\r\n    //     return;\r\n    //   }\r\n    // );\r\n  },\r\n});\r\n\r\nexport const { friendRequest } = friendSlice.actions;\r\nexport default friendSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAuB,kBAAkB;AAE7D,SAASC,UAAU,QAAQ,uBAAuB;;AAElD;;AAGA,MAAMC,YAAkB,GAAG;EACzBC,eAAe,EAAE,EAAE;EACnBC,OAAO,EAAE;AACX,CAAC;AAED,MAAMC,WAAW,GAAGL,WAAW,CAAC;EAC9BM,IAAI,EAAE,QAAQ;EACdJ,YAAY;EAAE;EACdK,QAAQ,EAAE;IACRC,aAAa,EAAEA,CAACC,KAAU,EAAEC,IAAS,KAAKC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,OAAO,CAAC;IACnE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACAC,IAAI,EAAGC,OAAO,IAAMA,OAAO,GAAGb;EAChC,CAAC;EAED;EACAc,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CAACC,OAAO,CAACjB,UAAU,CAACkB,aAAa,CAACC,SAAS,EAAE,CAACX,KAAK,EAAEY,MAAM,KAAK;MACrE,IAAI;QAAElB,eAAe;QAAEC;MAAQ,CAAC,GAAGiB,MAAM,CAACR,OAAO,CAACS,IAAI;MAEtD,IAAInB,eAAe,IAAIA,eAAe,CAACoB,MAAM,EAC3Cd,KAAK,CAACN,eAAe,GAAGA,eAAe,CAACqB,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;MACjE,IAAIrB,OAAO,IAAIA,OAAO,CAACmB,MAAM,EAC3Bd,KAAK,CAACL,OAAO,GAAGA,OAAO,CAACoB,GAAG,CAAEC,GAAS,IAAKA,GAAG,CAAC;IACnD,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEjB;AAAc,CAAC,GAAGH,WAAW,CAACqB,OAAO;AACpD,eAAerB,WAAW,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}