{"ast":null,"code":"import { HttpClient } from \"../network/http\";\nexport class userService extends HttpClient {\n  async testing(data) {\n    try {\n      return await this.axiosFetch(\"/test\", {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n  async logout() {\n    try {\n      return await this.axiosFetch(\"/logout\", {\n        method: \"post\"\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n  async handleRequestFriend(data) {\n    try {\n      console.log(\"in service:\", data.get(\"receiver\"), data.get(\"sender\"));\n      return await this.axiosFetch(`/request/friend/response`, {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // 친구요청\n  async requestFriend(data) {\n    try {\n      return await this.axiosFetch(`/request/friend`, {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // 유저 정보 얻기\n  async getUser() {\n    try {\n      return await this.axiosFetch(\"/current\", {\n        method: \"get\"\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // 유저 정보 겹치는것 체크\n  async OverlapCheck(data) {\n    try {\n      return await this.axiosFetch(\"/overlap_check\", {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n  //회원가입 유저정보 보내기\n  async sendUserInfo(data) {\n    try {\n      return await this.axiosFetch(`/user_info`, {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n  // 인증코드 재전송\n  async resendAuthcode(data) {\n    try {\n      return await this.axiosFetch(\"/send_authcode\", {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // 회원가입\n  async account(data) {\n    try {\n      return await this.axiosFetch(\"/account\", {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n\n  // 로그인\n  async sendLoginInfo(data) {\n    try {\n      return await this.axiosFetch(\"/login\", {\n        method: \"post\",\n        body: data\n      });\n    } catch (err) {\n      throw err;\n    }\n  }\n}\nexport const user_service = new userService();","map":{"version":3,"names":["HttpClient","userService","testing","data","axiosFetch","method","body","err","logout","handleRequestFriend","console","log","get","requestFriend","getUser","OverlapCheck","sendUserInfo","resendAuthcode","account","sendLoginInfo","user_service"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/service/userservice.ts"],"sourcesContent":["import { HttpClient } from \"../network/http\";\r\n\r\nimport { User } from \"../types/user\";\r\n\r\nexport class userService extends HttpClient {\r\n  async testing(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<string>(\"/test\", {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  async logout() {\r\n    try {\r\n      return await this.axiosFetch<string>(\"/logout\", {\r\n        method: \"post\",\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  async handleRequestFriend(data: FormData) {\r\n    try {\r\n      console.log(\"in service:\", data.get(\"receiver\"), data.get(\"sender\"));\r\n      return await this.axiosFetch<{\r\n        result: boolean;\r\n        sender: User;\r\n        msg: string;\r\n      }>(`/request/friend/response`, {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // 친구요청\r\n  async requestFriend(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<User>(`/request/friend`, {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // 유저 정보 얻기\r\n  async getUser() {\r\n    try {\r\n      return await this.axiosFetch<User>(\"/current\", { method: \"get\" });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // 유저 정보 겹치는것 체크\r\n  async OverlapCheck(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<boolean>(\"/overlap_check\", {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n  //회원가입 유저정보 보내기\r\n  async sendUserInfo(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<User>(`/user_info`, {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n  // 인증코드 재전송\r\n  async resendAuthcode(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<boolean>(\"/send_authcode\", {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // 회원가입\r\n  async account(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<boolean>(\"/account\", {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  // 로그인\r\n  async sendLoginInfo(data: FormData) {\r\n    try {\r\n      return await this.axiosFetch<User>(\"/login\", {\r\n        method: \"post\",\r\n        body: data,\r\n      });\r\n    } catch (err) {\r\n      throw err;\r\n    }\r\n  }\r\n}\r\n\r\nexport const user_service = new userService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}