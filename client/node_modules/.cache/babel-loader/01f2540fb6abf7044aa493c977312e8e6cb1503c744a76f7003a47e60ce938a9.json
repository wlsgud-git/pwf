{"ast":null,"code":"import { SignupError } from \"../types/auth\";\nimport { user_service } from \"../service/userservice\";\nimport { createFormData } from \"../util/form\";\nimport { errorHandling } from \"../error/error\";\n// 이메일 인가\nexport const emailValidate = async (email, set_email) => {\n  let result = email.toString().trim().toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\n  try {\n    if (!result) throw {\n      type: \"email\",\n      msg: SignupError.EMAIL\n    };\n    let formdata = createFormData({\n      type: \"email\",\n      value: email\n    });\n    let res = await user_service.OverlapCheck(formdata);\n    set_email(c => ({\n      ...c,\n      error: false\n    }));\n  } catch (err) {\n    let {\n      type,\n      msg\n    } = errorHandling(err);\n    set_email(c => ({\n      ...c,\n      error: true,\n      error_msg: msg\n    }));\n  }\n};\n\n// 비밀번호 인가\nexport const passwordValidate = (password, set_password) => {\n  return password.trim().toLowerCase().match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\n};","map":{"version":3,"names":["SignupError","user_service","createFormData","errorHandling","emailValidate","email","set_email","result","toString","trim","toLowerCase","match","type","msg","EMAIL","formdata","value","res","OverlapCheck","c","error","err","error_msg","passwordValidate","password","set_password"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/validation/auth.ts"],"sourcesContent":["import { Dispatch } from \"react\";\r\nimport { SignupError } from \"../types/auth\";\r\nimport { user_service } from \"../service/userservice\";\r\nimport { createFormData } from \"../util/form\";\r\nimport { errorHandling } from \"../error/error\";\r\n\r\nimport { SignupInputProps } from \"../types/auth\";\r\n\r\n// 이메일 인가\r\nexport const emailValidate = async (\r\n  email: string,\r\n  set_email: Dispatch<React.SetStateAction<SignupInputProps>>\r\n) => {\r\n  let result = email\r\n    .toString()\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n  try {\r\n    if (!result) throw { type: \"email\", msg: SignupError.EMAIL };\r\n    let formdata = createFormData({ type: \"email\", value: email });\r\n    let res = await user_service.OverlapCheck(formdata);\r\n    set_email((c) => ({ ...c, error: false }));\r\n  } catch (err) {\r\n    let { type, msg } = errorHandling(err);\r\n    set_email((c) => ({ ...c, error: true, error_msg: msg }));\r\n  }\r\n};\r\n\r\n// 비밀번호 인가\r\nexport const passwordValidate = (\r\n  password: string,\r\n  set_password: () => void\r\n) => {\r\n  return password\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\r\n};\r\n"],"mappings":"AACA,SAASA,WAAW,QAAQ,eAAe;AAC3C,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,cAAc,QAAQ,cAAc;AAC7C,SAASC,aAAa,QAAQ,gBAAgB;AAI9C;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAC3BC,KAAa,EACbC,SAA2D,KACxD;EACH,IAAIC,MAAM,GAAGF,KAAK,CACfG,QAAQ,CAAC,CAAC,CACVC,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,wJACF,CAAC;EACH,IAAI;IACF,IAAI,CAACJ,MAAM,EAAE,MAAM;MAAEK,IAAI,EAAE,OAAO;MAAEC,GAAG,EAAEb,WAAW,CAACc;IAAM,CAAC;IAC5D,IAAIC,QAAQ,GAAGb,cAAc,CAAC;MAAEU,IAAI,EAAE,OAAO;MAAEI,KAAK,EAAEX;IAAM,CAAC,CAAC;IAC9D,IAAIY,GAAG,GAAG,MAAMhB,YAAY,CAACiB,YAAY,CAACH,QAAQ,CAAC;IACnDT,SAAS,CAAEa,CAAC,KAAM;MAAE,GAAGA,CAAC;MAAEC,KAAK,EAAE;IAAM,CAAC,CAAC,CAAC;EAC5C,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ,IAAI;MAAET,IAAI;MAAEC;IAAI,CAAC,GAAGV,aAAa,CAACkB,GAAG,CAAC;IACtCf,SAAS,CAAEa,CAAC,KAAM;MAAE,GAAGA,CAAC;MAAEC,KAAK,EAAE,IAAI;MAAEE,SAAS,EAAET;IAAI,CAAC,CAAC,CAAC;EAC3D;AACF,CAAC;;AAED;AACA,OAAO,MAAMU,gBAAgB,GAAGA,CAC9BC,QAAgB,EAChBC,YAAwB,KACrB;EACH,OAAOD,QAAQ,CACZf,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,+DAA+D,CAAC;AAC3E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}