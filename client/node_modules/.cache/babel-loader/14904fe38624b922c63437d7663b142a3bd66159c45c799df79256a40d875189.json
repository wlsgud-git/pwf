{"ast":null,"code":"import{EmailError,NicknameError}from\"../types/auth\";import{createFormData}from\"../util/form\";import{auth_service}from\"../service/auth.service\";// 이메일 형태 검증\nexport const emailFormValid=email=>{let result=email.toString().trim().toLowerCase().match(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);return!result?true:false;};// 비밀번호 형태 검증\nexport const passwordFormValid=password=>{let result=password.trim().toLowerCase().match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);return!result?true:false;};// 이메일 검증\nexport const emailValidate=async(email,overlap)=>{try{if(emailFormValid(email))throw{path:\"email\",msg:EmailError.EMAIL_FORM_ERROR};let formdata=createFormData({email,overlap});await auth_service.emailOverlap(formdata);return false;}catch(err){console.log(err);throw err;}};// 닉네임 검정\nexport const nicknameValidate=async nickname=>{try{if(nickname.length<2||nickname.length>12)throw{path:\"nickname\",msg:NicknameError.NICKNAME_FORM_ERROR};let formdata=createFormData({nickname});await auth_service.nicknameOverlap(formdata);return false;}catch(err){throw err;}};","map":{"version":3,"names":["EmailError","NicknameError","createFormData","auth_service","emailFormValid","email","result","toString","trim","toLowerCase","match","passwordFormValid","password","emailValidate","overlap","path","msg","EMAIL_FORM_ERROR","formdata","emailOverlap","err","console","log","nicknameValidate","nickname","length","NICKNAME_FORM_ERROR","nicknameOverlap"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/validation/auth.ts"],"sourcesContent":["import { Dispatch } from \"react\";\r\nimport { EmailError, PasswordError, NicknameError } from \"../types/auth\";\r\nimport { user_service } from \"../service/user.service\";\r\nimport { createFormData } from \"../util/form\";\r\nimport { auth_service } from \"../service/auth.service\";\r\n\r\n// 이메일 형태 검증\r\nexport const emailFormValid = (email: string) => {\r\n  let result = email\r\n    .toString()\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(\r\n      /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n    );\r\n  return !result ? true : false;\r\n};\r\n\r\n// 비밀번호 형태 검증\r\nexport const passwordFormValid = (password: string) => {\r\n  let result = password\r\n    .trim()\r\n    .toLowerCase()\r\n    .match(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!*?&])[A-Za-z\\d@$!%*?&]{8,20}$/);\r\n  return !result ? true : false;\r\n};\r\n\r\n// 이메일 검증\r\nexport const emailValidate = async (email: string, overlap: boolean) => {\r\n  try {\r\n    if (emailFormValid(email))\r\n      throw { path: \"email\", msg: EmailError.EMAIL_FORM_ERROR };\r\n    let formdata = createFormData({ email, overlap });\r\n    await auth_service.emailOverlap(formdata);\r\n\r\n    return false;\r\n  } catch (err) {\r\n    console.log(err);\r\n    throw err;\r\n  }\r\n};\r\n\r\n// 닉네임 검정\r\nexport const nicknameValidate = async (nickname: string) => {\r\n  try {\r\n    if (nickname.length < 2 || nickname.length > 12)\r\n      throw { path: \"nickname\", msg: NicknameError.NICKNAME_FORM_ERROR };\r\n    let formdata = createFormData({ nickname });\r\n    await auth_service.nicknameOverlap(formdata);\r\n    return false;\r\n  } catch (err) {\r\n    throw err;\r\n  }\r\n};\r\n"],"mappings":"AACA,OAASA,UAAU,CAAiBC,aAAa,KAAQ,eAAe,CAExE,OAASC,cAAc,KAAQ,cAAc,CAC7C,OAASC,YAAY,KAAQ,yBAAyB,CAEtD;AACA,MAAO,MAAM,CAAAC,cAAc,CAAIC,KAAa,EAAK,CAC/C,GAAI,CAAAC,MAAM,CAAGD,KAAK,CACfE,QAAQ,CAAC,CAAC,CACVC,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CACJ,wJACF,CAAC,CACH,MAAO,CAACJ,MAAM,CAAG,IAAI,CAAG,KAAK,CAC/B,CAAC,CAED;AACA,MAAO,MAAM,CAAAK,iBAAiB,CAAIC,QAAgB,EAAK,CACrD,GAAI,CAAAN,MAAM,CAAGM,QAAQ,CAClBJ,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,+DAA+D,CAAC,CACzE,MAAO,CAACJ,MAAM,CAAG,IAAI,CAAG,KAAK,CAC/B,CAAC,CAED;AACA,MAAO,MAAM,CAAAO,aAAa,CAAG,KAAAA,CAAOR,KAAa,CAAES,OAAgB,GAAK,CACtE,GAAI,CACF,GAAIV,cAAc,CAACC,KAAK,CAAC,CACvB,KAAM,CAAEU,IAAI,CAAE,OAAO,CAAEC,GAAG,CAAEhB,UAAU,CAACiB,gBAAiB,CAAC,CAC3D,GAAI,CAAAC,QAAQ,CAAGhB,cAAc,CAAC,CAAEG,KAAK,CAAES,OAAQ,CAAC,CAAC,CACjD,KAAM,CAAAX,YAAY,CAACgB,YAAY,CAACD,QAAQ,CAAC,CAEzC,MAAO,MAAK,CACd,CAAE,MAAOE,GAAG,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAChB,KAAM,CAAAA,GAAG,CACX,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAG,gBAAgB,CAAG,KAAO,CAAAC,QAAgB,EAAK,CAC1D,GAAI,CACF,GAAIA,QAAQ,CAACC,MAAM,CAAG,CAAC,EAAID,QAAQ,CAACC,MAAM,CAAG,EAAE,CAC7C,KAAM,CAAEV,IAAI,CAAE,UAAU,CAAEC,GAAG,CAAEf,aAAa,CAACyB,mBAAoB,CAAC,CACpE,GAAI,CAAAR,QAAQ,CAAGhB,cAAc,CAAC,CAAEsB,QAAS,CAAC,CAAC,CAC3C,KAAM,CAAArB,YAAY,CAACwB,eAAe,CAACT,QAAQ,CAAC,CAC5C,MAAO,MAAK,CACd,CAAE,MAAOE,GAAG,CAAE,CACZ,KAAM,CAAAA,GAAG,CACX,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}