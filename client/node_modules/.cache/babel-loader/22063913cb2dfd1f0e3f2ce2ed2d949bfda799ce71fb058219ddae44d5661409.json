{"ast":null,"code":"// library\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { userAction } from \"../actions/userAction\";\n\n// type\n\nimport { userSocket } from \"../../util/socket\";\nconst initialState = {\n  id: 0,\n  nickname: \"\",\n  profile_img: \"\",\n  friends: [],\n  email: \"\",\n  request_friends: [],\n  stream_room: []\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  // reducer\n  reducers: {\n    onlineUpdate: (current, data) => {\n      let {\n        nickname,\n        online\n      } = data.payload;\n      return {\n        ...current,\n        friends: current.friends.map(val => val.nickname == nickname ? {\n          ...val,\n          online\n        } : val)\n      };\n    },\n    insertReceiver: (current, data) => {\n      let {\n        nickname,\n        profile_img,\n        online\n      } = data.payload;\n      return {\n        ...current,\n        friends: [...current.friends, data.payload]\n      };\n    },\n    userInit: current => current = initialState\n  },\n  // actions\n  extraReducers: builder => {\n    // 세션으로 유저 정보 가져오기\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\n      let {\n        id,\n        email,\n        nickname,\n        profile_img,\n        request_friend_list,\n        friends,\n        stream_room\n      } = action.payload;\n      state.id = id;\n      state.email = email;\n      state.profile_img = profile_img;\n      state.nickname = nickname;\n      if (request_friend_list && request_friend_list.length) state.request_friends = request_friend_list.map(val => val);\n      if (friends && friends.length) state.friends = friends.map(val => val);\n      if (stream_room && stream_room.length) state.stream_room = stream_room.map(val => val);\n      userSocket();\n      // return state;\n    });\n\n    // 친구요청에 대한 결과\n    builder.addCase(userAction.requestFriendHandle.fulfilled, (state, action) => {\n      var _state$request_friend;\n      let {\n        sender,\n        msg\n      } = action.payload;\n      state.request_friends = (_state$request_friend = state.request_friends) === null || _state$request_friend === void 0 ? void 0 : _state$request_friend.filter(val => {\n        var _state$friends;\n        if (val.nickname == sender.nickname) (_state$friends = state.friends) === null || _state$friends === void 0 ? void 0 : _state$friends.push(sender);\n        return val.nickname != sender.nickname;\n      });\n      alert(msg);\n      return;\n    });\n  }\n});\nexport const {\n  onlineUpdate,\n  insertReceiver,\n  userInit\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","userAction","userSocket","initialState","id","nickname","profile_img","friends","email","request_friends","stream_room","userSlice","name","reducers","onlineUpdate","current","data","online","payload","map","val","insertReceiver","userInit","extraReducers","builder","addCase","getUserAction","fulfilled","state","action","request_friend_list","length","requestFriendHandle","_state$request_friend","sender","msg","filter","_state$friends","push","alert","actions","reducer"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/context/reducer/userReducer.ts"],"sourcesContent":["// library\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\n\r\nimport { userAction } from \"../actions/userAction\";\r\n\r\n// type\r\nimport { FriendOnlineStatus, User } from \"../../types/user\";\r\nimport { Room } from \"../../types/room\";\r\nimport { userSocket } from \"../../util/socket\";\r\n\r\ninterface userReducer {\r\n  // getUser(state: User, info: PayloadAction<User>): void;\r\n  //   createUser(state: User, info: PayloadAction<string>): void;\r\n  //   updateUser: (state: User, info: User) => void;\r\n  //   deleteUser: (state: User, id: string) => void;\r\n}\r\n\r\nconst initialState: User = {\r\n  id: 0,\r\n  nickname: \"\",\r\n  profile_img: \"\",\r\n  friends: [],\r\n  email: \"\",\r\n  request_friends: [],\r\n  stream_room: [],\r\n};\r\n\r\nconst userSlice = createSlice({\r\n  name: \"user\",\r\n  initialState, // reducer\r\n  reducers: {\r\n    onlineUpdate: (current: any, data: PayloadAction<User>) => {\r\n      let { nickname, online } = data.payload;\r\n      return {\r\n        ...current,\r\n        friends: current.friends.map((val: User) =>\r\n          val.nickname == nickname ? { ...val, online } : val\r\n        ),\r\n      };\r\n    },\r\n\r\n    insertReceiver: (current: any, data: PayloadAction<User>) => {\r\n      let { nickname, profile_img, online } = data.payload;\r\n\r\n      return { ...current, friends: [...current.friends, data.payload] };\r\n    },\r\n\r\n    userInit: (current: any) => (current = initialState),\r\n  },\r\n\r\n  // actions\r\n  extraReducers: (builder) => {\r\n    // 세션으로 유저 정보 가져오기\r\n    builder.addCase(userAction.getUserAction.fulfilled, (state, action) => {\r\n      let {\r\n        id,\r\n        email,\r\n        nickname,\r\n        profile_img,\r\n        request_friend_list,\r\n        friends,\r\n        stream_room,\r\n      } = action.payload;\r\n\r\n      state.id = id;\r\n      state.email = email;\r\n      state.profile_img = profile_img;\r\n      state.nickname = nickname;\r\n\r\n      if (request_friend_list && request_friend_list.length)\r\n        state.request_friends = request_friend_list.map((val: User) => val);\r\n      if (friends && friends.length)\r\n        state.friends = friends.map((val: User) => val);\r\n      if (stream_room && stream_room.length)\r\n        state.stream_room = stream_room.map((val: Room) => val);\r\n      userSocket();\r\n      // return state;\r\n    });\r\n\r\n    // 친구요청에 대한 결과\r\n    builder.addCase(\r\n      userAction.requestFriendHandle.fulfilled,\r\n      (state, action) => {\r\n        let { sender, msg } = action.payload;\r\n\r\n        state.request_friends = state.request_friends?.filter((val) => {\r\n          if (val.nickname == sender.nickname) state.friends?.push(sender);\r\n          return val.nickname != sender.nickname;\r\n        });\r\n\r\n        alert(msg);\r\n        return;\r\n      }\r\n    );\r\n  },\r\n});\r\n\r\nexport const { onlineUpdate, insertReceiver, userInit } = userSlice.actions;\r\nexport default userSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}