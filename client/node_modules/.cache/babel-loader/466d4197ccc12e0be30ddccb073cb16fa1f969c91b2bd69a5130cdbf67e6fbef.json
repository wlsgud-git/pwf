{"ast":null,"code":"import{useEffect,useRef,useState}from\"react\";import\"../css/room/streamRoom.css\";import{useParams}from\"react-router-dom\";import{socketClient}from\"../util/socket\";import{stream_service}from\"../service/streamservice\";import{emitter}from\"../util/event\";import{useSelector}from\"react-redux\";// type\n// component\nimport{Menu}from\"../components/room/menu/menu\";import{RoomMain}from\"../components/room/main/roomMain\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export const StreamRoom=()=>{let user=useSelector(state=>state.user);let{id}=useParams();// ref\nlet peerConnects=useRef({});// state\nlet[room,setRoom]=useState(null);//방 정보\nlet[stream,setStream]=useState(null);let[connects,setConnects]=useState({});// 방 입장/퇴장 관련 --------------------------\nlet joinRoomHandler=who=>{// setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\n};// room leave 처리\nlet leaveRoomHandler=who=>{delete peerConnects.current[who];// setConnectList((c) => c.filter((val) => val.from !== who));\n};// 비디오/오디오 상태 ----------------------------\n// 상대 화면 on/off\nlet trackHandler=(to,type,state)=>{setConnects(c=>{let stInfo=c[to];type==\"audio\"?stInfo.audio=state:stInfo.video=state;return{...c,[to]:stInfo};});};// p2p연결 관련 --------------------------------\n// connect 연결\nlet peerConnect=async(to,stream)=>{let pc=new RTCPeerConnection();const channel=pc.createDataChannel(\"chat\");stream===null||stream===void 0?void 0:stream.getTracks().forEach(track=>{pc.addTrack(track,stream);});// signaling event\npc.onicecandidate=e=>{if(e.candidate)socketClient.emit(\"candidate\",user.nickname,to,e.candidate);};pc.ontrack=e=>{let kind=e.track.kind;setConnects(c=>{let{pc,channel,stream,video,audio}=c[to];// stream이 없으면 미디어스트림 추가해줌\nif(!stream)stream=new MediaStream();// 만약에 event track이 stream에 존재하지 않으면 추가해줌\nif(!stream.getTracks().includes(e.track))stream.addTrack(e.track);// 미디어 kind타입에 활성화 상태 알려줌\nkind==\"audio\"?audio=e.track.enabled:video=e.track.enabled;return{...c,[to]:{pc,channel,stream,video,audio}};});};// channel event\nchannel.onmessage=e=>{emitter.emit(\"menu chat\",JSON.parse(e.data));};let offer=await pc.createOffer();await pc.setLocalDescription(offer);socketClient.emit(\"offer\",user.nickname,to,offer);peerConnects.current[to]={pc,channel};setConnects(c=>({...c,[to]:{...c.to,pc,channel,stream:new MediaStream()}}));};// 연결 시작\nlet start=async()=>{try{var _room$participants;let stream=await navigator.mediaDevices.getUserMedia({video:true,audio:true});setStream(stream);// 트랙을 더해줌\nif(room)(_room$participants=room.participants)===null||_room$participants===void 0?void 0:_room$participants.map(async val=>{if(val.nickname!==user.nickname){await peerConnect(val.nickname,stream);}});}catch(err){console.log(err);}};// offer처리\nlet offerHandler=async(from,offer)=>{try{var _peerConnects$current,_peerConnects$current2;// if (!peerConnects.current[from].pc) peerConnect(from);\nawait((_peerConnects$current=peerConnects.current[from].pc)===null||_peerConnects$current===void 0?void 0:_peerConnects$current.setRemoteDescription(new RTCSessionDescription(offer)));if(((_peerConnects$current2=peerConnects.current[from])===null||_peerConnects$current2===void 0?void 0:_peerConnects$current2.pc.signalingState)==\"have-remote-offer\"&&user.nickname!==\"\"){var _peerConnects$current3,_peerConnects$current4;const answer=await((_peerConnects$current3=peerConnects.current[from])===null||_peerConnects$current3===void 0?void 0:_peerConnects$current3.pc.createAnswer());await((_peerConnects$current4=peerConnects.current[from])===null||_peerConnects$current4===void 0?void 0:_peerConnects$current4.pc.setLocalDescription(answer));socketClient.emit(\"answer\",user.nickname,from,answer);}}catch(err){console.log(err);}};// answer 처리\nlet answerHandler=async(from,answer)=>{try{var _peerConnects$current5,_peerConnects$current6;if(!((_peerConnects$current5=peerConnects.current[from])!==null&&_peerConnects$current5!==void 0&&_peerConnects$current5.pc.currentRemoteDescription))await((_peerConnects$current6=peerConnects.current[from])===null||_peerConnects$current6===void 0?void 0:_peerConnects$current6.pc.setRemoteDescription(answer));}catch(err){console.log(err);}};// candidate처리\nlet candidateHandler=async(from,candidate)=>{var _peerConnects$current7;const iceCandidate=new RTCIceCandidate(candidate);await((_peerConnects$current7=peerConnects.current[from])===null||_peerConnects$current7===void 0?void 0:_peerConnects$current7.pc.addIceCandidate(iceCandidate));};// useEffect -----------------------------\n// 시작시 방 정보 얻어옴\nuseEffect(()=>{let data=async()=>{try{let room=await stream_service.getStreamRoomData(id);setRoom(room.room);}catch(err){console.log(err);}};data();},[]);// 룸정보가 오면 start시작\nuseEffect(()=>{if(room){var _room$participants2;(_room$participants2=room.participants)===null||_room$participants2===void 0?void 0:_room$participants2.map(val=>{if(val.nickname!==user.nickname){peerConnect(val.nickname);}});}start();},[room]);// 소켓 연결\nuseEffect(()=>{socketClient.emit(\"join\",`room${id}`);socketClient.on(\"other join\",joinRoomHandler);socketClient.on(\"offer\",offerHandler);//signaling offer\nsocketClient.on(\"answer\",answerHandler);//signaling answer\nsocketClient.on(\"candidate\",candidateHandler);//signaling candidate\nsocketClient.on(\"leave room\",leaveRoomHandler);// other user leave room\nsocketClient.on(\"toggle track\",trackHandler);return()=>{socketClient.on(\"other join\",joinRoomHandler);socketClient.off(\"offer\",offerHandler);socketClient.off(\"answer\",answerHandler);socketClient.off(\"candidate\",candidateHandler);socketClient.off(\"leave room\",leaveRoomHandler);socketClient.off(\"toggle track\",trackHandler);};},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"page streamRoom_page\",children:[/*#__PURE__*/_jsx(RoomMain,{user:user,stream:stream,connects:connects}),/*#__PURE__*/_jsx(Menu,{user:user,connects:connects,participants:room===null||room===void 0?void 0:room.participants})]});};","map":{"version":3,"names":["useEffect","useRef","useState","useParams","socketClient","stream_service","emitter","useSelector","Menu","RoomMain","jsx","_jsx","jsxs","_jsxs","StreamRoom","user","state","id","peerConnects","room","setRoom","stream","setStream","connects","setConnects","joinRoomHandler","who","leaveRoomHandler","current","trackHandler","to","type","c","stInfo","audio","video","peerConnect","pc","RTCPeerConnection","channel","createDataChannel","getTracks","forEach","track","addTrack","onicecandidate","e","candidate","emit","nickname","ontrack","kind","MediaStream","includes","enabled","onmessage","JSON","parse","data","offer","createOffer","setLocalDescription","start","_room$participants","navigator","mediaDevices","getUserMedia","participants","map","val","err","console","log","offerHandler","from","_peerConnects$current","_peerConnects$current2","setRemoteDescription","RTCSessionDescription","signalingState","_peerConnects$current3","_peerConnects$current4","answer","createAnswer","answerHandler","_peerConnects$current5","_peerConnects$current6","currentRemoteDescription","candidateHandler","_peerConnects$current7","iceCandidate","RTCIceCandidate","addIceCandidate","getStreamRoomData","_room$participants2","on","off","className","children"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/page/streamroom.tsx"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport \"../css/room/streamRoom.css\";\r\nimport { Form, useNavigate, useParams } from \"react-router-dom\";\r\nimport { socketClient } from \"../util/socket\";\r\nimport { stream_service } from \"../service/streamservice\";\r\nimport { emitter } from \"../util/event\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../context/store\";\r\n\r\n// type\r\nimport { Room } from \"../types/room\";\r\nimport { User } from \"../types/user\";\r\nimport { PeerConnects } from \"../types/room\";\r\n\r\n// component\r\nimport { Menu } from \"../components/room/menu/menu\";\r\nimport { RoomMain } from \"../components/room/main/roomMain\";\r\nimport { convertToObject } from \"typescript\";\r\n\r\nexport const StreamRoom = () => {\r\n  let user = useSelector((state: RootState) => state.user);\r\n  let { id } = useParams();\r\n\r\n  // ref\r\n  let peerConnects = useRef<{\r\n    [nickname: string]: { pc: RTCPeerConnection; channel: RTCDataChannel };\r\n  }>({});\r\n\r\n  // state\r\n  let [room, setRoom] = useState<Room | null>(null); //방 정보\r\n  let [stream, setStream] = useState<MediaStream | null>(null);\r\n  let [connects, setConnects] = useState<PeerConnects>({});\r\n\r\n  // 방 입장/퇴장 관련 --------------------------\r\n  let joinRoomHandler = (who: string) => {\r\n    // setConnectList((c) => [...c, { from: who, stream: new MediaStream() }]);\r\n  };\r\n\r\n  // room leave 처리\r\n  let leaveRoomHandler = (who: string) => {\r\n    delete peerConnects.current[who];\r\n    // setConnectList((c) => c.filter((val) => val.from !== who));\r\n  };\r\n\r\n  // 비디오/오디오 상태 ----------------------------\r\n\r\n  // 상대 화면 on/off\r\n  let trackHandler = (to: string, type: \"audio\" | \"video\", state: boolean) => {\r\n    setConnects((c) => {\r\n      let stInfo = c[to];\r\n\r\n      type == \"audio\" ? (stInfo.audio = state) : (stInfo.video = state);\r\n\r\n      return { ...c, [to]: stInfo };\r\n    });\r\n  };\r\n\r\n  // p2p연결 관련 --------------------------------\r\n  // connect 연결\r\n  let peerConnect = async (to: string, stream?: MediaStream) => {\r\n    let pc = new RTCPeerConnection();\r\n    const channel = pc.createDataChannel(\"chat\");\r\n\r\n    stream?.getTracks().forEach((track) => {\r\n      pc.addTrack(track, stream);\r\n    });\r\n\r\n    // signaling event\r\n    pc.onicecandidate = (e) => {\r\n      if (e.candidate)\r\n        socketClient.emit(\"candidate\", user.nickname, to, e.candidate);\r\n    };\r\n\r\n    pc.ontrack = (e) => {\r\n      let kind = e.track.kind;\r\n      setConnects((c) => {\r\n        let { pc, channel, stream, video, audio } = c[to];\r\n\r\n        // stream이 없으면 미디어스트림 추가해줌\r\n        if (!stream) stream = new MediaStream();\r\n\r\n        // 만약에 event track이 stream에 존재하지 않으면 추가해줌\r\n        if (!stream.getTracks().includes(e.track)) stream.addTrack(e.track);\r\n        // 미디어 kind타입에 활성화 상태 알려줌\r\n        kind == \"audio\" ? (audio = e.track.enabled) : (video = e.track.enabled);\r\n\r\n        return {\r\n          ...c,\r\n          [to]: { pc, channel, stream, video, audio },\r\n        };\r\n      });\r\n    };\r\n\r\n    // channel event\r\n    channel.onmessage = (e) => {\r\n      emitter.emit(\"menu chat\", JSON.parse(e.data));\r\n    };\r\n\r\n    let offer = await pc.createOffer();\r\n    await pc.setLocalDescription(offer!);\r\n    socketClient.emit(\"offer\", user.nickname, to, offer);\r\n\r\n    peerConnects.current[to] = { pc, channel };\r\n\r\n    setConnects((c) => ({\r\n      ...c,\r\n      [to]: {\r\n        ...c.to,\r\n        pc,\r\n        channel,\r\n        stream: new MediaStream(),\r\n      },\r\n    }));\r\n  };\r\n\r\n  // 연결 시작\r\n  let start = async () => {\r\n    try {\r\n      let stream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n        audio: true,\r\n      });\r\n      setStream(stream);\r\n\r\n      // 트랙을 더해줌\r\n      if (room)\r\n        room.participants?.map(async (val: any) => {\r\n          if (val.nickname !== user.nickname) {\r\n            await peerConnect(val.nickname, stream);\r\n          }\r\n        });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // offer처리\r\n  let offerHandler = async (from: string, offer: RTCSessionDescriptionInit) => {\r\n    try {\r\n      // if (!peerConnects.current[from].pc) peerConnect(from);\r\n      await peerConnects.current[from].pc?.setRemoteDescription(\r\n        new RTCSessionDescription(offer)\r\n      );\r\n\r\n      if (\r\n        peerConnects.current[from]?.pc.signalingState == \"have-remote-offer\" &&\r\n        user.nickname !== \"\"\r\n      ) {\r\n        const answer = await peerConnects.current[from]?.pc.createAnswer();\r\n        await peerConnects.current[from]?.pc.setLocalDescription(answer!);\r\n        socketClient.emit(\"answer\", user.nickname, from, answer);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // answer 처리\r\n  let answerHandler = async (\r\n    from: string,\r\n    answer: RTCSessionDescriptionInit\r\n  ) => {\r\n    try {\r\n      if (!peerConnects.current[from]?.pc.currentRemoteDescription)\r\n        await peerConnects.current[from]?.pc.setRemoteDescription(answer!);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n\r\n  // candidate처리\r\n  let candidateHandler = async (from: string, candidate: RTCIceCandidate) => {\r\n    const iceCandidate = new RTCIceCandidate(candidate);\r\n    await peerConnects.current[from]?.pc.addIceCandidate(iceCandidate);\r\n  };\r\n\r\n  // useEffect -----------------------------\r\n  // 시작시 방 정보 얻어옴\r\n  useEffect(() => {\r\n    let data = async () => {\r\n      try {\r\n        let room = await stream_service.getStreamRoomData(id!);\r\n        setRoom(room.room);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    data();\r\n  }, []);\r\n\r\n  // 룸정보가 오면 start시작\r\n  useEffect(() => {\r\n    if (room) {\r\n      room.participants?.map((val: any) => {\r\n        if (val.nickname !== user.nickname) {\r\n          peerConnect(val.nickname);\r\n        }\r\n      });\r\n    }\r\n    start();\r\n  }, [room]);\r\n\r\n  // 소켓 연결\r\n  useEffect(() => {\r\n    socketClient.emit(\"join\", `room${id}`);\r\n\r\n    socketClient.on(\"other join\", joinRoomHandler);\r\n    socketClient.on(\"offer\", offerHandler); //signaling offer\r\n    socketClient.on(\"answer\", answerHandler); //signaling answer\r\n    socketClient.on(\"candidate\", candidateHandler); //signaling candidate\r\n    socketClient.on(\"leave room\", leaveRoomHandler); // other user leave room\r\n    socketClient.on(\"toggle track\", trackHandler);\r\n\r\n    return () => {\r\n      socketClient.on(\"other join\", joinRoomHandler);\r\n      socketClient.off(\"offer\", offerHandler);\r\n      socketClient.off(\"answer\", answerHandler);\r\n      socketClient.off(\"candidate\", candidateHandler);\r\n      socketClient.off(\"leave room\", leaveRoomHandler);\r\n      socketClient.off(\"toggle track\", trackHandler);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"page streamRoom_page\">\r\n      {/* main */}\r\n      <RoomMain user={user} stream={stream} connects={connects} />\r\n\r\n      {/* menu */}\r\n      <Menu user={user} connects={connects} participants={room?.participants} />\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"AAAA,OAASA,SAAS,CAAEC,MAAM,CAAEC,QAAQ,KAAQ,OAAO,CACnD,MAAO,4BAA4B,CACnC,OAA4BC,SAAS,KAAQ,kBAAkB,CAC/D,OAASC,YAAY,KAAQ,gBAAgB,CAC7C,OAASC,cAAc,KAAQ,0BAA0B,CACzD,OAASC,OAAO,KAAQ,eAAe,CACvC,OAASC,WAAW,KAAQ,aAAa,CAGzC;AAKA;AACA,OAASC,IAAI,KAAQ,8BAA8B,CACnD,OAASC,QAAQ,KAAQ,kCAAkC,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAG5D,MAAO,MAAM,CAAAC,UAAU,CAAGA,CAAA,GAAM,CAC9B,GAAI,CAAAC,IAAI,CAAGR,WAAW,CAAES,KAAgB,EAAKA,KAAK,CAACD,IAAI,CAAC,CACxD,GAAI,CAAEE,EAAG,CAAC,CAAGd,SAAS,CAAC,CAAC,CAExB;AACA,GAAI,CAAAe,YAAY,CAAGjB,MAAM,CAEtB,CAAC,CAAC,CAAC,CAEN;AACA,GAAI,CAACkB,IAAI,CAAEC,OAAO,CAAC,CAAGlB,QAAQ,CAAc,IAAI,CAAC,CAAE;AACnD,GAAI,CAACmB,MAAM,CAAEC,SAAS,CAAC,CAAGpB,QAAQ,CAAqB,IAAI,CAAC,CAC5D,GAAI,CAACqB,QAAQ,CAAEC,WAAW,CAAC,CAAGtB,QAAQ,CAAe,CAAC,CAAC,CAAC,CAExD;AACA,GAAI,CAAAuB,eAAe,CAAIC,GAAW,EAAK,CACrC;AAAA,CACD,CAED;AACA,GAAI,CAAAC,gBAAgB,CAAID,GAAW,EAAK,CACtC,MAAO,CAAAR,YAAY,CAACU,OAAO,CAACF,GAAG,CAAC,CAChC;AACF,CAAC,CAED;AAEA;AACA,GAAI,CAAAG,YAAY,CAAGA,CAACC,EAAU,CAAEC,IAAuB,CAAEf,KAAc,GAAK,CAC1EQ,WAAW,CAAEQ,CAAC,EAAK,CACjB,GAAI,CAAAC,MAAM,CAAGD,CAAC,CAACF,EAAE,CAAC,CAElBC,IAAI,EAAI,OAAO,CAAIE,MAAM,CAACC,KAAK,CAAGlB,KAAK,CAAKiB,MAAM,CAACE,KAAK,CAAGnB,KAAM,CAEjE,MAAO,CAAE,GAAGgB,CAAC,CAAE,CAACF,EAAE,EAAGG,MAAO,CAAC,CAC/B,CAAC,CAAC,CACJ,CAAC,CAED;AACA;AACA,GAAI,CAAAG,WAAW,CAAG,KAAAA,CAAON,EAAU,CAAET,MAAoB,GAAK,CAC5D,GAAI,CAAAgB,EAAE,CAAG,GAAI,CAAAC,iBAAiB,CAAC,CAAC,CAChC,KAAM,CAAAC,OAAO,CAAGF,EAAE,CAACG,iBAAiB,CAAC,MAAM,CAAC,CAE5CnB,MAAM,SAANA,MAAM,iBAANA,MAAM,CAAEoB,SAAS,CAAC,CAAC,CAACC,OAAO,CAAEC,KAAK,EAAK,CACrCN,EAAE,CAACO,QAAQ,CAACD,KAAK,CAAEtB,MAAM,CAAC,CAC5B,CAAC,CAAC,CAEF;AACAgB,EAAE,CAACQ,cAAc,CAAIC,CAAC,EAAK,CACzB,GAAIA,CAAC,CAACC,SAAS,CACb3C,YAAY,CAAC4C,IAAI,CAAC,WAAW,CAAEjC,IAAI,CAACkC,QAAQ,CAAEnB,EAAE,CAAEgB,CAAC,CAACC,SAAS,CAAC,CAClE,CAAC,CAEDV,EAAE,CAACa,OAAO,CAAIJ,CAAC,EAAK,CAClB,GAAI,CAAAK,IAAI,CAAGL,CAAC,CAACH,KAAK,CAACQ,IAAI,CACvB3B,WAAW,CAAEQ,CAAC,EAAK,CACjB,GAAI,CAAEK,EAAE,CAAEE,OAAO,CAAElB,MAAM,CAAEc,KAAK,CAAED,KAAM,CAAC,CAAGF,CAAC,CAACF,EAAE,CAAC,CAEjD;AACA,GAAI,CAACT,MAAM,CAAEA,MAAM,CAAG,GAAI,CAAA+B,WAAW,CAAC,CAAC,CAEvC;AACA,GAAI,CAAC/B,MAAM,CAACoB,SAAS,CAAC,CAAC,CAACY,QAAQ,CAACP,CAAC,CAACH,KAAK,CAAC,CAAEtB,MAAM,CAACuB,QAAQ,CAACE,CAAC,CAACH,KAAK,CAAC,CACnE;AACAQ,IAAI,EAAI,OAAO,CAAIjB,KAAK,CAAGY,CAAC,CAACH,KAAK,CAACW,OAAO,CAAKnB,KAAK,CAAGW,CAAC,CAACH,KAAK,CAACW,OAAQ,CAEvE,MAAO,CACL,GAAGtB,CAAC,CACJ,CAACF,EAAE,EAAG,CAAEO,EAAE,CAAEE,OAAO,CAAElB,MAAM,CAAEc,KAAK,CAAED,KAAM,CAC5C,CAAC,CACH,CAAC,CAAC,CACJ,CAAC,CAED;AACAK,OAAO,CAACgB,SAAS,CAAIT,CAAC,EAAK,CACzBxC,OAAO,CAAC0C,IAAI,CAAC,WAAW,CAAEQ,IAAI,CAACC,KAAK,CAACX,CAAC,CAACY,IAAI,CAAC,CAAC,CAC/C,CAAC,CAED,GAAI,CAAAC,KAAK,CAAG,KAAM,CAAAtB,EAAE,CAACuB,WAAW,CAAC,CAAC,CAClC,KAAM,CAAAvB,EAAE,CAACwB,mBAAmB,CAACF,KAAM,CAAC,CACpCvD,YAAY,CAAC4C,IAAI,CAAC,OAAO,CAAEjC,IAAI,CAACkC,QAAQ,CAAEnB,EAAE,CAAE6B,KAAK,CAAC,CAEpDzC,YAAY,CAACU,OAAO,CAACE,EAAE,CAAC,CAAG,CAAEO,EAAE,CAAEE,OAAQ,CAAC,CAE1Cf,WAAW,CAAEQ,CAAC,GAAM,CAClB,GAAGA,CAAC,CACJ,CAACF,EAAE,EAAG,CACJ,GAAGE,CAAC,CAACF,EAAE,CACPO,EAAE,CACFE,OAAO,CACPlB,MAAM,CAAE,GAAI,CAAA+B,WAAW,CAAC,CAC1B,CACF,CAAC,CAAC,CAAC,CACL,CAAC,CAED;AACA,GAAI,CAAAU,KAAK,CAAG,KAAAA,CAAA,GAAY,CACtB,GAAI,KAAAC,kBAAA,CACF,GAAI,CAAA1C,MAAM,CAAG,KAAM,CAAA2C,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC,CACrD/B,KAAK,CAAE,IAAI,CACXD,KAAK,CAAE,IACT,CAAC,CAAC,CACFZ,SAAS,CAACD,MAAM,CAAC,CAEjB;AACA,GAAIF,IAAI,CACN,CAAA4C,kBAAA,CAAA5C,IAAI,CAACgD,YAAY,UAAAJ,kBAAA,iBAAjBA,kBAAA,CAAmBK,GAAG,CAAC,KAAO,CAAAC,GAAQ,EAAK,CACzC,GAAIA,GAAG,CAACpB,QAAQ,GAAKlC,IAAI,CAACkC,QAAQ,CAAE,CAClC,KAAM,CAAAb,WAAW,CAACiC,GAAG,CAACpB,QAAQ,CAAE5B,MAAM,CAAC,CACzC,CACF,CAAC,CAAC,CACN,CAAE,MAAOiD,GAAG,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAClB,CACF,CAAC,CAED;AACA,GAAI,CAAAG,YAAY,CAAG,KAAAA,CAAOC,IAAY,CAAEf,KAAgC,GAAK,CAC3E,GAAI,KAAAgB,qBAAA,CAAAC,sBAAA,CACF;AACA,OAAAD,qBAAA,CAAMzD,YAAY,CAACU,OAAO,CAAC8C,IAAI,CAAC,CAACrC,EAAE,UAAAsC,qBAAA,iBAA7BA,qBAAA,CAA+BE,oBAAoB,CACvD,GAAI,CAAAC,qBAAqB,CAACnB,KAAK,CACjC,CAAC,EAED,GACE,EAAAiB,sBAAA,CAAA1D,YAAY,CAACU,OAAO,CAAC8C,IAAI,CAAC,UAAAE,sBAAA,iBAA1BA,sBAAA,CAA4BvC,EAAE,CAAC0C,cAAc,GAAI,mBAAmB,EACpEhE,IAAI,CAACkC,QAAQ,GAAK,EAAE,CACpB,KAAA+B,sBAAA,CAAAC,sBAAA,CACA,KAAM,CAAAC,MAAM,CAAG,OAAAF,sBAAA,CAAM9D,YAAY,CAACU,OAAO,CAAC8C,IAAI,CAAC,UAAAM,sBAAA,iBAA1BA,sBAAA,CAA4B3C,EAAE,CAAC8C,YAAY,CAAC,CAAC,EAClE,OAAAF,sBAAA,CAAM/D,YAAY,CAACU,OAAO,CAAC8C,IAAI,CAAC,UAAAO,sBAAA,iBAA1BA,sBAAA,CAA4B5C,EAAE,CAACwB,mBAAmB,CAACqB,MAAO,CAAC,EACjE9E,YAAY,CAAC4C,IAAI,CAAC,QAAQ,CAAEjC,IAAI,CAACkC,QAAQ,CAAEyB,IAAI,CAAEQ,MAAM,CAAC,CAC1D,CACF,CAAE,MAAOZ,GAAG,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAClB,CACF,CAAC,CAED;AACA,GAAI,CAAAc,aAAa,CAAG,KAAAA,CAClBV,IAAY,CACZQ,MAAiC,GAC9B,CACH,GAAI,KAAAG,sBAAA,CAAAC,sBAAA,CACF,GAAI,GAAAD,sBAAA,CAACnE,YAAY,CAACU,OAAO,CAAC8C,IAAI,CAAC,UAAAW,sBAAA,WAA1BA,sBAAA,CAA4BhD,EAAE,CAACkD,wBAAwB,EAC1D,OAAAD,sBAAA,CAAMpE,YAAY,CAACU,OAAO,CAAC8C,IAAI,CAAC,UAAAY,sBAAA,iBAA1BA,sBAAA,CAA4BjD,EAAE,CAACwC,oBAAoB,CAACK,MAAO,CAAC,EACtE,CAAE,MAAOZ,GAAG,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAClB,CACF,CAAC,CAED;AACA,GAAI,CAAAkB,gBAAgB,CAAG,KAAAA,CAAOd,IAAY,CAAE3B,SAA0B,GAAK,KAAA0C,sBAAA,CACzE,KAAM,CAAAC,YAAY,CAAG,GAAI,CAAAC,eAAe,CAAC5C,SAAS,CAAC,CACnD,OAAA0C,sBAAA,CAAMvE,YAAY,CAACU,OAAO,CAAC8C,IAAI,CAAC,UAAAe,sBAAA,iBAA1BA,sBAAA,CAA4BpD,EAAE,CAACuD,eAAe,CAACF,YAAY,CAAC,EACpE,CAAC,CAED;AACA;AACA1F,SAAS,CAAC,IAAM,CACd,GAAI,CAAA0D,IAAI,CAAG,KAAAA,CAAA,GAAY,CACrB,GAAI,CACF,GAAI,CAAAvC,IAAI,CAAG,KAAM,CAAAd,cAAc,CAACwF,iBAAiB,CAAC5E,EAAG,CAAC,CACtDG,OAAO,CAACD,IAAI,CAACA,IAAI,CAAC,CACpB,CAAE,MAAOmD,GAAG,CAAE,CACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAClB,CACF,CAAC,CACDZ,IAAI,CAAC,CAAC,CACR,CAAC,CAAE,EAAE,CAAC,CAEN;AACA1D,SAAS,CAAC,IAAM,CACd,GAAImB,IAAI,CAAE,KAAA2E,mBAAA,CACR,CAAAA,mBAAA,CAAA3E,IAAI,CAACgD,YAAY,UAAA2B,mBAAA,iBAAjBA,mBAAA,CAAmB1B,GAAG,CAAEC,GAAQ,EAAK,CACnC,GAAIA,GAAG,CAACpB,QAAQ,GAAKlC,IAAI,CAACkC,QAAQ,CAAE,CAClCb,WAAW,CAACiC,GAAG,CAACpB,QAAQ,CAAC,CAC3B,CACF,CAAC,CAAC,CACJ,CACAa,KAAK,CAAC,CAAC,CACT,CAAC,CAAE,CAAC3C,IAAI,CAAC,CAAC,CAEV;AACAnB,SAAS,CAAC,IAAM,CACdI,YAAY,CAAC4C,IAAI,CAAC,MAAM,CAAE,OAAO/B,EAAE,EAAE,CAAC,CAEtCb,YAAY,CAAC2F,EAAE,CAAC,YAAY,CAAEtE,eAAe,CAAC,CAC9CrB,YAAY,CAAC2F,EAAE,CAAC,OAAO,CAAEtB,YAAY,CAAC,CAAE;AACxCrE,YAAY,CAAC2F,EAAE,CAAC,QAAQ,CAAEX,aAAa,CAAC,CAAE;AAC1ChF,YAAY,CAAC2F,EAAE,CAAC,WAAW,CAAEP,gBAAgB,CAAC,CAAE;AAChDpF,YAAY,CAAC2F,EAAE,CAAC,YAAY,CAAEpE,gBAAgB,CAAC,CAAE;AACjDvB,YAAY,CAAC2F,EAAE,CAAC,cAAc,CAAElE,YAAY,CAAC,CAE7C,MAAO,IAAM,CACXzB,YAAY,CAAC2F,EAAE,CAAC,YAAY,CAAEtE,eAAe,CAAC,CAC9CrB,YAAY,CAAC4F,GAAG,CAAC,OAAO,CAAEvB,YAAY,CAAC,CACvCrE,YAAY,CAAC4F,GAAG,CAAC,QAAQ,CAAEZ,aAAa,CAAC,CACzChF,YAAY,CAAC4F,GAAG,CAAC,WAAW,CAAER,gBAAgB,CAAC,CAC/CpF,YAAY,CAAC4F,GAAG,CAAC,YAAY,CAAErE,gBAAgB,CAAC,CAChDvB,YAAY,CAAC4F,GAAG,CAAC,cAAc,CAAEnE,YAAY,CAAC,CAChD,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEhB,KAAA,QAAKoF,SAAS,CAAC,sBAAsB,CAAAC,QAAA,eAEnCvF,IAAA,CAACF,QAAQ,EAACM,IAAI,CAAEA,IAAK,CAACM,MAAM,CAAEA,MAAO,CAACE,QAAQ,CAAEA,QAAS,CAAE,CAAC,cAG5DZ,IAAA,CAACH,IAAI,EAACO,IAAI,CAAEA,IAAK,CAACQ,QAAQ,CAAEA,QAAS,CAAC4C,YAAY,CAAEhD,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEgD,YAAa,CAAE,CAAC,EACvE,CAAC,CAEV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}