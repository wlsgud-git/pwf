{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashh1\\\\Desktop\\\\project\\\\PlayWithFriends\\\\client\\\\src\\\\page\\\\streamroom.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport \"../css/room/streamRoom.css\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { stream_service } from \"../service/stream.service\";\nimport { useSelector } from \"react-redux\";\n\n// type\n// import { Room } from \"../types/room\";\n\n// component\nimport { createFormData } from \"../util/form\";\nimport { connectRoom } from \"../util/stream\";\nimport { Menu } from \"../components/room/menu\";\nimport { Stream } from \"../components/room/stream\";\nimport { StreamProvider, useStream } from \"../context/stream.context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ParticipantVideo = ({\n  nickname,\n  trackInfo\n}) => {\n  _s();\n  let videoRef = useRef(null);\n  useEffect(() => {\n    var _trackInfo$audio_trac, _trackInfo$video_trac;\n    if (!videoRef.current) return;\n    (_trackInfo$audio_trac = trackInfo.audio_track) === null || _trackInfo$audio_trac === void 0 ? void 0 : _trackInfo$audio_trac.attach(videoRef.current);\n    (_trackInfo$video_trac = trackInfo.video_track) === null || _trackInfo$video_trac === void 0 ? void 0 : _trackInfo$video_trac.attach(videoRef.current);\n  }, [trackInfo.audio_track, trackInfo.video_track]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"participant_track_box\",\n    children: [/*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"participant_infomation\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `fa-solid fa-microphone${trackInfo.audio_state ? \"\" : \"-slash\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"i\", {\n          className: `fa-solid fa-video${trackInfo.video_state ? \"\" : \"-slash\"}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: nickname\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ParticipantVideo, \"PdMsmLAy5JKU3vCrhAlqGYQfKuA=\");\n_c = ParticipantVideo;\nexport const StreamRoom = () => {\n  _s2();\n  // using\n  let user = useSelector(state => state.user);\n  let {\n    id\n  } = useParams();\n  let navigate = useNavigate();\n  let {\n    room,\n    setRoom\n  } = useStream();\n  let [token, setToken] = useState(\"\");\n\n  // pariticipant\n  let [participant, setParticipant] = useState({});\n\n  // init ------------------------------------------\n  useEffect(() => {\n    let start = async () => {\n      try {\n        let token = await stream_service.roomAccessToken(createFormData({\n          room: `room${id}`,\n          identity: user.nickname\n        }));\n        setToken(token);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n    start();\n  }, []);\n\n  // token으로 room 연결\n  useEffect(() => {\n    if (token == \"\") return;\n    let test = async () => {\n      try {\n        let room = await connectRoom(token);\n        setRoom(room);\n      } catch (err) {\n        console.log(err);\n      }\n      // try {\n      //   const room = await connectRoom(token);\n      //   const tracks = await getStream(audio, video);\n      //   videoTrack.current = getTrack(tracks!, \"video\") as LocalVideoTrack;\n      //   audioTrack.current = getTrack(tracks!, \"audio\") as LocalAudioTrack;\n      //   if (videoTrack.current && localRef.current) {\n      //     await room.localParticipant.publishTrack(videoTrack.current);\n      //     videoTrack.current.attach(localRef.current);\n      //   }\n      //   if (audioTrack.current && localRef.current) {\n      //     await room.localParticipant.publishTrack(audioTrack.current);\n      //     audioTrack.current.attach(localRef.current);\n      //   }\n      //   // 새 참가자 관련\n      //   room.on(\"participantConnected\", (participant: RemoteParticipant) => {\n      //     let identity = participant.identity;\n      //     setParticipant((c) => ({ ...c, [identity]: {} }));\n      //     participant.on(\"trackSubscribed\", (track) => {\n      //       track.kind == \"video\"\n      //         ? setParticipant((c) => ({\n      //             ...c,\n      //             [identity]: {\n      //               ...c[identity],\n      //               video_state: true,\n      //               video_track: track as RemoteVideoTrack,\n      //             },\n      //           }))\n      //         : setParticipant((c) => ({\n      //             ...c,\n      //             [identity]: {\n      //               ...c[identity],\n      //               audio_state: true,\n      //               audio_track: track as RemoteAudioTrack,\n      //             },\n      //           }));\n      //     });\n      //     participant.on(\"trackMuted\", (track) => {\n      //       setParticipant((c) => ({\n      //         ...c,\n      //         [identity]: {\n      //           ...c[identity],\n      //           video_state:\n      //             track.kind == \"video\" ? false : c[identity].video_state,\n      //           audio_state:\n      //             track.kind == \"audio\" ? false : c[identity].audio_state,\n      //         },\n      //       }));\n      //     });\n      //     participant.on(\"trackUnmuted\", (track) => {\n      //       setParticipant((c) => ({\n      //         ...c,\n      //         [identity]: {\n      //           ...c[identity],\n      //           video_state:\n      //             track.kind == \"video\" ? true : c[identity].video_state,\n      //           audio_state:\n      //             track.kind == \"audio\" ? true : c[identity].audio_state,\n      //         },\n      //       }));\n      //     });\n      //   });\n      //   // 기준 참가자 관련\n      //   room.remoteParticipants.forEach((participant) => {\n      //     let identity = participant.identity;\n      //     participant.getTrackPublications().forEach((pub) => {\n      //       if (pub.isSubscribed && pub.track) {\n      //         pub.kind == \"video\"\n      //           ? setParticipant((c) => ({\n      //               ...c,\n      //               [identity]: {\n      //                 ...c[identity],\n      //                 video_state: true,\n      //                 video_track: pub.track as RemoteVideoTrack,\n      //               },\n      //             }))\n      //           : setParticipant((c) => ({\n      //               ...c,\n      //               [identity]: {\n      //                 ...c[identity],\n      //                 audio_state: true,\n      //                 audio_track: pub.track as RemoteAudioTrack,\n      //               },\n      //             }));\n      //       }\n      //     });\n      //     participant.on(\"trackMuted\", (pub) => {\n      //       setParticipant((c) => ({\n      //         ...c,\n      //         [identity]: {\n      //           ...c[identity],\n      //           video_state:\n      //             pub.kind == \"video\" ? false : c[identity].video_state,\n      //           audio_state:\n      //             pub.kind == \"audio\" ? false : c[identity].audio_state,\n      //         },\n      //       }));\n      //     });\n      //     participant.on(\"trackUnmuted\", (pub) => {\n      //       setParticipant((c) => ({\n      //         ...c,\n      //         [identity]: {\n      //           ...c[identity],\n      //           video_state:\n      //             pub.kind == \"video\" ? true : c[identity].video_state,\n      //           audio_state:\n      //             pub.kind == \"audio\" ? true : c[identity].audio_state,\n      //         },\n      //       }));\n      //     });\n      //   });\n      // } catch (err) {\n      //   console.log(err);\n      // }\n    };\n    if (token !== \"\") test();\n  }, [token]);\n\n  // // track\n  // const toggleTrack = (type: \"audio\" | \"video\") => {\n  //   if (!localRef.current) return;\n  //   if (type == \"video\") {\n  //     if (!videoTrack.current) return;\n\n  //     video ? videoTrack.current.mute() : videoTrack.current.unmute();\n  //     setVideo((c) => !c);\n  //   } else {\n  //     if (!audioTrack.current) return;\n\n  //     audio ? audioTrack.current.mute() : audioTrack.current.unmute();\n  //     setAudio((c) => !c);\n  //   }\n  // };\n\n  return /*#__PURE__*/_jsxDEV(StreamProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page streamRoom_page\",\n      children: [/*#__PURE__*/_jsxDEV(Stream, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n};\n_s2(StreamRoom, \"3rWjzAAHVQDV4o2OFtHSAPevjsI=\", false, function () {\n  return [useSelector, useParams, useNavigate, useStream];\n});\n_c2 = StreamRoom;\nvar _c, _c2;\n$RefreshReg$(_c, \"ParticipantVideo\");\n$RefreshReg$(_c2, \"StreamRoom\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useNavigate","useParams","stream_service","useSelector","createFormData","connectRoom","Menu","Stream","StreamProvider","useStream","jsxDEV","_jsxDEV","ParticipantVideo","nickname","trackInfo","_s","videoRef","_trackInfo$audio_trac","_trackInfo$video_trac","current","audio_track","attach","video_track","className","children","ref","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","audio_state","video_state","_c","StreamRoom","_s2","user","state","id","navigate","room","setRoom","token","setToken","participant","setParticipant","start","roomAccessToken","identity","err","console","log","test","_c2","$RefreshReg$"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/page/streamroom.tsx"],"sourcesContent":["import \"../css/room/streamRoom.css\";\r\n\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport { socketClient } from \"../util/socket\";\r\nimport { stream_service } from \"../service/stream.service\";\r\nimport { emitter } from \"../util/event\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../redux/store\";\r\nimport {\r\n  Track,\r\n  Room,\r\n  RemoteParticipant,\r\n  RemoteTrackPublication,\r\n  createLocalTracks,\r\n  LocalVideoTrack,\r\n  LocalAudioTrack,\r\n  RemoteVideoTrack,\r\n  RemoteAudioTrack,\r\n} from \"livekit-client\";\r\n\r\n// type\r\n// import { Room } from \"../types/room\";\r\nimport { User } from \"../types/user\";\r\nimport { PeerConnects } from \"../types/room\";\r\n\r\n// component\r\nimport { createFormData } from \"../util/form\";\r\nimport {\r\n  connectRoom,\r\n  getMediaStream,\r\n  getStream,\r\n  getTrack,\r\n} from \"../util/stream\";\r\nimport { TrackProps } from \"../types/stream.types\";\r\nimport { Menu } from \"../components/room/menu\";\r\nimport { Stream } from \"../components/room/stream\";\r\nimport { StreamProvider, useStream } from \"../context/stream.context\";\r\n\r\ninterface ParticipantProps {\r\n  nickname: string;\r\n  trackInfo: TrackProps;\r\n}\r\n\r\nconst ParticipantVideo = ({ nickname, trackInfo }: ParticipantProps) => {\r\n  let videoRef = useRef<HTMLVideoElement | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (!videoRef.current) return;\r\n    trackInfo.audio_track?.attach(videoRef.current);\r\n    trackInfo.video_track?.attach(videoRef.current);\r\n  }, [trackInfo.audio_track, trackInfo.video_track]);\r\n  return (\r\n    <div className=\"participant_track_box\">\r\n      <video ref={videoRef} autoPlay></video>\r\n      <div className=\"participant_infomation\">\r\n        <span>\r\n          <i\r\n            className={`fa-solid fa-microphone${\r\n              trackInfo.audio_state ? \"\" : \"-slash\"\r\n            }`}\r\n          ></i>\r\n        </span>\r\n        <span>\r\n          <i\r\n            className={`fa-solid fa-video${\r\n              trackInfo.video_state ? \"\" : \"-slash\"\r\n            }`}\r\n          ></i>\r\n        </span>\r\n        <span>{nickname}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const StreamRoom = () => {\r\n  // using\r\n  let user = useSelector((state: RootState) => state.user);\r\n  let { id } = useParams();\r\n  let navigate = useNavigate();\r\n\r\n  let { room, setRoom } = useStream();\r\n\r\n  let [token, setToken] = useState<string>(\"\");\r\n\r\n  // pariticipant\r\n  let [participant, setParticipant] = useState<{\r\n    [nickname: string]: TrackProps;\r\n  }>({});\r\n\r\n  // init ------------------------------------------\r\n  useEffect(() => {\r\n    let start = async () => {\r\n      try {\r\n        let token = await stream_service.roomAccessToken(\r\n          createFormData({ room: `room${id}`, identity: user.nickname })\r\n        );\r\n        setToken(token);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    };\r\n    start();\r\n  }, []);\r\n\r\n  // token으로 room 연결\r\n  useEffect(() => {\r\n    if (token == \"\") return;\r\n    let test = async () => {\r\n      try {\r\n        let room = await connectRoom(token);\r\n        setRoom(room);\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n      // try {\r\n      //   const room = await connectRoom(token);\r\n      //   const tracks = await getStream(audio, video);\r\n      //   videoTrack.current = getTrack(tracks!, \"video\") as LocalVideoTrack;\r\n      //   audioTrack.current = getTrack(tracks!, \"audio\") as LocalAudioTrack;\r\n      //   if (videoTrack.current && localRef.current) {\r\n      //     await room.localParticipant.publishTrack(videoTrack.current);\r\n      //     videoTrack.current.attach(localRef.current);\r\n      //   }\r\n      //   if (audioTrack.current && localRef.current) {\r\n      //     await room.localParticipant.publishTrack(audioTrack.current);\r\n      //     audioTrack.current.attach(localRef.current);\r\n      //   }\r\n      //   // 새 참가자 관련\r\n      //   room.on(\"participantConnected\", (participant: RemoteParticipant) => {\r\n      //     let identity = participant.identity;\r\n      //     setParticipant((c) => ({ ...c, [identity]: {} }));\r\n      //     participant.on(\"trackSubscribed\", (track) => {\r\n      //       track.kind == \"video\"\r\n      //         ? setParticipant((c) => ({\r\n      //             ...c,\r\n      //             [identity]: {\r\n      //               ...c[identity],\r\n      //               video_state: true,\r\n      //               video_track: track as RemoteVideoTrack,\r\n      //             },\r\n      //           }))\r\n      //         : setParticipant((c) => ({\r\n      //             ...c,\r\n      //             [identity]: {\r\n      //               ...c[identity],\r\n      //               audio_state: true,\r\n      //               audio_track: track as RemoteAudioTrack,\r\n      //             },\r\n      //           }));\r\n      //     });\r\n      //     participant.on(\"trackMuted\", (track) => {\r\n      //       setParticipant((c) => ({\r\n      //         ...c,\r\n      //         [identity]: {\r\n      //           ...c[identity],\r\n      //           video_state:\r\n      //             track.kind == \"video\" ? false : c[identity].video_state,\r\n      //           audio_state:\r\n      //             track.kind == \"audio\" ? false : c[identity].audio_state,\r\n      //         },\r\n      //       }));\r\n      //     });\r\n      //     participant.on(\"trackUnmuted\", (track) => {\r\n      //       setParticipant((c) => ({\r\n      //         ...c,\r\n      //         [identity]: {\r\n      //           ...c[identity],\r\n      //           video_state:\r\n      //             track.kind == \"video\" ? true : c[identity].video_state,\r\n      //           audio_state:\r\n      //             track.kind == \"audio\" ? true : c[identity].audio_state,\r\n      //         },\r\n      //       }));\r\n      //     });\r\n      //   });\r\n      //   // 기준 참가자 관련\r\n      //   room.remoteParticipants.forEach((participant) => {\r\n      //     let identity = participant.identity;\r\n      //     participant.getTrackPublications().forEach((pub) => {\r\n      //       if (pub.isSubscribed && pub.track) {\r\n      //         pub.kind == \"video\"\r\n      //           ? setParticipant((c) => ({\r\n      //               ...c,\r\n      //               [identity]: {\r\n      //                 ...c[identity],\r\n      //                 video_state: true,\r\n      //                 video_track: pub.track as RemoteVideoTrack,\r\n      //               },\r\n      //             }))\r\n      //           : setParticipant((c) => ({\r\n      //               ...c,\r\n      //               [identity]: {\r\n      //                 ...c[identity],\r\n      //                 audio_state: true,\r\n      //                 audio_track: pub.track as RemoteAudioTrack,\r\n      //               },\r\n      //             }));\r\n      //       }\r\n      //     });\r\n      //     participant.on(\"trackMuted\", (pub) => {\r\n      //       setParticipant((c) => ({\r\n      //         ...c,\r\n      //         [identity]: {\r\n      //           ...c[identity],\r\n      //           video_state:\r\n      //             pub.kind == \"video\" ? false : c[identity].video_state,\r\n      //           audio_state:\r\n      //             pub.kind == \"audio\" ? false : c[identity].audio_state,\r\n      //         },\r\n      //       }));\r\n      //     });\r\n      //     participant.on(\"trackUnmuted\", (pub) => {\r\n      //       setParticipant((c) => ({\r\n      //         ...c,\r\n      //         [identity]: {\r\n      //           ...c[identity],\r\n      //           video_state:\r\n      //             pub.kind == \"video\" ? true : c[identity].video_state,\r\n      //           audio_state:\r\n      //             pub.kind == \"audio\" ? true : c[identity].audio_state,\r\n      //         },\r\n      //       }));\r\n      //     });\r\n      //   });\r\n      // } catch (err) {\r\n      //   console.log(err);\r\n      // }\r\n    };\r\n    if (token !== \"\") test();\r\n  }, [token]);\r\n\r\n  // // track\r\n  // const toggleTrack = (type: \"audio\" | \"video\") => {\r\n  //   if (!localRef.current) return;\r\n  //   if (type == \"video\") {\r\n  //     if (!videoTrack.current) return;\r\n\r\n  //     video ? videoTrack.current.mute() : videoTrack.current.unmute();\r\n  //     setVideo((c) => !c);\r\n  //   } else {\r\n  //     if (!audioTrack.current) return;\r\n\r\n  //     audio ? audioTrack.current.mute() : audioTrack.current.unmute();\r\n  //     setAudio((c) => !c);\r\n  //   }\r\n  // };\r\n\r\n  return (\r\n    <StreamProvider>\r\n      <div className=\"page streamRoom_page\">\r\n        {/* 참가자들의 화면 부분 */}\r\n        <Stream />\r\n        {/* 참가자들 채팅 / 참가자 목록 */}\r\n        <Menu />\r\n      </div>\r\n    </StreamProvider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}