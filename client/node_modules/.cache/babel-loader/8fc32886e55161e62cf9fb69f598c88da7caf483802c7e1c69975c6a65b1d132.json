{"ast":null,"code":"// css\nimport\"../css/home.css\";import{emitter}from\"../util/event\";import{lazy,Suspense,useEffect}from\"react\";import{useDispatch,useSelector}from\"react-redux\";import{userAction}from\"../context/actions/userAction\";import{socketClient,userSocket}from\"../util/socket\";// component\nimport{Modal}from\"./modal\";import{PageHeader}from\"../components/pageHeader\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MyFriends=/*#__PURE__*/lazy(()=>import(\"../components/myFriend\").then(_ref=>{let{MyFriends}=_ref;return{default:MyFriends};}));const StreamRoomLi=/*#__PURE__*/lazy(()=>import(\"../components/roomLi\").then(_ref2=>{let{StreamRoomLi}=_ref2;return{default:StreamRoomLi};}));export const Home=()=>{let dispatch=useDispatch();let user=useSelector(state=>state.user);// 시작할때 유저 정보를 가져옴\nuseEffect(()=>{dispatch(userAction.getUserAction());},[dispatch]);// 유저 정보가 변경되면 소켓연결을 시작함\nuseEffect(()=>{if(user.id)userSocket(socketClient,dispatch,user);},[user]);return/*#__PURE__*/_jsxs(\"div\",{className:\"page home_page\",children:[/*#__PURE__*/_jsx(PageHeader,{}),/*#__PURE__*/_jsx(Modal,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"pwf_content\",children:[/*#__PURE__*/_jsxs(\"ul\",{className:\"stream_room_lists\",children:[user.stream_room&&user.stream_room.length?user.stream_room.map(val=>/*#__PURE__*/_jsx(StreamRoomLi,{data:val})):\"\",/*#__PURE__*/_jsx(\"button\",{onClick:()=>emitter.emit(\"modal\",{type:\"stream\",open:true}),children:\"\\uBC29\\uB9CC\\uB4E4\\uAE30\"})]}),/*#__PURE__*/_jsx(Suspense,{fallback:/*#__PURE__*/_jsx(\"div\",{children:\"loading...\"}),children:/*#__PURE__*/_jsx(MyFriends,{})})]})]});};","map":{"version":3,"names":["emitter","lazy","Suspense","useEffect","useDispatch","useSelector","userAction","socketClient","userSocket","Modal","PageHeader","jsx","_jsx","jsxs","_jsxs","MyFriends","then","_ref","default","StreamRoomLi","_ref2","Home","dispatch","user","state","getUserAction","id","className","children","stream_room","length","map","val","data","onClick","emit","type","open","fallback"],"sources":["C:/Users/ashh1/Desktop/project/PlayWithFriends/client/src/page/home.tsx"],"sourcesContent":["// css\r\nimport \"../css/home.css\";\r\n\r\nimport { emitter } from \"../util/event\";\r\nimport { lazy, Suspense, useEffect, useMemo } from \"react\";\r\nimport { AppDispatch, RootState } from \"../context/store\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { userAction } from \"../context/actions/userAction\";\r\nimport { socketClient, userSocket } from \"../util/socket\";\r\n\r\n// component\r\nimport { Modal } from \"./modal\";\r\nimport { PageHeader } from \"../components/pageHeader\";\r\nconst MyFriends = lazy(() =>\r\n  import(\"../components/myFriend\").then(({ MyFriends }) => ({\r\n    default: MyFriends,\r\n  }))\r\n);\r\nconst StreamRoomLi = lazy(() =>\r\n  import(\"../components/roomLi\").then(({ StreamRoomLi }) => ({\r\n    default: StreamRoomLi,\r\n  }))\r\n);\r\n\r\nexport const Home = () => {\r\n  let dispatch = useDispatch<AppDispatch>();\r\n  let user = useSelector((state: RootState) => state.user);\r\n\r\n  // 시작할때 유저 정보를 가져옴\r\n  useEffect(() => {\r\n    dispatch(userAction.getUserAction());\r\n  }, [dispatch]);\r\n\r\n  // 유저 정보가 변경되면 소켓연결을 시작함\r\n  useEffect(() => {\r\n    if (user.id) userSocket(socketClient, dispatch, user);\r\n  }, [user]);\r\n\r\n  return (\r\n    <div className=\"page home_page\">\r\n      {/* header */}\r\n      <PageHeader />\r\n\r\n      {/* streamroom modal */}\r\n      <Modal />\r\n\r\n      {/* content */}\r\n      <div className=\"pwf_content\">\r\n        {/* 내가 참가자인 방 모음 */}\r\n        <ul className=\"stream_room_lists\">\r\n          {user.stream_room && user.stream_room.length\r\n            ? user.stream_room.map((val) => <StreamRoomLi data={val} />)\r\n            : \"\"}\r\n          <button\r\n            onClick={() =>\r\n              emitter.emit(\"modal\", { type: \"stream\", open: true })\r\n            }\r\n          >\r\n            방만들기\r\n          </button>\r\n        </ul>\r\n        {/* 내 친구 리스트 */}\r\n        <Suspense fallback={<div>loading...</div>}>\r\n          <MyFriends />\r\n        </Suspense>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n"],"mappings":"AAAA;AACA,MAAO,iBAAiB,CAExB,OAASA,OAAO,KAAQ,eAAe,CACvC,OAASC,IAAI,CAAEC,QAAQ,CAAEC,SAAS,KAAiB,OAAO,CAE1D,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,OAASC,UAAU,KAAQ,+BAA+B,CAC1D,OAASC,YAAY,CAAEC,UAAU,KAAQ,gBAAgB,CAEzD;AACA,OAASC,KAAK,KAAQ,SAAS,CAC/B,OAASC,UAAU,KAAQ,0BAA0B,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACtD,KAAM,CAAAC,SAAS,cAAGd,IAAI,CAAC,IACrB,MAAM,CAAC,wBAAwB,CAAC,CAACe,IAAI,CAACC,IAAA,MAAC,CAAEF,SAAU,CAAC,CAAAE,IAAA,OAAM,CACxDC,OAAO,CAAEH,SACX,CAAC,EAAC,CACJ,CAAC,CACD,KAAM,CAAAI,YAAY,cAAGlB,IAAI,CAAC,IACxB,MAAM,CAAC,sBAAsB,CAAC,CAACe,IAAI,CAACI,KAAA,MAAC,CAAED,YAAa,CAAC,CAAAC,KAAA,OAAM,CACzDF,OAAO,CAAEC,YACX,CAAC,EAAC,CACJ,CAAC,CAED,MAAO,MAAM,CAAAE,IAAI,CAAGA,CAAA,GAAM,CACxB,GAAI,CAAAC,QAAQ,CAAGlB,WAAW,CAAc,CAAC,CACzC,GAAI,CAAAmB,IAAI,CAAGlB,WAAW,CAAEmB,KAAgB,EAAKA,KAAK,CAACD,IAAI,CAAC,CAExD;AACApB,SAAS,CAAC,IAAM,CACdmB,QAAQ,CAAChB,UAAU,CAACmB,aAAa,CAAC,CAAC,CAAC,CACtC,CAAC,CAAE,CAACH,QAAQ,CAAC,CAAC,CAEd;AACAnB,SAAS,CAAC,IAAM,CACd,GAAIoB,IAAI,CAACG,EAAE,CAAElB,UAAU,CAACD,YAAY,CAAEe,QAAQ,CAAEC,IAAI,CAAC,CACvD,CAAC,CAAE,CAACA,IAAI,CAAC,CAAC,CAEV,mBACET,KAAA,QAAKa,SAAS,CAAC,gBAAgB,CAAAC,QAAA,eAE7BhB,IAAA,CAACF,UAAU,GAAE,CAAC,cAGdE,IAAA,CAACH,KAAK,GAAE,CAAC,cAGTK,KAAA,QAAKa,SAAS,CAAC,aAAa,CAAAC,QAAA,eAE1Bd,KAAA,OAAIa,SAAS,CAAC,mBAAmB,CAAAC,QAAA,EAC9BL,IAAI,CAACM,WAAW,EAAIN,IAAI,CAACM,WAAW,CAACC,MAAM,CACxCP,IAAI,CAACM,WAAW,CAACE,GAAG,CAAEC,GAAG,eAAKpB,IAAA,CAACO,YAAY,EAACc,IAAI,CAAED,GAAI,CAAE,CAAC,CAAC,CAC1D,EAAE,cACNpB,IAAA,WACEsB,OAAO,CAAEA,CAAA,GACPlC,OAAO,CAACmC,IAAI,CAAC,OAAO,CAAE,CAAEC,IAAI,CAAE,QAAQ,CAAEC,IAAI,CAAE,IAAK,CAAC,CACrD,CAAAT,QAAA,CACF,0BAED,CAAQ,CAAC,EACP,CAAC,cAELhB,IAAA,CAACV,QAAQ,EAACoC,QAAQ,cAAE1B,IAAA,QAAAgB,QAAA,CAAK,YAAU,CAAK,CAAE,CAAAA,QAAA,cACxChB,IAAA,CAACG,SAAS,GAAE,CAAC,CACL,CAAC,EACR,CAAC,EACH,CAAC,CAEV,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}